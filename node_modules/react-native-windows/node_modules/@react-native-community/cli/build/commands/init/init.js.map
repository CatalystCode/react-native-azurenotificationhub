{"version":3,"sources":["../../../src/commands/init/init.ts"],"names":["DEFAULT_VERSION","doesDirectoryExist","dir","fs","existsSync","setProjectDirectory","directory","DirectoryAlreadyExistsError","mkdirSync","recursive","process","chdir","error","CLIError","cwd","getTemplateName","name","Object","keys","JSON","parse","readFileSync","path","join","dependencies","createFromTemplate","projectName","templateUri","npm","projectTitle","skipInstall","logger","debug","log","banner","projectDirectory","loader","text","templateSourceDir","mkdtempSync","os","tmpdir","start","succeed","templateName","templateConfig","templateDir","placeholderName","placeholderTitle","titlePlaceholder","postInitScript","info","installDependencies","root","e","fail","Error","removeSync","PackageManager","installAll","preferYarn","silent","platform","createProject","version","options","template","title","initialize","directoryName","relative","projectFolder","message"],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport {validateProjectName} from './validate';\nimport DirectoryAlreadyExistsError from './errors/DirectoryAlreadyExistsError';\nimport printRunInstructions from './printRunInstructions';\nimport {\n  CLIError,\n  logger,\n  getLoader,\n  Loader,\n} from '@react-native-community/cli-tools';\nimport {\n  installTemplatePackage,\n  getTemplateConfig,\n  copyTemplate,\n  executePostInitScript,\n} from './template';\nimport {changePlaceholderInTemplate} from './editTemplate';\nimport * as PackageManager from '../../tools/packageManager';\nimport {installPods} from '@react-native-community/cli-doctor';\nimport banner from './banner';\n\nconst DEFAULT_VERSION = 'latest';\n\ntype Options = {\n  template?: string;\n  npm?: boolean;\n  directory?: string;\n  displayName?: string;\n  title?: string;\n  skipInstall?: boolean;\n  version?: string;\n};\n\ninterface TemplateOptions {\n  projectName: string;\n  templateUri: string;\n  npm?: boolean;\n  directory: string;\n  projectTitle?: string;\n  skipInstall?: boolean;\n}\n\nfunction doesDirectoryExist(dir: string) {\n  return fs.existsSync(dir);\n}\n\nasync function setProjectDirectory(directory: string) {\n  if (doesDirectoryExist(directory)) {\n    throw new DirectoryAlreadyExistsError(directory);\n  }\n\n  try {\n    fs.mkdirSync(directory, {recursive: true});\n    process.chdir(directory);\n  } catch (error) {\n    throw new CLIError(\n      'Error occurred while trying to create project directory.',\n      error,\n    );\n  }\n\n  return process.cwd();\n}\n\nfunction getTemplateName(cwd: string) {\n  // We use package manager to infer the name of the template module for us.\n  // That's why we get it from temporary package.json, where the name is the\n  // first and only dependency (hence 0).\n  const name = Object.keys(\n    JSON.parse(fs.readFileSync(path.join(cwd, './package.json'), 'utf8'))\n      .dependencies,\n  )[0];\n  return name;\n}\n\nasync function createFromTemplate({\n  projectName,\n  templateUri,\n  npm,\n  directory,\n  projectTitle,\n  skipInstall,\n}: TemplateOptions) {\n  logger.debug('Initializing new project');\n  logger.log(banner);\n\n  const projectDirectory = await setProjectDirectory(directory);\n\n  const loader = getLoader({text: 'Downloading template'});\n  const templateSourceDir = fs.mkdtempSync(\n    path.join(os.tmpdir(), 'rncli-init-template-'),\n  );\n\n  try {\n    loader.start();\n\n    await installTemplatePackage(templateUri, templateSourceDir, npm);\n\n    loader.succeed();\n    loader.start('Copying template');\n\n    const templateName = getTemplateName(templateSourceDir);\n    const templateConfig = getTemplateConfig(templateName, templateSourceDir);\n    await copyTemplate(\n      templateName,\n      templateConfig.templateDir,\n      templateSourceDir,\n    );\n\n    loader.succeed();\n    loader.start('Processing template');\n\n    await changePlaceholderInTemplate({\n      projectName,\n      projectTitle,\n      placeholderName: templateConfig.placeholderName,\n      placeholderTitle: templateConfig.titlePlaceholder,\n    });\n\n    loader.succeed();\n    const {postInitScript} = templateConfig;\n    if (postInitScript) {\n      loader.info('Executing post init script ');\n      await executePostInitScript(\n        templateName,\n        postInitScript,\n        templateSourceDir,\n      );\n    }\n\n    if (!skipInstall) {\n      await installDependencies({\n        npm,\n        loader,\n        root: projectDirectory,\n        directory,\n      });\n    } else {\n      loader.succeed('Dependencies installation skipped');\n    }\n  } catch (e) {\n    loader.fail();\n    throw new Error(e);\n  } finally {\n    fs.removeSync(templateSourceDir);\n  }\n}\n\nasync function installDependencies({\n  directory,\n  npm,\n  loader,\n  root,\n}: {\n  directory: string;\n  npm?: boolean;\n  loader: Loader;\n  root: string;\n}) {\n  loader.start('Installing dependencies');\n\n  await PackageManager.installAll({\n    preferYarn: !npm,\n    silent: true,\n    root,\n  });\n\n  if (process.platform === 'darwin') {\n    await installPods({directory, loader});\n  }\n\n  loader.succeed();\n}\n\nasync function createProject(\n  projectName: string,\n  directory: string,\n  version: string,\n  options: Options,\n) {\n  const templateUri = options.template || `react-native@${version}`;\n\n  return createFromTemplate({\n    projectName,\n    templateUri,\n    npm: options.npm,\n    directory,\n    projectTitle: options.title,\n    skipInstall: options.skipInstall,\n  });\n}\n\nexport default (async function initialize(\n  [projectName]: Array<string>,\n  options: Options,\n) {\n  validateProjectName(projectName);\n\n  const root = process.cwd();\n  const version = options.version || DEFAULT_VERSION;\n  const directoryName = path.relative(root, options.directory || projectName);\n\n  try {\n    await createProject(projectName, directoryName, version, options);\n\n    const projectFolder = path.join(root, directoryName);\n    printRunInstructions(projectFolder, projectName);\n  } catch (e) {\n    logger.error(e.message);\n  }\n});\n"]}