/**
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 * @format
 */
'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flyout = void 0;
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const styles = react_native_1.StyleSheet.create({
    rctFlyout: {
        position: 'absolute',
    },
});
const RCTFlyout = (0, react_native_1.requireNativeComponent)('RCTFlyout');
/**
 * Renders a flyout component.
 *
 * This is a controlled component that requires an `onDismiss` callback that
 * updates the `isOpen` prop in order for the component to reflect user actions.
 *
 * @keyword flyout
 */
class Flyout extends react_1.default.Component {
    static getDerivedStateFromProps(nextProps, prevState) {
        // Check if we're given a new target property; we need to resolve it to a node handle before render
        if (prevState.targetRef !== nextProps.target) {
            // Map the 'target' property to a node tag to use in the native layer
            const newtarget = (0, react_native_1.findNodeHandle)(nextProps.target);
            return {
                target: newtarget,
                targetRef: nextProps.target,
            };
        }
        return prevState;
    }
    constructor(props) {
        super(props);
        this.state = { target: undefined, targetRef: null };
    }
    render() {
        const props = { ...this.props };
        return (react_1.default.createElement(RCTFlyout, { ...props, target: this.state.target, style: [styles.rctFlyout, this.props.style] }));
    }
}
exports.Flyout = Flyout;
//# sourceMappingURL=Flyout.js.map