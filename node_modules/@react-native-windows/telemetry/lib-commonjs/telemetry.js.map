{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../src/telemetry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport * as appInsights from 'applicationinsights';\n\nimport * as basePropUtils from './utils/basePropUtils';\nimport * as versionUtils from './utils/versionUtils';\nimport * as errorUtils from './utils/errorUtils';\nimport * as projectUtils from './utils/projectUtils';\n\nexport interface TelemetryOptions {\n  setupString: string;\n  preserveErrorMessages: boolean;\n  populateNpmPackageVersions: boolean;\n}\n\nexport interface CommandStartInfo {\n  commandName: string;\n  args: Record<string, any>;\n  options: Record<string, any>;\n  defaultOptions: Record<string, any>;\n}\n\nexport interface CommandEndInfo {\n  resultCode: errorUtils.CodedErrorType;\n}\n\ninterface CommandInfo {\n  startTime?: number;\n  endTime?: number;\n  startInfo?: CommandStartInfo;\n  endInfo?: CommandEndInfo;\n}\n\n// This is our key with the AI backend\nconst RNWSetupString = '795006ca-cf54-40ee-8bc6-03deb91401c3';\n\n// Environment variable to override the default setup string\nconst ENV_SETUP_OVERRIDE = 'RNW_TELEMETRY_SETUP';\n\n// Environment variable to override the http proxy (such as http://localhost:8888 for Fiddler debugging)\nconst ENV_PROXY_OVERRIDE = 'RNW_TELEMETRY_PROXY';\n\nexport const CommandEventName = 'RNWCLI.Command';\nexport const CodedErrorEventName = 'RNWCLI.CodedError';\n\n// These are the event names we're tracking\nexport const EventNamesWeTrack: string[] = [\n  CommandEventName,\n  CodedErrorEventName,\n];\n\n// These are NPM packages we care about, in terms of capturing versions used\n// and getting more details about when reporting errors\nexport const NpmPackagesWeTrack: string[] = [\n  '@react-native-community/cli',\n  '@react-native-windows/cli',\n  '@react-native-windows/telemetry',\n  'react',\n  'react-native',\n  'react-native-windows',\n  'react-native-windows-init',\n];\n\n// These are NPM packages we care about, in terms of capturing versions used\nexport const NuGetPackagesWeTrack: string[] = [\n  'Microsoft.UI.Xaml',\n  'Microsoft.Windows.CppWinRT',\n  'Microsoft.WinUI',\n];\n\n/**\n * The Telemetry class is responsible for reporting telemetry for RNW CLI.\n */\nexport class Telemetry {\n  protected static client?: appInsights.TelemetryClient = undefined;\n  protected static options: TelemetryOptions = {\n    setupString: Telemetry.getDefaultSetupString(), // We default to our AI key, but callers can easily override it in setup\n    preserveErrorMessages: false,\n    populateNpmPackageVersions: true,\n  };\n\n  protected static isTest: boolean = basePropUtils.isCliTest();\n  protected static commandInfo: CommandInfo = {};\n  protected static versionsProp: Record<string, string> = {};\n  protected static projectProp?:\n    | projectUtils.AppProjectInfo\n    | projectUtils.DependencyProjectInfo = undefined;\n\n  protected static getDefaultSetupString(): string {\n    // Enable overriding the default setup string via an environment variable\n    return process.env[ENV_SETUP_OVERRIDE] ?? RNWSetupString;\n  }\n\n  protected static reset(): void {\n    // Reset client\n    if (Telemetry.client) {\n      Telemetry.client.flush();\n      Telemetry.client = undefined;\n    }\n\n    // Reset local members\n    Telemetry.options = {\n      setupString: Telemetry.getDefaultSetupString(),\n      preserveErrorMessages: false,\n      populateNpmPackageVersions: true,\n    };\n    Telemetry.commandInfo = {};\n    Telemetry.versionsProp = {};\n    Telemetry.projectProp = undefined;\n  }\n\n  static isEnabled(): boolean {\n    return Telemetry.client !== undefined;\n  }\n\n  static getSessionId(): string {\n    return basePropUtils.getSessionId();\n  }\n\n  /** Sets up the Telemetry static to be used elsewhere. */\n  static async setup(options?: Partial<TelemetryOptions>) {\n    if (Telemetry.client) {\n      // Bail since we've already setup\n      return;\n    }\n\n    // Bail if we're in CI and not capturing CI\n    if (!this.isTest && basePropUtils.isCI() && !basePropUtils.captureCI()) {\n      return;\n    }\n\n    // Save off options for later\n    Object.assign(Telemetry.options, options);\n\n    Telemetry.setupClient();\n\n    await Telemetry.setupBaseProperties();\n\n    Telemetry.setupTelemetryProcessors();\n  }\n\n  /** Sets up Telemetry.client. */\n  private static setupClient() {\n    appInsights.Configuration.setInternalLogging(false, false);\n\n    Telemetry.client = new appInsights.TelemetryClient(\n      Telemetry.options.setupString,\n    );\n\n    // Allow overriding the proxy server via an environment variable\n    const proxyServer = process.env[ENV_PROXY_OVERRIDE];\n    if (proxyServer) {\n      Telemetry.client.config.proxyHttpUrl = proxyServer;\n      Telemetry.client.config.proxyHttpsUrl = proxyServer;\n    }\n\n    Telemetry.client.config.disableAppInsights = Telemetry.isTest;\n    Telemetry.client.config.disableStatsbeat = true;\n\n    // Despite trying to disable the statsbeat, it might still be running: https://github.com/microsoft/ApplicationInsights-node.js/issues/943\n    // So we want to disable it, and despite the method's typing, getStatsbeat() _can_ return undefined\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    Telemetry.client.getStatsbeat()?.enable(false);\n\n    Telemetry.client.channel.setUseDiskRetryCaching(!Telemetry.isTest);\n  }\n\n  /** Sets up any base properties that all telemetry events require. */\n  private static async setupBaseProperties() {\n    Telemetry.client!.commonProperties.deviceId =\n      await basePropUtils.deviceId();\n    Telemetry.client!.commonProperties.deviceArchitecture =\n      basePropUtils.deviceArchitecture();\n    Telemetry.client!.commonProperties.devicePlatform =\n      basePropUtils.devicePlatform();\n    Telemetry.client!.commonProperties.deviceLocale =\n      await basePropUtils.deviceLocale();\n    Telemetry.client!.commonProperties.deviceNumCPUs = basePropUtils\n      .deviceNumCPUs()\n      .toString();\n    Telemetry.client!.commonProperties.deviceTotalMemory = basePropUtils\n      .deviceTotalMemory()\n      .toString();\n    Telemetry.client!.commonProperties.deviceDiskFreeSpace = basePropUtils\n      .deviceDiskFreeSpace()\n      .toString();\n    Telemetry.client!.commonProperties.ciCaptured = basePropUtils\n      .captureCI()\n      .toString();\n    Telemetry.client!.commonProperties.ciType = basePropUtils.ciType();\n    Telemetry.client!.commonProperties.isMsftInternal = basePropUtils\n      .isMsftInternal()\n      .toString();\n    Telemetry.client!.commonProperties.sampleRate = basePropUtils\n      .sampleRate()\n      .toString();\n    Telemetry.client!.commonProperties.isTest = Telemetry.isTest.toString();\n    Telemetry.client!.commonProperties.sessionId = Telemetry.getSessionId();\n\n    Telemetry.client!.config.samplingPercentage = basePropUtils.sampleRate();\n\n    await Telemetry.populateToolsVersions();\n    if (Telemetry.options.populateNpmPackageVersions) {\n      await Telemetry.populateNpmPackageVersions();\n    }\n  }\n\n  /** Sets up any telemetry processors. */\n  private static setupTelemetryProcessors() {\n    Telemetry.client!.addTelemetryProcessor(Telemetry.basicTelemetryProcessor);\n    Telemetry.client!.addTelemetryProcessor(Telemetry.errorTelemetryProcessor);\n  }\n\n  /**\n   * Performs the processing necessary (mostly PII sanitization) for all events.\n   * @param envelope The ApplicationInsights event envelope.\n   * @param _contextObjects An optional context object.\n   * @returns Whether to kee\n   */\n  private static basicTelemetryProcessor(\n    envelope: appInsights.Contracts.EnvelopeTelemetry,\n    _contextObjects?: {\n      [name: string]: any;\n    },\n  ): boolean {\n    delete envelope.tags['ai.cloud.roleInstance'];\n\n    // Filter out \"legacy\" events from older stable branches\n    const properties = envelope.data.baseData?.properties;\n    if (\n      properties?.eventName &&\n      EventNamesWeTrack.includes(properties.eventName)\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Performs the processing necessary (mostly PII sanitization) for error events.\n   * @param envelope\n   * @param _contextObjects\n   * @returns\n   */\n  private static errorTelemetryProcessor(\n    envelope: appInsights.Contracts.EnvelopeTelemetry,\n    _contextObjects?: {\n      [name: string]: any;\n    },\n  ): boolean {\n    if (envelope.data.baseType === 'ExceptionData') {\n      const data = envelope.data.baseData;\n      if (data?.exceptions) {\n        for (const exception of data.exceptions) {\n          for (const frame of exception.parsedStack) {\n            errorUtils.sanitizeErrorStackFrame(frame);\n          }\n\n          // Exception message must never be blank, or AI will reject it\n          exception.message = exception.message || '[None]';\n\n          // CodedError has non-PII information in its 'type' member, plus optionally some more info in its 'data'.\n          // The message may contain PII information. This can be sanitized, but for now delete it.\n          // Note that the type of data.exceptions[0] is always going to be ExceptionDetails. It is not the original thrown exception.\n          // https://github.com/microsoft/ApplicationInsights-node.js/issues/707\n          if (Telemetry.options.preserveErrorMessages) {\n            exception.message = errorUtils.sanitizeErrorMessage(\n              exception.message,\n            );\n          } else {\n            exception.message = '[Removed]';\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Tries to update the version of the named package/tool by calling getValue(). */\n  static async tryUpdateVersionsProp(\n    name: string,\n    getValue: () => Promise<string | null>,\n    forceRefresh?: boolean,\n  ): Promise<boolean> {\n    if (!Telemetry.client) {\n      return true;\n    }\n\n    if (forceRefresh === true || !Telemetry.versionsProp[name]) {\n      const value = await getValue();\n      if (value) {\n        Telemetry.versionsProp[name] = value;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** Populates the versions property of tools we care to track. */\n  static async populateToolsVersions(refresh?: boolean) {\n    await Telemetry.tryUpdateVersionsProp(\n      'node',\n      versionUtils.getNodeVersion,\n      refresh,\n    );\n    await Telemetry.tryUpdateVersionsProp(\n      'npm',\n      versionUtils.getNpmVersion,\n      refresh,\n    );\n    await Telemetry.tryUpdateVersionsProp(\n      'yarn',\n      versionUtils.getYarnVersion,\n      refresh,\n    );\n    await Telemetry.tryUpdateVersionsProp(\n      'VisualStudio',\n      versionUtils.getVisualStudioVersion,\n      refresh,\n    );\n  }\n\n  /** Populates the versions property of npm packages we care to track. */\n  static async populateNpmPackageVersions(refresh?: boolean) {\n    for (const npmPackage of NpmPackagesWeTrack) {\n      await Telemetry.tryUpdateVersionsProp(\n        npmPackage,\n        async () => await versionUtils.getVersionOfNpmPackage(npmPackage),\n        refresh,\n      );\n    }\n  }\n\n  /** Populates the versions property of nuget packages we care to track. */\n  static async populateNuGetPackageVersions(\n    projectFile: string,\n    refresh?: boolean,\n  ) {\n    const nugetVersions = await versionUtils.getVersionsOfNuGetPackages(\n      projectFile,\n      NuGetPackagesWeTrack,\n    );\n\n    for (const nugetPackage of NuGetPackagesWeTrack) {\n      await Telemetry.tryUpdateVersionsProp(\n        nugetPackage,\n        async () => nugetVersions[nugetPackage],\n        refresh,\n      );\n    }\n  }\n\n  static setProjectInfo(\n    info: projectUtils.AppProjectInfo | projectUtils.DependencyProjectInfo,\n  ) {\n    if (!Telemetry.client) {\n      return;\n    }\n\n    Telemetry.projectProp = info;\n  }\n\n  static startCommand(info: CommandStartInfo) {\n    if (!Telemetry.client) {\n      return;\n    }\n\n    if (Telemetry.commandInfo.startInfo) {\n      return;\n    }\n\n    Telemetry.commandInfo.startTime = Date.now();\n    Telemetry.commandInfo.startInfo = info;\n\n    // Set common command props\n    Telemetry.client!.commonProperties.commandName = info.commandName;\n  }\n\n  static endCommand(info: CommandEndInfo, extraProps?: Record<string, any>) {\n    if (!Telemetry.client) {\n      return;\n    }\n\n    if (!Telemetry.commandInfo.startInfo) {\n      return;\n    }\n\n    Telemetry.commandInfo.endTime = Date.now();\n    Telemetry.commandInfo.endInfo = info;\n\n    Telemetry.trackCommandEvent(extraProps);\n  }\n\n  private static trackCommandEvent(extraProps?: Record<string, any>) {\n    const props: Record<string, any> = {\n      eventName: CommandEventName,\n    };\n\n    // Set command props\n    props.command = {\n      options: Telemetry.commandInfo.startInfo?.options,\n      defaultOptions: Telemetry.commandInfo.startInfo?.defaultOptions,\n      args: Telemetry.commandInfo.startInfo?.args,\n      durationInSecs:\n        (Telemetry.commandInfo.endTime! - Telemetry.commandInfo.startTime!) /\n        1000,\n      resultCode: Telemetry.commandInfo.endInfo?.resultCode,\n    };\n\n    // Set remaining common props\n    props.project = Telemetry.projectProp;\n    props.versions = Telemetry.versionsProp;\n\n    // Set extra props\n    props.extraProps = {};\n    Object.assign(props.extraProps, extraProps);\n\n    // Fire event\n    Telemetry.client!.trackEvent({name: props.eventName, properties: props});\n    Telemetry.client!.flush();\n  }\n\n  static trackException(error: Error, extraProps?: Record<string, any>) {\n    if (!Telemetry.client) {\n      return;\n    }\n\n    const props: Record<string, any> = {\n      eventName: CodedErrorEventName,\n    };\n\n    // Save off CodedError info\n    const codedError =\n      error instanceof errorUtils.CodedError\n        ? (error as errorUtils.CodedError)\n        : null;\n    props.codedError = {\n      type: codedError?.type ?? 'Unknown',\n      data: codedError?.data ?? {},\n    };\n\n    // Copy msBuildErrorMessages into the codedError.data object\n    if ((error as any).msBuildErrorMessages) {\n      // Always grab MSBuild error codes if possible\n      props.codedError.data.msBuildErrors = (error as any).msBuildErrorMessages\n        .map(errorUtils.tryGetErrorCode)\n        .filter((msg: string | undefined) => msg);\n\n      // Grab sanitized MSBuild error messages if we're preserving them\n      if (Telemetry.options.preserveErrorMessages) {\n        props.codedError.data.msBuildErrorMessages = (\n          error as any\n        ).msBuildErrorMessages\n          .map(errorUtils.sanitizeErrorMessage)\n          .filter((msg: string) => msg);\n      }\n    }\n\n    // Copy miscellaneous system error fields into the codedError.data object\n    const syscallExceptionFieldsToCopy = ['errno', 'syscall', 'code'];\n    for (const f of syscallExceptionFieldsToCopy) {\n      if ((error as any)[f]) {\n        props.codedError.data[f] = (error as any)[f];\n      }\n    }\n\n    // Set remaining common props\n    props.project = Telemetry.projectProp;\n    props.versions = Telemetry.versionsProp;\n\n    // Set extra props\n    props.extraProps = {};\n    Object.assign(props.extraProps, extraProps);\n\n    // Fire event\n    Telemetry.client!.trackException({\n      exception: error,\n      properties: props,\n    });\n    Telemetry.client!.flush();\n  }\n}\n"]}