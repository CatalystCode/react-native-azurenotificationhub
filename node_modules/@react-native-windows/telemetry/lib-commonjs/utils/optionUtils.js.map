{"version":3,"file":"optionUtils.js","sourceRoot":"","sources":["../../src/utils/optionUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {camelCase, kebabCase} from 'lodash';\n\nexport type OptionSanitizer = (key: string, value: any) => any;\n\nexport type YargsOptionsType = Record<string, any>;\n\nexport interface CommanderOptionsType extends Record<string, any> {\n  logging?: boolean;\n  telemetry?: boolean;\n}\n\n/**\n * Converts a raw Commander arg name ('--no-bad-dog') into an options property name ('badDog').\n * @param name The raw Commander arg name.\n * @returns The options name.\n */\nexport function commanderNameToOptionName(name: string): string {\n  if (name.startsWith('--')) {\n    name = name.slice('--'.length);\n  }\n  if (name.startsWith('no-')) {\n    name = name.slice('no-'.length);\n  }\n  if (name.endsWith(' [string]')) {\n    name = name.slice(0, name.length - ' [string]'.length);\n  }\n  if (name.endsWith(' [number]')) {\n    name = name.slice(0, name.length - ' [number]'.length);\n  }\n  return camelCase(name);\n}\n\n/**\n * Converts a yargs-parsed options object into an options object suitable for telemetry.\n * @param options The options object as parsed by yargs.\n * @param sanitizer Function to sanitize the option values for telemetry.\n * @returns An options object suitable for telemetry.\n */\nexport function yargsOptionsToOptions(\n  options: YargsOptionsType,\n  sanitizer?: OptionSanitizer,\n): Record<string, any> {\n  const result: Record<string, any> = {};\n  for (const key of Object.keys(options)) {\n    if (\n      !(key in Object.prototype) &&\n      key !== '$0' &&\n      key !== '_' &&\n      key.includes('-') !== camelCase(key) in options\n    ) {\n      result[key] = sanitizer ? sanitizer(key, options[key]) : options[key];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts a Commander-parsed options object into an options object suitable for telemetry.\n * @param options The options object as parsed by Commander.\n * @param sanitizer Function to sanitize the option values for telemetry.\n * @returns An options object suitable for telemetry.\n */\nexport function commanderOptionsToOptions(\n  options: CommanderOptionsType,\n  sanitizer?: OptionSanitizer,\n): Record<string, any> {\n  const result: Record<string, any> = {};\n  for (const key of Object.keys(options)) {\n    if (!(key in Object.prototype)) {\n      result[key] = sanitizer ? sanitizer(key, options[key]) : options[key];\n    }\n  }\n  return result;\n}\n\n/**\n * Checks whether the given command-line args contains the given option key.\n * @param key The option key to look for.\n * @param argv The raw command-line args.\n * @returns Whether the given command-line args contains the given option key.\n */\nexport function argsContainsOption(key: string, argv: string[]): boolean {\n  const kebabKey = kebabCase(key);\n  return (\n    argv.includes(`--${key}`) ||\n    argv.includes(`--no-${key}`) ||\n    argv.includes(`--${kebabKey}`) ||\n    argv.includes(`--no-${kebabKey}`)\n  );\n}\n\n/**\n * Filters down a given set of options to only include those that were present in the command-line args.\n * @param options The full set of options.\n * @param argv The raw command-line args.\n * @returns The filtered set of options.\n */\nexport function optionsToArgs(\n  options: Record<string, any>,\n  argv: string[],\n): Record<string, any> {\n  const result: Record<string, any> = {};\n  for (const key of Object.keys(options)) {\n    if (!(key in Object.prototype) && argsContainsOption(key, argv)) {\n      result[key] = options[key];\n    }\n  }\n  return result;\n}\n"]}