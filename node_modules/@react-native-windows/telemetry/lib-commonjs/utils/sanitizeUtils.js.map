{"version":3,"file":"sanitizeUtils.js","sourceRoot":"","sources":["../../src/utils/sanitizeUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport path from 'path';\n\nimport {NpmPackagesWeTrack} from '../telemetry';\n\nconst nodeModules = '\\\\node_modules\\\\';\nconst windows = '\\\\windows\\\\';\n\nconst knownEnvironmentVariablePaths = [\n  'AppData',\n  'LocalAppData',\n  'UserProfile',\n];\n\n/**\n * Gets an anonymized version of the given path, suitable for Telemetry.\n * @param filepath The path to anonymize.\n * @param projectRoot Optional root path for the project. Defaults to process.cwd().\n * @returns The anonymized path.\n */\nexport function getAnonymizedPath(\n  filepath: string,\n  projectRoot?: string,\n): string {\n  projectRoot = (projectRoot ?? process.cwd())\n    .replace(/\\//g, '\\\\')\n    .toLowerCase();\n  projectRoot = projectRoot.endsWith('\\\\')\n    ? projectRoot.slice(0, -1)\n    : projectRoot;\n  filepath = filepath.replace(/\\//g, '\\\\');\n\n  const ext = path.extname(filepath);\n\n  // Check if we're under node_modules\n  const nodeModulesIndex = filepath.toLowerCase().lastIndexOf(nodeModules);\n  if (nodeModulesIndex >= 0) {\n    // We are under node_modules\n\n    // Check if it's an npm package we're tracking\n    for (const trackedNpmPackage of NpmPackagesWeTrack) {\n      const startIndex = filepath\n        .toLowerCase()\n        .lastIndexOf(\n          nodeModules + trackedNpmPackage.replace(/\\//g, '\\\\') + '\\\\',\n        );\n      if (startIndex >= 0) {\n        // We are under node_modules within an npm package we're tracking, anonymize by removing root\n        return (\n          '[node_modules]\\\\' + filepath.slice(startIndex + nodeModules.length)\n        );\n      }\n    }\n\n    // It's an npm package we're not tracking, anonymize with [node_modules]\n    return `[node_modules]\\\\???${ext}(${\n      filepath.slice(nodeModulesIndex).length - nodeModules.length\n    })`;\n  }\n\n  // Check if we're under the projectRoot\n  if (filepath.toLowerCase().startsWith(projectRoot)) {\n    // We are under the projectRoot\n    const rest = filepath.slice(projectRoot.length);\n    if (rest.toLowerCase().startsWith(windows)) {\n      // We are under the windows path, anonymize with [windows]\n      return `[windows]\\\\???${ext}(${rest.length - windows.length})`;\n    } else {\n      // We are just within the projectRoot, anonymize with [project_dir]\n      if (rest === '' || rest === '\\\\') {\n        return '[project_dir]';\n      } else {\n        return `[project_dir]\\\\???${ext}(${\n          rest.length - (rest.startsWith('\\\\') ? 1 : 0)\n        })`;\n      }\n    }\n  }\n\n  // Check if we're under a known environmental variable path\n  for (const knownPath of knownEnvironmentVariablePaths) {\n    if (\n      process.env[knownPath] &&\n      filepath.toLowerCase().startsWith(process.env[knownPath]!.toLowerCase())\n    ) {\n      return `[${knownPath}]\\\\???(${\n        filepath.length - process.env[knownPath]!.length\n      })`;\n    }\n  }\n\n  // We are somewhere else, anonymize with [path]\n  return '[path]';\n}\n"]}