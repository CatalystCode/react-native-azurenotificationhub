{"version":3,"file":"projectUtils.js","sourceRoot":"","sources":["../../src/utils/projectUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {createHash} from 'crypto';\nimport fs from '@react-native-windows/fs';\nimport path from 'path';\n\ninterface ProjectInfo {\n  id: string | null;\n  platforms: Array<string>;\n  rnwLang: 'cpp' | 'cs' | 'cpp+cs' | null;\n}\n\nexport interface DependencyProjectInfo extends ProjectInfo {}\n\nexport interface AppProjectInfo extends ProjectInfo {\n  usesTS: boolean;\n  usesRNConfig: boolean;\n  jsEngine: string;\n  rnwSource: string;\n  dependencies: Array<DependencyProjectInfo>;\n}\n\n/**\n * Gets a unique, telemetry-safe project ID based on the project name.\n * @param projectName The project name.\n * @returns The telemetry-safe project ID.\n */\nexport function getProjectId(projectName: string): string {\n  const hash = createHash('sha256');\n  hash.update(projectName);\n  return hash.digest('hex');\n}\n\n/**\n * Checks that a given file exits in the path specified.\n * @param fileName The file to check for.\n * @param projectRoot The root path to look in.\n * @returns Whether the file exists.\n */\nasync function fileExists(\n  fileName: string,\n  projectRoot: string,\n): Promise<boolean> {\n  try {\n    const reactNativeConfigPath = path.resolve(projectRoot, fileName);\n    const stats = await fs.stat(reactNativeConfigPath);\n    return stats.isFile();\n  } catch {}\n  return false;\n}\n\n/**\n * Gets whether the project at the given path has a react-native.config.js file.\n * @param projectRoot The project root path to look in.\n * @returns Whether the project at the given path has a react-native.config.js file.\n */\nexport async function usesReactNativeConfig(\n  projectRoot: string,\n): Promise<boolean> {\n  return fileExists('./react-native.config.js', projectRoot);\n}\n\n/**\n * Gets whether the project at the given path is using TypeScript.\n * @param projectRoot The project root path to look in.\n * @returns Whether the project at the given path is using TypeScript.\n */\nexport async function usesTypeScript(projectRoot: string): Promise<boolean> {\n  return fileExists('./tsconfig.json', projectRoot);\n}\n\n/**\n * Get the list of keys in the object for which the value is defined.\n * @param obj The object to search.\n * @returns The list of keys.\n */\nfunction getDefinedKeys(obj: Record<string, any>): string[] {\n  return Object.keys(obj).filter(\n    value => obj[value] !== undefined && obj[value] !== null && value,\n  );\n}\n\n/**\n * Given a react-native CLI config, determine the language of the RNW dependency if possible.\n * @param config Dependency config passed from react-native CLI.\n * @returns The language of the RNW dependency.\n */\nfunction getDependencyRnwLang(\n  config: Record<string, any> | null | undefined,\n): 'cpp' | 'cs' | 'cpp+cs' | null {\n  if (config) {\n    let cppCount = 0;\n    let csCount = 0;\n    for (const project of config.projects) {\n      switch (project.projectLang) {\n        case 'cpp':\n          cppCount++;\n          break;\n        case 'cs':\n          csCount++;\n          break;\n      }\n    }\n    if (cppCount > 0 && csCount > 0) {\n      return 'cpp+cs';\n    } else if (cppCount > 0) {\n      return 'cpp';\n    } else if (csCount > 0) {\n      return 'cs';\n    }\n  }\n  return null;\n}\n\n/**\n * Returns true if the item is a boolean with a value of true or a string with a value of 'true'.\n * @param item The item to parse.\n * @returns The boolean value.\n */\nfunction parseBoolean(item: any): boolean {\n  if (typeof item === 'boolean') {\n    return item;\n  } else if (typeof item === 'string') {\n    return item.toLowerCase() === 'true';\n  }\n  return false;\n}\n\n/**\n * Calculate the project telemetry info from a react-native CLI config.\n * @param config Config passed from react-native CLI.\n * @returns The calculated project info.\n */\nexport async function configToProjectInfo(\n  config: Record<string, any>,\n): Promise<AppProjectInfo | DependencyProjectInfo | null> {\n  try {\n    const id: string = getProjectId(\n      require(path.join(config.root, 'package.json')).name,\n    );\n    const platforms = getDefinedKeys(config.project);\n\n    if ('windows' in config.project && config.project.windows !== null) {\n      const rnwLang = config.project.windows.project?.projectLang;\n      const usesTS = await usesTypeScript(config.project.windows.folder);\n      const usesRNConfig = await usesReactNativeConfig(\n        config.project.windows.folder,\n      );\n      const jsEngine = parseBoolean(\n        config.project.windows.experimentalFeatures?.UseHermes,\n      )\n        ? 'Hermes'\n        : 'Chakra';\n      const rnwSource = parseBoolean(\n        config.project.windows.experimentalFeatures?.UseExperimentalNuget,\n      )\n        ? 'NuGet'\n        : 'Source';\n\n      const dependencies: DependencyProjectInfo[] = [];\n      for (const dependencyName in config.dependencies) {\n        if (!Object.prototype.hasOwnProperty(dependencyName)) {\n          const dependencyId = getProjectId(dependencyName);\n          const dependencyPlatforms = getDefinedKeys(\n            config.dependencies[dependencyName].platforms,\n          );\n\n          if (dependencyPlatforms.length > 0) {\n            const dependencyRnwLang = getDependencyRnwLang(\n              config.dependencies[dependencyName].platforms.windows,\n            );\n            const dependencyInfo: DependencyProjectInfo = {\n              id: dependencyId,\n              platforms: dependencyPlatforms,\n              rnwLang: dependencyRnwLang,\n            };\n            dependencies.push(dependencyInfo);\n          }\n        }\n      }\n\n      const appInfo: AppProjectInfo = {\n        id,\n        platforms,\n        rnwLang,\n        usesTS,\n        usesRNConfig,\n        jsEngine,\n        rnwSource,\n        dependencies,\n      };\n\n      return appInfo;\n    }\n\n    // Probably just a dependency project, return minimal info\n    const dependencyInfo: DependencyProjectInfo = {\n      id,\n      platforms,\n      rnwLang: null,\n    };\n    return dependencyInfo;\n  } catch {}\n  return null;\n}\n\n/**\n * Gets the full path to the app's native project file from a react-native CLI config.\n * @param config Config passed from react-native CLI.\n * @returns The full path to the app's native project file\n */\nexport function getProjectFileFromConfig(\n  config: Record<string, any>,\n): string | null {\n  try {\n    if ('windows' in config.project && config.project.windows !== null) {\n      return path.join(\n        config.project.windows.folder,\n        config.project.windows.sourceDir,\n        config.project.windows.project.projectFile,\n      );\n    }\n  } catch {}\n  return null;\n}\n"]}