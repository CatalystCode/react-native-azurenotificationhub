{"version":3,"file":"basePropUtils.js","sourceRoot":"","sources":["../../src/utils/basePropUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {execSync} from 'child_process';\nimport {totalmem, cpus, arch, platform} from 'os';\n\nimport ci from 'ci-info';\nimport {randomBytes} from 'crypto';\nimport osLocale from 'os-locale';\n\nconst DeviceIdRegPath = 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\SQMClient';\nconst DeviceIdRegKey = 'MachineId';\n\n/**\n * Gets a telemetry-safe stable device ID.\n * @returns A telemetry-safe stable device ID.\n */\nexport async function deviceId(): Promise<string> {\n  try {\n    const output = execSync(\n      `${process.env.windir}\\\\System32\\\\reg.exe query ${DeviceIdRegPath} /v ${DeviceIdRegKey}`,\n    ).toString();\n\n    const result = output.match(/\\{([0-9A-Fa-f-]{36})\\}/);\n    if (result && result.length > 1) {\n      return `s:${result[1]}`;\n    }\n  } catch {}\n  return '';\n}\n\n/**\n * Gets the device architecture, like x64/arm64.\n * @returns The device architecture.\n */\nexport function deviceArchitecture(): string {\n  return arch();\n}\n\n/**\n * Gets the device platform, like darwin/linux/win32.\n * @returns The device platform.\n */\nexport function devicePlatform(): string {\n  return platform();\n}\n\n/**\n * Gets the device locale.\n * @returns The device locale.\n */\nexport async function deviceLocale(): Promise<string> {\n  return await osLocale();\n}\n\n/**\n * Gets the device's number of CPUs.\n * @returns The device's number of CPUs.\n */\nexport function deviceNumCPUs(): number {\n  return cpus().length;\n}\n\n/**\n * Gets the device's total memory in bytes.\n * @returns The device's total memory in bytes.\n */\nexport function deviceTotalMemory(): number {\n  return totalmem();\n}\n\n/**\n * Gets the free space of the give drive in bytes.\n * @param drivePath A path on the drive to check.\n * @returns The free space of the give drive in bytes.\n */\nexport function deviceDiskFreeSpace(drivePath?: string | null): number {\n  try {\n    const out = execSync(`dir /-C ${drivePath ?? process.cwd()}`)\n      .toString()\n      .split('\\r\\n');\n    const line = out[out.length - 2];\n    const result = line.match(/(\\d+) [^\\d]+(\\d+) /);\n    if (result && result.length > 2) {\n      return Number(result[2]);\n    }\n  } catch {}\n  return -1;\n}\n\n/**\n * Gets the telemetry sample rate.\n * @returns The telemetry sample rate.\n */\nexport function sampleRate(): number {\n  return 100;\n}\n\n/**\n * Gets whether or not telemetry events are captured when running in CI.\n * @returns Whether or not telemetry events are captured when running in CI.\n */\nexport function captureCI(): boolean {\n  // Only capture events in CI if running tests\n  return isCliTest();\n}\n\n/**\n * Gets the whether the process is currently running in CI.\n * @returns Whether the process is currently running in CI.\n */\nexport function isCI(): boolean {\n  return ci.isCI;\n}\n\n/**\n * Gets the type of CI the process is running under.\n * @returns The type of CI the process is running under.\n */\nexport function ciType(): string {\n  return ci.isCI ? ci.name ?? 'Unknown' : 'None';\n}\n\n/**\n * Gets whether the process is running on a Microsoft owned machine.\n * @returns Whether the process is running on a Microsoft owned machine.\n */\nexport function isMsftInternal(): boolean {\n  return (\n    process.env.UserDNSDomain !== undefined &&\n    process.env.UserDNSDomain.toLowerCase().endsWith('corp.microsoft.com')\n  );\n}\n\n/**\n * Gets whether the process is running as part of our CLI tests.\n * @returns Whether the process is running as part of our CLI tests.\n */\nexport function isCliTest(): boolean {\n  return (\n    process.env.RNW_CLI_TEST !== undefined &&\n    process.env.RNW_CLI_TEST.toLowerCase().trim() === 'true'\n  );\n}\n\nlet sessionId: string | undefined;\n\n/**\n * Gets a stable session ID for correlating telemetry events.\n * @returns A stable session ID for correlating telemetry events.\n */\nexport function getSessionId(): string {\n  return (\n    sessionId ?? (sessionId = randomBytes(16).toString('hex').padStart(32, '0'))\n  );\n}\n"]}