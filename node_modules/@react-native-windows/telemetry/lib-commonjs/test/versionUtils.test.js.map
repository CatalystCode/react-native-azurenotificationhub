{"version":3,"file":"versionUtils.test.js","sourceRoot":"","sources":["../../src/test/versionUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport * as versionUtils from '../utils/versionUtils';\n\nimport path from 'path';\nimport semver from 'semver';\n\nfunction expectValidVersion(version: string | null, expectSemVer: boolean) {\n  expect(version).not.toBeNull();\n  expect(version).toBeDefined();\n  if (expectSemVer) {\n    expect(semver.valid(version)).toBe(version);\n  } else {\n    version!.split('.').forEach(s => {\n      const tryParseInt = () => {\n        parseInt(s, 10);\n      };\n      expect(tryParseInt).not.toThrow();\n    });\n  }\n}\n\ntest('getNodeVersion() is valid', async () => {\n  const version = await versionUtils.getNodeVersion();\n  expectValidVersion(version, true);\n});\n\ntest('getNpmVersion() is valid', async () => {\n  const version = await versionUtils.getNpmVersion();\n  if (version) {\n    expectValidVersion(version, true);\n  }\n});\n\ntest('getYarnVersion() is valid', async () => {\n  const version = await versionUtils.getYarnVersion();\n  if (version) {\n    expectValidVersion(version, true);\n  }\n});\n\ntest('getVisualStudioVersion() is valid', async () => {\n  const version = await versionUtils.getVisualStudioVersion();\n  expectValidVersion(version, false);\n});\n\ntest('getVersionOfNpmPackage() of empty string is null', async () => {\n  const version = await versionUtils.getVersionOfNpmPackage('');\n  expect(version).toBeNull();\n});\n\ntest('getVersionOfNpmPackage() of invalid package is null', async () => {\n  const version = await versionUtils.getVersionOfNpmPackage('invalidpackage');\n  expect(version).toBeNull();\n});\n\ntest('getVersionOfNpmPackage() of valid package is valid', async () => {\n  const version = await versionUtils.getVersionOfNpmPackage('jest');\n  expectValidVersion(version, true);\n});\n\ntest('getVersionsOfNuGetPackages() of valid package in packages.config is valid', async () => {\n  const projectFile = path.resolve(\n    __dirname,\n    'projects/UsesPackagesConfig/UsesPackagesConfig.vcxproj',\n  );\n  const versions = await versionUtils.getVersionsOfNuGetPackages(projectFile, [\n    'Microsoft.Windows.CppWinRT',\n  ]);\n  expect(versions).not.toBeNull();\n  expectValidVersion(versions['Microsoft.Windows.CppWinRT'], false);\n});\n\ntest('getVersionsOfNuGetPackages() of invalid package in packages.config is invalid', async () => {\n  const projectFile = path.resolve(\n    __dirname,\n    'projects/UsesPackagesConfig/UsesPackagesConfig.vcxproj',\n  );\n  const versions = await versionUtils.getVersionsOfNuGetPackages(projectFile, [\n    'Invalid.Package',\n  ]);\n  expect(versions).toStrictEqual({});\n});\n\ntest('getVersionsOfNuGetPackages() of valid package in project is valid', async () => {\n  const projectFile = path.resolve(\n    __dirname,\n    'projects/UsesPackageReference/UsesPackageReference.csproj',\n  );\n  const versions = await versionUtils.getVersionsOfNuGetPackages(projectFile, [\n    'Microsoft.NETCore.UniversalWindowsPlatform',\n  ]);\n  expect(versions).not.toBeNull();\n  expectValidVersion(\n    versions['Microsoft.NETCore.UniversalWindowsPlatform'],\n    false,\n  );\n});\n\ntest('getVersionsOfNuGetPackages() of invalid package in project is invalid', async () => {\n  const projectFile = path.resolve(\n    __dirname,\n    'projects/UsesPackageReference/UsesPackageReference.csproj',\n  );\n  const versions = await versionUtils.getVersionsOfNuGetPackages(projectFile, [\n    'Invalid.Package',\n  ]);\n  expect(versions).toStrictEqual({});\n});\n"]}