{"version":3,"file":"projectUtils.test.js","sourceRoot":"","sources":["../../src/test/projectUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport path from 'path';\nimport {execSync} from 'child_process';\n\nimport * as projectUtils from '../utils/projectUtils';\n\ntest('getProjectId() does not match project name', () => {\n  const projectName = 'test-project';\n  expect(projectUtils.getProjectId(projectName)).not.toContain(projectName);\n});\n\ntest('getProjectId() does not change for same project name', () => {\n  const projectName = 'test-project';\n  expect(projectUtils.getProjectId(projectName)).toBe(\n    projectUtils.getProjectId(projectName),\n  );\n});\n\ntest('getProjectId() returns different ids for different project names', () => {\n  const projectName1 = 'test-project1';\n  const projectName2 = 'test-project2';\n  expect(projectUtils.getProjectId(projectName1)).not.toBe(\n    projectUtils.getProjectId(projectName2),\n  );\n});\n\ntest('usesReactNativeConfig() is false with no react-native.config.js present', async () => {\n  const projectRoot = path.resolve(__dirname, 'projects/BlankUsesTypeScript');\n  const value = await projectUtils.usesReactNativeConfig(projectRoot);\n  expect(value).toBe(false);\n});\n\ntest('usesReactNativeConfig() is true with react-native.config.js present', async () => {\n  const projectRoot = path.resolve(\n    __dirname,\n    'projects/BlankUsesReactNativeConfig',\n  );\n  const value = await projectUtils.usesReactNativeConfig(projectRoot);\n  expect(value).toBe(true);\n});\n\ntest('usesTypeScript() is false with no tsconfig.json present', async () => {\n  const projectRoot = path.resolve(\n    __dirname,\n    'projects/BlankUsesReactNativeConfig',\n  );\n  const value = await projectUtils.usesTypeScript(projectRoot);\n  expect(value).toBe(false);\n});\n\ntest('usesTypeScript() is true with tsconfig.json present', async () => {\n  const projectRoot = path.resolve(__dirname, 'projects/BlankUsesTypeScript');\n  const value = await projectUtils.usesTypeScript(projectRoot);\n  expect(value).toBe(true);\n});\n\ntest('configToProjectInfo() works with playground project info', async () => {\n  const playgroundRoot = path.resolve(__dirname, '../../../../playground');\n  const config = JSON.parse(\n    execSync('npx react-native config', {\n      cwd: playgroundRoot,\n      stdio: ['ignore', 'pipe', 'ignore'],\n    }).toString(),\n  );\n\n  const info = await projectUtils.configToProjectInfo(config);\n  expect(info).not.toBeNull();\n\n  const projectInfo = info as projectUtils.AppProjectInfo;\n\n  expect(projectInfo.id).toBe(projectUtils.getProjectId('playground'));\n  expect(projectInfo.platforms).toStrictEqual(['windows']);\n  expect(projectInfo.rnwLang).toBe('cpp');\n  expect(projectInfo.usesTS).toBe(true);\n  expect(projectInfo.usesRNConfig).toBe(true);\n  expect(projectInfo.jsEngine).toBe('Hermes');\n  expect(projectInfo.rnwSource).toBe('Source');\n});\n"]}