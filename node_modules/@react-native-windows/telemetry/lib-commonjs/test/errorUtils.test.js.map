{"version":3,"file":"errorUtils.test.js","sourceRoot":"","sources":["../../src/test/errorUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport * as appInsights from 'applicationinsights';\n\nimport * as errorUtils from '../utils/errorUtils';\n\ntest('tryGetErrorCode() with valid error code', () => {\n  expect(errorUtils.tryGetErrorCode('foo bar error FOO2020: the thing')).toBe(\n    'FOO2020',\n  );\n});\n\ntest('tryGetErrorCode() without valid error code', () => {\n  expect(errorUtils.tryGetErrorCode('foo bar the thing')).toBeUndefined();\n});\n\ntest('tryGetErrorCode() with word error but no code', () => {\n  expect(errorUtils.tryGetErrorCode('test error')).toBeUndefined();\n});\n\ntest('sanitizeErrorMessage() no-op on empty string', () => {\n  expect(errorUtils.sanitizeErrorMessage('')).toBe('');\n});\n\ntest('sanitizeErrorMessage() no-op on test string', () => {\n  expect(errorUtils.sanitizeErrorMessage('some text')).toBe('some text');\n});\n\ntest(\"sanitizeErrorMessage() 'project_dir'\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(`this is the cwd: '${process.cwd()}'`),\n  ).toBe(`this is the cwd: [project_dir]`);\n});\n\ntest(\"sanitizeErrorMessage() 'project_dir' uppercase\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `uppercase: '${process.cwd().toUpperCase()}'`,\n    ),\n  ).toBe(`uppercase: [project_dir]`);\n});\n\ntest(\"sanitizeErrorMessage() 'project_dir' lowercase\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `lowercase: '${process.cwd().toLowerCase()}'`,\n    ),\n  ).toBe(`lowercase: [project_dir]`);\n});\n\ntest(\"sanitizeErrorMessage() 'project_dir' and something else\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `this is the cwd: '${process.cwd()}' and something else`,\n    ),\n  ).toBe(`this is the cwd: [project_dir] and something else`);\n});\n\ntest('sanitizeErrorMessage() project_dir and something else', () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `this is the cwd: ${process.cwd()} and something else`,\n    ),\n  ).toBe(\n    `this is the cwd: [project_dir]\\\\???(${' and something else'.length})`,\n  );\n});\n\ntest(\"sanitizeErrorMessage() 'node_modules'\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `this is the cwd: '${process.cwd()}\\\\node_modules'`,\n    ),\n  ).toBe(`this is the cwd: [project_dir]\\\\???(${'node_modules'.length})`);\n});\n\ntest(\"sanitizeErrorMessage() 'node_modules\\\\foo'\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `this is the cwd: '${process.cwd()}\\\\node_modules\\\\foo'`,\n    ),\n  ).toBe(`this is the cwd: [node_modules]\\\\???(${'foo'.length})`);\n});\n\ntest(\"sanitizeErrorMessage() 'node_modules\\\\foo' uppercase\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `uppercase: '${process.cwd().toUpperCase()}\\\\NODE_MODULES\\\\foo'`,\n    ),\n  ).toBe(`uppercase: [node_modules]\\\\???(${'foo'.length})`);\n});\n\ntest(\"sanitizeErrorMessage() 'node_modules\\\\foo' lowercase\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `lowercase: '${process.cwd().toLowerCase()}\\\\NODE_MODULES\\\\foo'`,\n    ),\n  ).toBe(`lowercase: [node_modules]\\\\???(${'foo'.length})`);\n});\n\ntest(\"sanitizeErrorMessage() 'node_modules\\\\' and something else\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `trailing: '${process.cwd()}\\\\node_modules\\\\' and something else`,\n    ),\n  ).toBe(`trailing: [node_modules]\\\\???(0) and something else`);\n});\n\ntest('sanitizeErrorMessage() node_modules and something else that could be part of the path', () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `this is the cwd: ${process.cwd()}\\\\node_modules and something else that could be part of the path`,\n    ),\n  ).toBe(\n    `this is the cwd: [project_dir]\\\\???(${\n      'node_modules and something else that could be part of the path'.length\n    })`,\n  );\n});\n\ntest('sanitizeErrorMessage() \\\\node_modules\\\\ a file under nm', () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `this is the cwd: ${process.cwd()}\\\\node_modules\\\\ a file under nm`,\n    ),\n  ).toBe(`this is the cwd: [node_modules]\\\\???(${' a file under nm'.length})`);\n});\n\ntest('sanitizeErrorMessage() other path', () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(`this is another path: A:\\\\foo\\\\bar\\\\baz`),\n  ).toBe(`this is another path: [path]`);\n});\n\ntest(\"sanitizeErrorMessage() 'other path'\", () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `this is another path: 'A:\\\\foo\\\\bar\\\\baz'`,\n    ),\n  ).toBe(`this is another path: [path]`);\n});\n\ntest('sanitizeErrorMessage() tracked packages in the npx cache', () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `Cannot find module 'react-native/package.json'\n      Require stack:\n      - ${process.env.AppData}\\\\npm-cache\\\\_npx\\\\1384\\\\node_modules\\\\react-native-windows-init\\\\lib-commonjs\\\\Cli.js\n      - ${process.env.AppData}\\\\npm-cache\\\\_npx\\\\1384\\\\node_modules\\\\react-native-windows-init\\\\bin.js`,\n    ),\n  ).toBe(`Cannot find module react-native/package.json\n      Require stack:\n      - [node_modules]\\\\react-native-windows-init\\\\lib-commonjs\\\\Cli.js\n      - [node_modules]\\\\react-native-windows-init\\\\bin.js`);\n});\n\ntest('sanitizeErrorMessage() forward slashes', () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `EPERM: operation not permitted, scandir  ${process.env.UserProfile!.replace(\n        /\\\\/g,\n        '/',\n      )}/source/repos/rn2/wintest/windows/packages/boost.1.76.0.0/lib/native/include`,\n    ),\n  ).toBe(\n    `EPERM: operation not permitted, scandir  [UserProfile]\\\\???(${\n      '/source/repos/rn2/wintest/windows/packages/boost.1.76.0.0/lib/native/include'\n        .length\n    })`,\n  );\n});\n\ntest('sanitizeErrorMessage() file share path', () => {\n  expect(errorUtils.sanitizeErrorMessage(`file here: \\\\\\\\server\\\\share`)).toBe(\n    'file here: [path]',\n  );\n});\n\ntest('sanitizeErrorMessage() with cpu id', () => {\n  expect(errorUtils.sanitizeErrorMessage('5>This is an error')).toBe(\n    'This is an error',\n  );\n});\n\ntest('sanitizeErrorMessage() with cpu/thread id', () => {\n  expect(errorUtils.sanitizeErrorMessage('5:42>This is an error')).toEqual(\n    'This is an error',\n  );\n});\n\ntest('sanitizeErrorMessage() with standard MSBuild error', () => {\n  expect(\n    errorUtils.sanitizeErrorMessage(\n      `2:6>C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\bin\\\\10.0.19041.0\\\\XamlCompiler\\\\Microsoft.Windows.UI.Xaml.Common.targets(486,5): error MSB4181: The \"CompileXaml\" task returned false but did not log an error. [${process.cwd()}\\\\windows\\\\teltest68\\\\teltest68.csproj]`,\n    ),\n  ).toEqual(\n    `[path](486,5): error MSB4181: The CompileXaml task returned false but did not log an error. [windows]\\\\???.csproj(${\n      'teltest68\\\\teltest68.csproj'.length\n    })`,\n  );\n});\n\ntest('sanitizeErrorStackFrame() with empty frame', () => {\n  const emptyFrame: appInsights.Contracts.StackFrame = {\n    level: 0,\n    method: '',\n    fileName: '',\n    assembly: 'asdf',\n    line: 0,\n  };\n  errorUtils.sanitizeErrorStackFrame(emptyFrame);\n  expect(emptyFrame).toEqual({\n    level: 0,\n    assembly: '',\n    fileName: '[path]',\n    method: '',\n    line: 0,\n  });\n});\n\ntest('sanitizeErrorStackFrame() with assembly name', () => {\n  const frame1: appInsights.Contracts.StackFrame = {\n    method: '',\n    fileName: `${process.cwd()}\\\\foo.js`,\n    assembly: 'asdf',\n    level: 0,\n    line: 0,\n  };\n  errorUtils.sanitizeErrorStackFrame(frame1);\n  expect(frame1).toEqual({\n    assembly: '',\n    fileName: '[project_dir]\\\\???.js(6)',\n    method: '',\n    level: 0,\n    line: 0,\n  });\n});\n\ntest('sanitizeErrorStackFrame() with method name', () => {\n  const frame2: appInsights.Contracts.StackFrame = {\n    method: `myMethod (something ${process.cwd()}`,\n    fileName: `${process.cwd()}\\\\telemetry\\\\foo.js`,\n    assembly: 'asdf',\n    level: 1,\n    line: 42,\n  };\n  errorUtils.sanitizeErrorStackFrame(frame2);\n  expect(frame2).toEqual({\n    assembly: '',\n    fileName: '[project_dir]\\\\???.js(16)',\n    method: 'myMethod',\n    level: 1,\n    line: 42,\n  });\n});\n"]}