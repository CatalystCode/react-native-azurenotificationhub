{"version":3,"file":"sanitizeUtils.test.js","sourceRoot":"","sources":["../../src/test/sanitizeUtils.test.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,gDAAwB;AAExB,sEAAwD;AAExD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAEjC,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;IAC9D,MAAM,YAAY,GAAG,UAAU,CAAC;IAChC,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,yDAAyD,EAAE,GAAG,EAAE;IACnE,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACvD,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iEAAiE,EAAE,GAAG,EAAE;IAC3E,MAAM,YAAY,GAAG,cAAI,CAAC,SAAS,CACjC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAC1C,CAAC;IACF,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,mFAAmF,EAAE,GAAG,EAAE;IAC7F,MAAM,YAAY,GAAG,cAAI,CAAC,SAAS,CACjC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,iCAAiC,CAAC,CACzD,CAAC;IACF,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0FAA0F,EAAE,GAAG,EAAE;IACpG,MAAM,YAAY,GAAG,cAAI,CAAC,SAAS,CACjC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,wCAAwC,CAAC,CAChE,CAAC;IACF,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,wEAAwE,EAAE,GAAG,EAAE;IAClF,MAAM,YAAY,GAAG,cAAI,CAAC,SAAS,CACjC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,4CAA4C,CAAC,CACpE,CAAC;IACF,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;AAChF,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,6EAA6E,EAAE,GAAG,EAAE;IACvF,MAAM,YAAY,GAAG,cAAI,CAAC,SAAS,CACjC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,iDAAiD,CAAC,CACzE,CAAC;IACF,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CACzB,sDAAsD,CACvD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,oEAAoE,EAAE,GAAG,EAAE;IAC9E,MAAM,YAAY,GAAG,cAAI,CAAC,SAAS,CACjC,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAa,EAAE,UAAU,CAAC,CACjD,CAAC;IACF,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qFAAqF,EAAE,GAAG,EAAE;IAC/F,MAAM,YAAY,GAAG,cAAI,CAAC,SAAS,CACjC,cAAI,CAAC,IAAI,CACP,OAAO,CAAC,GAAG,CAAC,YAAa,EACzB,iDAAiD,CAClD,CACF,CAAC;IACF,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CACzB,sDAAsD,CACvD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,6EAA6E,EAAE,GAAG,EAAE;IACvF,MAAM,YAAY,GAAG,UAAU,CAAC;IAChC,MAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACrE,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport path from 'path';\n\nimport * as sanitizeUtils from '../utils/sanitizeUtils';\n\nconst projectDir = process.cwd();\n\ntest('getAnonymizedPath() with project dir is anonymized', () => {\n  const originalPath = projectDir;\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath.startsWith('[project_dir]')).toBe(true);\n});\n\ntest('getAnonymizedPath() with project/index.js is anonymized', () => {\n  const originalPath = path.join(projectDir, 'index.js');\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath.startsWith('[project_dir]\\\\???.js')).toBe(true);\n});\n\ntest('getAnonymizedPath() with project/windows/test.sln is anonymized', () => {\n  const originalPath = path.normalize(\n    path.join(projectDir, 'windows/test.sln'),\n  );\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath.startsWith('[windows]\\\\???.sln')).toBe(true);\n});\n\ntest('getAnonymizedPath() with project/node_modules for untracked package is anonymized', () => {\n  const originalPath = path.normalize(\n    path.join(projectDir, 'node_modules/untracked/index.js'),\n  );\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath.startsWith('[node_modules]\\\\???.js')).toBe(true);\n});\n\ntest('getAnonymizedPath() with project/node_modules for react-secret-pii package is anonymized', () => {\n  const originalPath = path.normalize(\n    path.join(projectDir, 'node_modules/react-secret-pii/index.js'),\n  );\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath.startsWith('[node_modules]\\\\???.js')).toBe(true);\n});\n\ntest('getAnonymizedPath() with path under react-native-windows is anonymized', () => {\n  const originalPath = path.normalize(\n    path.join(projectDir, 'node_modules/react-native-windows/index.js'),\n  );\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath).toBe('[node_modules]\\\\react-native-windows\\\\index.js');\n});\n\ntest('getAnonymizedPath() with path under @react-native-windows/cli is anonymized', () => {\n  const originalPath = path.normalize(\n    path.join(projectDir, 'node_modules/@react-native-windows/cli/index.js'),\n  );\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath).toBe(\n    '[node_modules]\\\\@react-native-windows\\\\cli\\\\index.js',\n  );\n});\n\ntest('getAnonymizedPath() with path under %%LocalAppData%% is anonymized', () => {\n  const originalPath = path.normalize(\n    path.join(process.env.LocalAppData!, 'test.sln'),\n  );\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath.startsWith('[LocalAppData]\\\\???')).toBe(true);\n});\n\ntest('getAnonymizedPath() with a tracked npm package under %%LocalAppData%% is anonymized', () => {\n  const originalPath = path.normalize(\n    path.join(\n      process.env.LocalAppData!,\n      'node_modules/@react-native-windows/cli/index.js',\n    ),\n  );\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath).toBe(\n    '[node_modules]\\\\@react-native-windows\\\\cli\\\\index.js',\n  );\n});\n\ntest('getAnonymizedPath() with arbitrary path not under project dir is anonymized', () => {\n  const originalPath = 'test.sln';\n  const anonymizedPath = sanitizeUtils.getAnonymizedPath(originalPath);\n  expect(anonymizedPath).not.toBe(originalPath);\n  expect(anonymizedPath).toBe('[path]');\n});\n"]}