{"version":3,"file":"syncMethods.js","sourceRoot":"","sources":["../src/syncMethods.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;AAEH,8DAA6B;AAE7B,MAAM,eAAe,GAAG;IACtB,YAAY;IACZ,gBAAgB;IAChB,WAAW;IACX,WAAW;IACX,WAAW;IACX,cAAc;IACd,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,WAAW;IACX,WAAW;IACX,eAAe;IACf,aAAa;IACb,YAAY;IACZ,YAAY;IACZ,2BAA2B;IAC3B,iBAAiB;IACjB,UAAU;IACV,WAAW;IACX,WAAW;IACX,aAAa;IACb,aAAa;IACb,UAAU;IACV,aAAa;IACb,cAAc;IACd,cAAc;IACd,UAAU;IACV,2BAA2B;IAC3B,eAAe;IACf,cAAc;IACd,cAAc;IACd,YAAY;IACZ,WAAW;IACX,2BAA2B;IAC3B,YAAY;IACZ,UAAU;IACV,aAAa;IACb,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,OAAO;IACP,WAAW;IACX,eAAe;IACf,WAAW;IACX,WAAW;IACX,YAAY;CACJ,CAAC;AA8BX,MAAM,WAAW,GAAgB;IAC/B,GAAG,aAAa,EAAE;IAElB,gBAAgB,EAAE,CAChB,IAA0B,EAC1B,OAAuE,EACvE,EAAE;QACF,MAAM,IAAI,GAAG;YACX,QAAQ,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,OAAO;YACtC,IAAI,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI;SACpB,CAAC;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF,CAAC;AAEF,kBAAe,WAAW,CAAC;AAE3B,SAAS,aAAa;IACpB,MAAM,aAAa,GAA6B,EAAE,CAAC;IACnD,KAAK,MAAM,UAAU,IAAI,eAAe,EAAE;QACxC,aAAa;QACb,aAAa,CAAC,UAAU,CAAC,GAAG,qBAAE,CAAC,UAAU,CAAC,CAAC;KAC5C;IACD,OAAO,aAAgC,CAAC;AAC1C,CAAC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport fs from 'graceful-fs';\n\nconst importedMethods = [\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'closeSync',\n  'copyFileSync',\n  'createReadStream',\n  'createWriteStream',\n  'existsSync',\n  'fchmodSync',\n  'fchownSync',\n  'fdatasyncSync',\n  'fstatSync',\n  'fsyncSync',\n  'ftruncateSync',\n  'futimesSync',\n  'lchmodSync',\n  'lchownSync',\n  // Not available in Node 12\n  // 'lutimesSync',\n  'linkSync',\n  'lstatSync',\n  'mkdirSync',\n  'mkdtempSync',\n  'opendirSync',\n  'openSync',\n  'readdirSync',\n  'readlinkSync',\n  'readFileSync',\n  'readSync',\n  // Not available in Node 12\n  // 'readvSync',\n  'realpathSync',\n  'realpathSync',\n  'renameSync',\n  'rmdirSync',\n  // Not available in Node 12\n  // 'rmSync',\n  'statSync',\n  'symlinkSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'watch',\n  'watchFile',\n  'writeFileSync',\n  'writeSync',\n  'writeSync',\n  'writevSync',\n] as const;\n\ntype ValueOf<T extends readonly any[]> = T[number];\ntype ImportedMethodNames = ValueOf<typeof importedMethods>;\ntype ImportedMethods = Pick<typeof fs, ImportedMethodNames>;\n\ntype ExtraMethods = {\n  /**\n   * Synchronously reads the contents of a file, then parses it as JSON.\n   *\n   * By default the parsed JSON file is assumed to be a JSON object, with no\n   * assumptions made about content (`Record<string, unknown`). If the type is\n   * known at call-time, it can be passed to this function to alter the return\n   * type.This type is not validated to be correct at runtime.\n   *\n   * E.g. `fs.readJsonFileSync<Document>(documentPath)`;\n   *\n   * @param path A path to a file.\n   * @param options Optional set of options\n   * @param options.encoding The encoding of the JSON file (defaults to utf-8)\n   * @param options.flag File access flags\n   */\n  readJsonFileSync: <T = Record<string, unknown>>(\n    path: fs.PathLike | number,\n    options?: {encoding?: null | BufferEncoding; flag?: string | undefined},\n  ) => T;\n};\n\nexport type SyncMethods = ImportedMethods & ExtraMethods;\n\nconst syncMethods: SyncMethods = {\n  ...importMethods(),\n\n  readJsonFileSync: (\n    path: fs.PathLike | number,\n    options?: {encoding?: null | BufferEncoding; flag?: string | undefined},\n  ) => {\n    const opts = {\n      encoding: options?.encoding || 'utf-8',\n      flag: options?.flag,\n    };\n    return JSON.parse(syncMethods.readFileSync(path, opts));\n  },\n};\n\nexport default syncMethods;\n\nfunction importMethods(): ImportedMethods {\n  const copiedMethods: Partial<ImportedMethods> = {};\n  for (const methodName of importedMethods) {\n    // @ts-ignore\n    copiedMethods[methodName] = fs[methodName];\n  }\n  return copiedMethods as ImportedMethods;\n}\n"]}