{"version":3,"file":"packageUtils.js","sourceRoot":"","sources":["../src/packageUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport _ from 'lodash';\nimport fs from '@react-native-windows/fs';\nimport path from 'path';\nimport findRepoRoot from '@react-native-windows/find-repo-root';\n\nconst getMonorepoPackages: (root: string) => Array<{\n  location: string;\n  package: any;\n}> = require('get-monorepo-packages');\n\n/**\n * Represents an NPM package\n */\nexport class NpmPackage {\n  private readonly pkgPath: string;\n  protected pkgJson: any;\n\n  /**\n   * Create a NpmPackage from a given path to a package\n   */\n  static async fromPath(pkgPath: string): Promise<NpmPackage | null> {\n    return WritableNpmPackage.fromPath(pkgPath);\n  }\n\n  constructor(pkgPath: string, pkgJson: any) {\n    this.pkgPath = pkgPath;\n    this.pkgJson = pkgJson;\n  }\n\n  get path(): string {\n    return this.pkgPath;\n  }\n\n  get json(): any {\n    return _.cloneDeep(this.pkgJson);\n  }\n}\n\n/**\n * Represents an NPM package with methods to modify its on-disk package.json\n */\nexport class WritableNpmPackage extends NpmPackage {\n  /**\n   * Create a WritableNpmPackage from a given path to a package\n   */\n  static async fromPath(pkgPath: string): Promise<WritableNpmPackage | null> {\n    const jsonPath = path.join(pkgPath, 'package.json');\n    try {\n      return new WritableNpmPackage(pkgPath, await fs.readJsonFile(jsonPath));\n    } catch (ex) {\n      if ((ex as any).code === 'ENOENT') {\n        return null;\n      }\n\n      throw ex;\n    }\n  }\n\n  /**\n   * Assign properties to the package. Uses lodash merge semantics to assign\n   * properties (i.e. deep merge instead of shallow)\n   *\n   * @param props key/values to merge into the package.json\n   */\n  async mergeProps(props: Record<string, any>) {\n    await this.setJson(_.merge(this.json, props));\n  }\n\n  /**\n   * Assign properties to the package. Uses Object.assign semantics to assign\n   * properties (i.e. shallow merge)\n   *\n   * @param props key/values to merge into the package.json\n   */\n  async assignProps(props: Record<string, any>) {\n    await this.setJson(Object.assign(this.json, props));\n  }\n\n  /**\n   * Set new JSON for the package from the given object\n   */\n  async setJson(jsonObj: any) {\n    this.pkgJson = jsonObj;\n\n    await fs.writeFile(\n      path.join(this.path, 'package.json'),\n      JSON.stringify(this.json, null /*replacer*/, 2 /*space*/) + '\\n',\n    );\n  }\n}\n\n/**\n * Finds monorepo-local packages matching a given predicate. The root package\n * is not included.\n *\n * @param pred predicate describing whether to match a package\n */\nexport async function enumerateRepoPackages(\n  pred: (pkg: NpmPackage) => Promise<boolean> = async () => true,\n): Promise<WritableNpmPackage[]> {\n  const repoRoot = await findRepoRoot();\n  const allPackges = getMonorepoPackages(repoRoot).map(\n    pkg => new WritableNpmPackage(pkg.location, pkg.package),\n  );\n\n  const filteredPackages: WritableNpmPackage[] = [];\n  for (const pkg of allPackges) {\n    if (await pred(pkg)) {\n      filteredPackages.push(pkg);\n    }\n  }\n\n  return filteredPackages;\n}\n\n/**\n * Synchronously Finds monorepo-local packages matching a given predicate. The\n * root package is not included.\n *\n * @param pred predicate describing whether to match a package\n */\nexport function enumerateRepoPackagesSync(\n  pred: (pkg: NpmPackage) => boolean = () => true,\n): WritableNpmPackage[] {\n  const repoRoot = findRepoRoot.sync();\n  const allPackges = getMonorepoPackages(repoRoot).map(\n    pkg => new WritableNpmPackage(pkg.location, pkg.package),\n  );\n\n  return allPackges.filter(pred);\n}\n\n/**\n * Finds a package with a given name (local or dependency)\n */\nexport async function findPackage(\n  name: string,\n  opts: {searchPath?: string} = {},\n): Promise<NpmPackage | null> {\n  const resolvePaths = require.resolve.paths(`${name}/package.json`)!;\n\n  let pkgJsonPath: string;\n  try {\n    pkgJsonPath = require.resolve(`${name}/package.json`, {\n      paths: [opts.searchPath || process.cwd(), ...resolvePaths],\n    });\n  } catch (ex) {\n    if ((ex as any).code === 'MODULE_NOT_FOUND') {\n      return null;\n    } else {\n      throw ex;\n    }\n  }\n\n  return new NpmPackage(\n    path.dirname(pkgJsonPath),\n    await fs.readJsonFile(pkgJsonPath),\n  );\n}\n\n/**\n * Finds a monorepo-local package with a given name\n */\nexport async function findRepoPackage(\n  name: string,\n): Promise<WritableNpmPackage | null> {\n  const packages = await enumerateRepoPackages(async p => p.json.name === name);\n\n  if (packages.length === 0) {\n    return null;\n  } else {\n    return packages[0];\n  }\n}\n\n/**\n * Synchronously a monorepo-local package with a given name\n */\nexport function findRepoPackageSync(name: string): WritableNpmPackage | null {\n  const packages = enumerateRepoPackagesSync(p => p.json.name === name);\n\n  if (packages.length === 0) {\n    return null;\n  } else {\n    return packages[0];\n  }\n}\n"]}