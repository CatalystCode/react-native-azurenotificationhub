{"version":3,"file":"dependencyConfig.js","sourceRoot":"","sources":["../../src/config/dependencyConfig.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n// Types in this file are inaccurate compared to usage in terms of falsiness.\n// We should try to rewrite some of this to do automated schema validation to\n// guarantee correct types\n/* eslint-disable @typescript-eslint/no-unnecessary-condition */\n\nimport {platform} from 'os';\nimport path from 'path';\n\nimport * as configUtils from './configUtils';\n\n/*\n\nreact-native config will generate the following JSON for each native module dependency\nunder node_modules that has a Windows implementation, in order to support auto-linking.\nThis is done heuristically, so if the result isn't quite correct, native module developers\ncan provide a manual override file: react-native.config.js.\n\nSchema for dependencies:\n\nTags:\nauto - Item is always calculated by config. An override file should NEVER provide it.\nreq  - Item is required. If an override file exists, it MUST provide it. If no override file exists, config will try to calculate it.\nopt  - Item is optional. If an override file exists, it MAY provide it. If no override file exists, config may try to calculate it.\n\n{\n  folder: string,       // (auto) Absolute path to the module root folder, determined by react-native config, ex: 'c:\\path\\to\\app-name\\node_modules\\my-module'\n  sourceDir: string,    // (opt, req if projects defined) Relative path to the Windows implementation under folder, ex: 'windows'\n  solutionFile: string, // (opt) Relative path to the module's VS solution file under sourceDir, ex: 'MyModule.sln'\n  projects: [ // (opt) Array of VS projects that must be added to the consuming app's solution file, so they are built\n    {\n      projectFile: string,     // (req) Relative path to the VS project file under sourceDir, ex: 'MyModule\\MyModule.vcxproj' for 'c:\\path\\to\\app-name\\node_modules\\my-module\\windows\\MyModule\\MyModule.vcxproj'\n      directDependency: bool,  // (req) Whether to add the project file as a dependency to the consuming app's project file. true for projects that provide native modules\n      projectName: string,     // (auto) Name of the project, determined from projectFile, ex: 'MyModule'\n      projectLang: string,     // (auto) Language of the project, cpp or cs, determined from projectFile\n      projectGuid: string,     // (auto) Project identifier, determined from projectFile\n      cppHeaders: [],          // (opt) Array of cpp header include lines, ie: 'winrt/MyModule.h', to be transformed into '#include <winrt/MyModule.h>'\n      cppPackageProviders: [], // (opt) Array of fully qualified cpp IReactPackageProviders, ie: 'MyModule::ReactPackageProvider'\n      csNamespaces: [],        // (opt) Array of cs namespaces, ie: 'MyModule', to be transformed into 'using MyModule;'\n      csPackageProviders: [],  // (opt) Array of fully qualified cs IReactPackageProviders, ie: 'MyModule.ReactPackageProvider'\n    },\n  ],\n  nugetPackages: [ // (opt) Array of nuget packages including native modules that must be added as a dependency to the consuming app. It can be empty, but by its nature it can't be calculated\n    {\n      packageName: string,     // (req) Name of the nuget package to install\n      packageVersion: string,  // (req) Version of the nuget package to install\n      cppHeaders: [],          // (req) Array of cpp header include lines, ie: 'winrt/NugetModule.h', to be transformed into '#include <winrt/NugetModule.h>'\n      cppPackageProviders: [], // (req) Array of fully qualified cpp IReactPackageProviders, ie: 'NugetModule::ReactPackageProvider'\n      csNamespaces: [],        // (req) Array of cs namespaces, ie: 'NugetModule', to be transformed into 'using NugetModule;'\n      csPackageProviders: [],  // (req) Array of fully qualified cs IReactPackageProviders, ie: 'NugetModule.ReactPackageProvider'\n    },\n  ],\n}\n\nExample react-native.config.js for a 'MyModule':\n\nmodule.exports = {\n  dependency: {\n    platforms: {\n      windows: {\n        sourceDir: 'windows',\n        solutionFile: 'MyModule.sln',\n        projects: [\n          {\n            projectFile: 'MyModule\\\\MyModule.vcxproj',\n            directDependency: true,\n          }\n        ],\n      },\n    },\n  },\n};\n\n*/\n\nexport interface ProjectDependency {\n  projectFile: string;\n  directDependency: boolean;\n  projectName: string;\n  projectLang: 'cpp' | 'cs' | null;\n  projectGuid: string | null;\n  cppHeaders: string[];\n  cppPackageProviders: string[];\n  csNamespaces: string[];\n  csPackageProviders: string[];\n}\n\nexport interface NuGetPackageDependency {\n  packageName: string;\n  packageVersion: string;\n  cppHeaders: string[];\n  cppPackageProviders: string[];\n  csNamespaces: string[];\n  csPackageProviders: string[];\n}\n\nexport interface WindowsDependencyConfig {\n  folder: string;\n  sourceDir?: string;\n  solutionFile?: string | null;\n  projects: ProjectDependency[];\n  nugetPackages: NuGetPackageDependency[];\n}\n\n/**\n * Gets the config of any RNW native modules under the target folder.\n * @param userConfig A manually specified override config.\n * @return The config if any RNW native modules exist.\n */\n// Disabled due to existing high cyclomatic complexity\n// eslint-disable-next-line complexity\nexport function dependencyConfigWindows(\n  folder: string,\n  userConfig: Partial<WindowsDependencyConfig> | null = {},\n): WindowsDependencyConfig | null {\n  if (platform() !== 'win32') {\n    return null;\n  }\n\n  if (userConfig === null) {\n    return null;\n  }\n\n  const usingManualProjectsOverride =\n    'projects' in userConfig && Array.isArray(userConfig.projects);\n\n  const usingManualNugetPackagesOverride =\n    'nugetPackages' in userConfig && Array.isArray(userConfig.nugetPackages);\n\n  const result: WindowsDependencyConfig = {\n    folder,\n    projects: usingManualProjectsOverride ? userConfig.projects! : [],\n    solutionFile: null,\n    nugetPackages: usingManualNugetPackagesOverride\n      ? userConfig.nugetPackages!\n      : [],\n  };\n\n  let sourceDir: string | null = null;\n  if (usingManualProjectsOverride && result.projects.length > 0) {\n    // Manually provided projects, so extract the sourceDir\n    if (!('sourceDir' in userConfig)) {\n      sourceDir =\n        'Error: Source dir is required if projects are specified, but it is not specified in react-native.config.';\n    } else if (userConfig.sourceDir === null) {\n      sourceDir =\n        'Error: Source dir is required if projects are specified, but it is null in react-native.config.';\n    } else {\n      sourceDir = path.join(folder, userConfig.sourceDir!);\n    }\n  } else if (!usingManualProjectsOverride) {\n    // No manually provided projects, try to find sourceDir\n    if ('sourceDir' in userConfig && userConfig.sourceDir !== null) {\n      sourceDir = path.join(folder, userConfig.sourceDir!);\n    } else {\n      sourceDir = configUtils.findWindowsFolder(folder);\n    }\n  }\n\n  if (sourceDir === null) {\n    // Try to salvage the missing sourceDir\n    if (result.projects.length === 0 && result.nugetPackages.length > 0) {\n      // Only nuget packages, no sourceDir required\n      return result;\n    } else if (result.projects.length > 0) {\n      // Projects overridden but no sourceDir, assume the sourceDir === folder\n      sourceDir = folder;\n    }\n  } else if (sourceDir.startsWith('Error: ')) {\n    // Source dir error, bail with error\n    result.sourceDir = sourceDir;\n    return result;\n  }\n\n  if (sourceDir === null) {\n    // After everything above, if sourceDir is still null,\n    // there's nothing more to look for here, bail\n    return null;\n  }\n\n  result.sourceDir = path.relative(folder, sourceDir);\n\n  const usingManualSolutionFile = 'solutionFile' in userConfig;\n\n  let solutionFile = null;\n  if (usingManualSolutionFile && userConfig.solutionFile !== null) {\n    // Manually provided solutionFile, so extract it\n    solutionFile = path.join(sourceDir, userConfig.solutionFile!);\n  } else if (!usingManualSolutionFile) {\n    // No manually provided solutionFile, try to find it\n    const foundSolutions = configUtils.findSolutionFiles(sourceDir);\n    if (foundSolutions.length === 1) {\n      solutionFile = path.join(sourceDir, foundSolutions[0]);\n    }\n  }\n\n  result.solutionFile =\n    solutionFile !== null ? path.relative(sourceDir, solutionFile) : null;\n\n  if (usingManualProjectsOverride) {\n    // react-native.config used, fill out (auto) items for each provided project, verify (req) items are present\n\n    const alwaysRequired: Array<keyof ProjectDependency> = [\n      'projectFile',\n      'directDependency',\n    ];\n\n    for (const project of result.projects) {\n      // Verifying (req) items\n      let errorFound = false;\n\n      alwaysRequired.forEach(item => {\n        if (!(item in project)) {\n          (project[\n            item\n          ] as string) = `Error: ${item} is required for each project in react-native.config`;\n          errorFound = true;\n        }\n      });\n\n      if (errorFound) {\n        break;\n      }\n\n      const projectFile = path.join(sourceDir, project.projectFile);\n\n      const projectContents = configUtils.readProjectFile(projectFile);\n\n      project.projectFile = path.relative(sourceDir, projectFile);\n\n      // Calculating (auto) items\n      project.projectName = configUtils.getProjectName(\n        projectFile,\n        projectContents,\n      );\n      project.projectLang = configUtils.getProjectLanguage(projectFile);\n      project.projectGuid = configUtils.getProjectGuid(projectContents);\n\n      if (project.directDependency) {\n        // Calculating more (auto) items\n\n        const projectNamespace =\n          configUtils.getProjectNamespace(projectContents);\n\n        if (projectNamespace !== null) {\n          const cppNamespace = projectNamespace!.replace(/\\./g, '::');\n          const csNamespace = projectNamespace!.replace(/::/g, '.');\n\n          project.cppHeaders = project.cppHeaders || [`winrt/${csNamespace}.h`];\n          project.cppPackageProviders = project.cppPackageProviders || [\n            `${cppNamespace}::ReactPackageProvider`,\n          ];\n          project.csNamespaces = project.csNamespaces || [`${csNamespace}`];\n          project.csPackageProviders = project.csPackageProviders || [\n            `${csNamespace}.ReactPackageProvider`,\n          ];\n        }\n      }\n    }\n  } else {\n    // No react-native.config, try to heuristically find any projects\n\n    const foundProjects = configUtils.findDependencyProjectFiles(sourceDir);\n\n    for (const foundProject of foundProjects) {\n      const projectFile = path.join(sourceDir, foundProject);\n\n      const projectContents = configUtils.readProjectFile(projectFile);\n\n      const projectType = configUtils.getProjectType(\n        projectFile,\n        projectContents,\n      );\n\n      if (\n        projectType === 'dynamiclibrary' ||\n        projectType === 'winmdobj' ||\n        projectType === 'library'\n      ) {\n        const projectLang = configUtils.getProjectLanguage(projectFile);\n\n        const projectName = configUtils.getProjectName(\n          projectFile,\n          projectContents,\n        );\n\n        const projectGuid = configUtils.getProjectGuid(projectContents);\n\n        const projectNamespace =\n          configUtils.getProjectNamespace(projectContents);\n\n        const directDependency = true;\n\n        const cppHeaders: string[] = [];\n        const cppPackageProviders: string[] = [];\n        const csNamespaces: string[] = [];\n        const csPackageProviders: string[] = [];\n\n        if (projectNamespace !== null) {\n          const cppNamespace = projectNamespace.replace(/\\./g, '::');\n          const csNamespace = projectNamespace.replace(/::/g, '.');\n\n          cppHeaders.push(`winrt/${csNamespace}.h`);\n          cppPackageProviders.push(`${cppNamespace}::ReactPackageProvider`);\n          csNamespaces.push(`${csNamespace}`);\n          csPackageProviders.push(`${csNamespace}.ReactPackageProvider`);\n        }\n\n        result.projects.push({\n          projectFile: path.relative(sourceDir, projectFile),\n          projectName,\n          projectLang,\n          projectGuid,\n          directDependency,\n          cppHeaders,\n          cppPackageProviders,\n          csNamespaces,\n          csPackageProviders,\n        });\n      } else {\n        const projectPath = path.relative(sourceDir, projectFile);\n        result.projects.push({\n          projectFile: `Error: ${projectPath} is type '${projectType}'`,\n          directDependency: false,\n          projectName: '',\n          projectLang: null,\n          projectGuid: null,\n          cppHeaders: [],\n          cppPackageProviders: [],\n          csNamespaces: [],\n          csPackageProviders: [],\n        });\n      }\n    }\n  }\n\n  return result;\n}\n"]}