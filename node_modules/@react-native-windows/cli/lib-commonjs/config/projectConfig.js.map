{"version":3,"file":"projectConfig.js","sourceRoot":"","sources":["../../src/config/projectConfig.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n// Types in this file are inaccurate compared to usage in terms of falsiness.\n// We should try to rewrite some of this to do automated schema validation to\n// guarantee correct types\n/* eslint-disable @typescript-eslint/no-unnecessary-condition */\n\nimport {platform} from 'os';\nimport path from 'path';\n\nimport * as configUtils from './configUtils';\n\n/*\n\nreact-native config will generate the following JSON for app projects that have a\nwindows implementation, as a target for auto-linking. This is done heuristically,\nso if the result isn't quite correct, app developers can provide a manual override\nfile: react-native.config.js.\n\nSchema for app projects:\n\nTags:\nauto - Item is always calculated by config. An override file should NEVER provide it.\nreq  - Item is required. If an override file exists, it MUST provide it. If no override file exists, config will try to calculate it.\nopt  - Item is optional. If an override file exists, it MAY provide it. If no override file exists, config may try to calculate it.\n\n{\n  folder: string,       // (auto) Absolute path to the app root folder, determined by react-native config, ex: 'c:\\path\\to\\my-app'\n  sourceDir: string,    // (req) Relative path to the Windows implementation under folder, ex: 'windows'\n  solutionFile: string, // (req) Relative path to the app's VS solution file under sourceDir, ex: 'MyApp.sln'\n  useWinUI3: boolean    // (opt) If true, use WinUI 3. If false, use Windows XAML and WinUI 2.x. If missing, the value from rnwRoot\\PropertySheets\\ExperimentalFeatures.props will be used.\n  project: { // (req)\n    projectFile: string, // (req) Relative path to the VS project file under sourceDir, ex: 'MyApp\\MyApp.vcxproj' for 'c:\\path\\to\\my-app\\windows\\MyApp\\MyApp.vcxproj'\n    projectName: string, // (auto) Name of the project, determined from projectFile, ex: 'MyApp'\n    projectLang: string, // (auto) Language of the project, cpp or cs, determined from projectFile\n    projectGuid: string, // (auto) Project identifier, determined from projectFile\n  },\n  experimentalFeatures: Record<String, string> // (auto) Properties extracted from ExperimentalFeatures.props\n}\n\nExample react-native.config.js for a 'MyApp':\n\nmodule.exports = {\n  project: {\n    windows: {\n      sourceDir: 'windows',\n      solutionFile: 'MyApp.sln',\n      project: {\n        projectFile: 'MyApp\\\\MyApp.vcxproj',\n      },\n    },\n  },\n};\n\n*/\n\nexport interface Project {\n  projectFile: string;\n  projectName: string;\n  projectLang: 'cpp' | 'cs' | null;\n  projectGuid: string | null;\n  projectTypeGuid?: string;\n}\n\nexport interface WindowsProjectConfig {\n  folder: string;\n  sourceDir: string;\n  solutionFile: string;\n  project: Project;\n  useWinUI3?: boolean;\n  experimentalFeatures?: Record<string, string>;\n}\n\ntype DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]>};\n\n/**\n * Gets the config of any RNW apps under the target folder.\n * @param folder The absolute path to the target folder.\n * @param userConfig A manually specified override config.\n * @return The config if any RNW apps exist.\n */\n// Disabled due to existing high cyclomatic complexity\n// eslint-disable-next-line complexity\nexport function projectConfigWindows(\n  folder: string,\n  userConfig: Partial<WindowsProjectConfig> | null = {},\n): WindowsProjectConfig | null {\n  if (platform() !== 'win32') {\n    return null;\n  }\n\n  if (userConfig === null) {\n    return null;\n  }\n\n  const usingManualOverride = 'sourceDir' in userConfig;\n\n  const sourceDir = usingManualOverride\n    ? path.join(folder, userConfig.sourceDir!)\n    : configUtils.findWindowsFolder(folder);\n\n  if (sourceDir === null) {\n    // Nothing to look for here, bail\n    return null;\n  }\n\n  const result: DeepPartial<WindowsProjectConfig> = {\n    folder: folder,\n    sourceDir: path.relative(folder, sourceDir),\n  };\n\n  let validSolution = false;\n  let validProject = false;\n\n  if (usingManualOverride) {\n    // Manual override, try to use it for solutionFile\n    if (!('solutionFile' in userConfig)) {\n      result.solutionFile =\n        'Error: Solution file is required but not specified in react-native.config.';\n    } else if (userConfig.solutionFile === null) {\n      result.solutionFile =\n        'Error: Solution file is null in react-native.config.';\n    } else {\n      result.solutionFile = path.normalize(userConfig.solutionFile!);\n      validSolution = true;\n    }\n\n    // Manual override, try to use it for project\n    if (!('project' in userConfig)) {\n      result.project = {\n        projectFile:\n          'Error: Project is required but not specified in react-native.config.',\n      };\n    } else if (!userConfig.project) {\n      result.project = {\n        projectFile: 'Error: Project is null in react-native.config.',\n      };\n    } else {\n      if (!('projectFile' in userConfig.project)) {\n        result.project = {\n          projectFile:\n            'Error: Project file is required for project in react-native.config.',\n        };\n      } else if (userConfig.project.projectFile === null) {\n        result.project = {\n          projectFile: 'Error: Project file is null in react-native.config.',\n        };\n      } else {\n        result.project = {\n          projectFile: path.normalize(userConfig.project.projectFile),\n        };\n        validProject = true;\n      }\n    }\n\n    if ('useWinUI3' in userConfig) {\n      result.useWinUI3 = userConfig.useWinUI3;\n    }\n  } else {\n    // No manually provided solutionFile, try to find it\n    const foundSolutions = configUtils.findSolutionFiles(sourceDir);\n    if (foundSolutions.length === 0) {\n      result.solutionFile =\n        'Error: No app solution file found, please specify in react-native.config.';\n    } else if (foundSolutions.length > 1) {\n      result.solutionFile =\n        'Error: Too many app solution files found, please specify in react-native.config.';\n    } else {\n      result.solutionFile = path.normalize(foundSolutions[0]);\n      validSolution = true;\n    }\n\n    // No manually provided project, try to find it\n    const foundProjects = configUtils.findAppProjectFiles(sourceDir);\n    if (foundProjects.length === 0) {\n      result.project = {\n        projectFile:\n          'Error: No app project file found, please specify in react-native.config.',\n      };\n    } else if (foundProjects.length > 1) {\n      result.project = {\n        projectFile:\n          'Error: Too many app project files found, please specify in react-native.config.',\n      };\n    } else {\n      result.project = {\n        projectFile: path.normalize(foundProjects[0]),\n      };\n      validProject = true;\n    }\n  }\n\n  if (validSolution) {\n    result.solutionFile = path.relative(\n      sourceDir,\n      path.join(sourceDir, result.solutionFile),\n    );\n\n    // Populating experimental features from ExperimentalFeatures.props\n    const experimentalFeatures = configUtils.getExperimentalFeatures(\n      path.dirname(path.join(sourceDir, result.solutionFile)),\n    );\n    if (experimentalFeatures) {\n      result.experimentalFeatures = experimentalFeatures;\n    }\n  }\n\n  if (validProject) {\n    const projectFile = path.join(sourceDir, result.project.projectFile!);\n    const projectContents = configUtils.readProjectFile(projectFile);\n\n    result.project.projectFile = path.relative(sourceDir, projectFile);\n\n    // Add missing (auto) items\n    result.project.projectName = configUtils.getProjectName(\n      projectFile,\n      projectContents,\n    );\n    result.project.projectLang = configUtils.getProjectLanguage(projectFile);\n    result.project.projectGuid = configUtils.getProjectGuid(projectContents);\n\n    // Since we moved the UseExperimentalNuget property from the project to the\n    // ExperimentalFeatures.props file, we should should double-check the project file\n    // in case it was made with an older template\n    const useExperimentalNuget = configUtils.tryFindPropertyValue(\n      projectContents,\n      'UseExperimentalNuget',\n    );\n    if (useExperimentalNuget) {\n      result.experimentalFeatures = result.experimentalFeatures ?? {};\n      result.experimentalFeatures.UseExperimentalNuget = useExperimentalNuget;\n    }\n  }\n\n  return result as WindowsProjectConfig;\n}\n"]}