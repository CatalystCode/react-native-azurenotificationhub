{"version":3,"file":"autolink.test.js","sourceRoot":"","sources":["../../src/e2etest/autolink.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport path from 'path';\nimport {commanderNameToOptionName} from '@react-native-windows/telemetry';\nimport {projectConfigWindows} from '../config/projectConfig';\nimport {\n  AutolinkWindows,\n  autolinkOptions,\n  AutoLinkOptions,\n} from '../runWindows/utils/autolink';\nimport {DOMParser} from '@xmldom/xmldom';\nimport {ensureCppAppProject, ensureWinUI3Project} from './projectConfig.utils';\n\ntest('autolink with no windows project', () => {\n  expect(() => {\n    // eslint-disable-next-line no-new\n    new AutolinkTest({}, {}, {check: true, logging: false});\n  }).toThrowError();\n});\n\ntest('autolink with incomplete windows project', () => {\n  expect(() => {\n    const autolink = new AutolinkTest(\n      {windows: {}},\n      {},\n      {check: true, logging: false},\n    );\n    autolink.validateRequiredAppProperties();\n  }).toThrowError();\n});\n\nclass AutolinkTest extends AutolinkWindows {\n  public getWindowsProjectConfig() {\n    return this.windowsAppConfig;\n  }\n  public packagesConfig = '';\n  public experimentalFeaturesProps = '';\n  protected getPackagesConfigXml() {\n    return {\n      path: 'packages.config',\n      content: new DOMParser().parseFromString(\n        this.packagesConfig,\n        'application/xml',\n      ),\n    };\n  }\n  protected getExperimentalFeaturesPropsXml() {\n    return {\n      path: 'ExperimentalFeatures.props',\n      content: new DOMParser().parseFromString(\n        this.experimentalFeaturesProps,\n        'application/xml',\n      ),\n    };\n  }\n  protected async updateFile(filepath: string, content: string) {\n    if (filepath === 'packages.config') {\n      this.packagesConfig = content;\n    } else if (filepath === 'ExperimentalFeatures.props') {\n      this.experimentalFeaturesProps = content;\n    } else {\n      throw new Error(`Unknown path: ${filepath}`);\n    }\n    return true;\n  }\n}\n\ntest('autolink fixup sln', () => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.'}},\n    {},\n    {check: true, logging: false, sln: 'foo'},\n  );\n  expect(autolink.getWindowsProjectConfig().solutionFile).toBeUndefined();\n  expect(() => {\n    autolink.validateRequiredAppProperties();\n  }).toThrow();\n  autolink.fixUpForSlnOption();\n  expect(autolink.getWindowsProjectConfig().solutionFile).toEqual('foo');\n  expect(() => {\n    autolink.validateRequiredAppProperties();\n  }).toThrow();\n});\n\ntest('autolink fixup proj', async done => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n    {},\n    {\n      check: true,\n      logging: false,\n      proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n    },\n  );\n  expect(autolink.getWindowsProjectConfig().solutionFile).toEqual('foo.sln');\n  expect(autolink.getWindowsProjectConfig().project).toBeUndefined();\n\n  const folder = path.resolve('src/e2etest/projects/', 'WithWinUI3');\n  await ensureWinUI3Project(folder);\n  expect(() => {\n    autolink.validateRequiredProjectProperties();\n  }).toThrow();\n  autolink.fixUpForProjOption();\n\n  const projectConfig = autolink.getWindowsProjectConfig().project;\n  expect(projectConfig).not.toBeUndefined();\n  expect(projectConfig.projectName).toEqual('WithWinUI3');\n  autolink.validateRequiredProjectProperties();\n  done();\n});\n\ntest('empty cpp autolink dependencies', () => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n    {},\n    {\n      check: true,\n      logging: false,\n      proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n    },\n  );\n  const replacements = autolink.getCppReplacements();\n  expect(replacements.cppIncludes).toEqual('');\n  expect(replacements.cppPackageProviders).toEqual(\n    '\\n    UNREFERENCED_PARAMETER(packageProviders);',\n  );\n});\n\ntest('one invalid cpp autolink dependency', () => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n    {\n      superModule: {\n        name: 'superModule',\n        root: 'theRoot',\n        platforms: {\n          windows: {},\n        },\n        assets: [],\n        hooks: {},\n        params: [],\n      },\n    },\n    {\n      check: true,\n      logging: false,\n      proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n    },\n  );\n  const replacements = autolink.getCppReplacements();\n  expect(replacements.cppIncludes).toEqual('');\n  expect(replacements.cppPackageProviders).toEqual(\n    '\\n    UNREFERENCED_PARAMETER(packageProviders);',\n  );\n});\n\ntest('one invalid cs autolink dependency', () => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n    {\n      superModule: {\n        name: 'superModule',\n        root: 'theRoot',\n        platforms: {\n          windows: {},\n        },\n        assets: [],\n        hooks: {},\n        params: [],\n      },\n    },\n    {\n      check: true,\n      logging: false,\n      proj: 'projects/SimpleCSharpApp/windows/SimpleCSharpApp/SimpleCSharpApp.csproj',\n    },\n  );\n  const replacements = autolink.getCsReplacements();\n  expect(replacements.csUsingNamespaces).toEqual('');\n  expect(replacements.csReactPackageProviders).toEqual('');\n});\n\ntest('one valid cpp autolink dependency', () => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n    {\n      superModule: {\n        name: 'superModule',\n        root: 'theRoot',\n        platforms: {\n          windows: {\n            sourceDir: __dirname,\n            projects: [\n              {\n                directDependency: true,\n                projectFile: 'superModule.vcxproj',\n                cppHeaders: ['Garfield.h', 'Snoopy.h'],\n                cppPackageProviders: ['FamousAnimalCartoons'],\n              },\n            ],\n          },\n        },\n        assets: [],\n        hooks: {},\n        params: [],\n      },\n    },\n    {\n      check: true,\n      logging: false,\n      proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n    },\n  );\n  const replacements = autolink.getCppReplacements();\n  expect(replacements.cppIncludes).toMatch(/#include <Garfield.h>/);\n  expect(replacements.cppIncludes).toMatch(/#include <Snoopy.h>/);\n  expect(replacements.cppPackageProviders).toContain(\n    'packageProviders.Append(winrt::FamousAnimalCartoons())',\n  );\n});\n\ntest('one valid cs autolink dependency', () => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n    {\n      superModule: {\n        name: 'superModule',\n        root: 'theRoot',\n        platforms: {\n          windows: {\n            sourceDir: __dirname,\n            projects: [\n              {\n                directDependency: true,\n                csNamespaces: ['Garfield'],\n                projectFile: 'superModule.vcxproj',\n                cppHeaders: ['Garfield.h', 'Snoopy.h'],\n                csPackageProviders: ['FamousAnimalCartoons'],\n              },\n            ],\n          },\n        },\n        assets: [],\n        hooks: {},\n        params: [],\n      },\n    },\n    {\n      check: true,\n      logging: false,\n      proj: 'projects/SimpleCSharpApp/windows/SimpleCSharpApp/SimpleCSharpApp.csproj',\n    },\n  );\n  const replacements = autolink.getCsReplacements();\n  expect(replacements.csUsingNamespaces).toContain('using Garfield;');\n  expect(replacements.csReactPackageProviders).toContain(\n    'packageProviders.Add(new FamousAnimalCartoons())',\n  );\n});\n\ntest('ensureXAMLDialect - useWinUI3=true in react-native.config.js, useWinUI3=false in ExperimentalFeatures.props', async done => {\n  const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n\n  // Create project with UseWinUI3 == false in ExperimentalFeatures.props\n  await ensureCppAppProject(folder, 'WithWinUI3', false, false, false);\n\n  const rnc = require(path.join(folder, 'react-native.config.js'));\n\n  const config = projectConfigWindows(folder, rnc.project.windows)!;\n  // Set useWinUI3=true in react-native.config.js\n  config.useWinUI3 = true;\n\n  const al = new AutolinkTest(\n    {windows: config},\n    {},\n    {\n      check: false,\n      logging: false,\n    },\n  );\n  al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>`;\n  al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/></packages>`;\n\n  const exd = await al.ensureXAMLDialect();\n  expect(exd).toBeTruthy();\n\n  const expectedExperimentalFeatures =\n    '<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>';\n  expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n  // example packages.config:\n  // <packages>\n  //   <package id=\"SuperPkg\" version=\"42\"/>\n  //   <package id=\"Microsoft.WindowsAppSDK\" version=\"1.0.0\" targetFramework=\"native\"/>\n  // </packages>\n  //\n  expect(al.packagesConfig).toContain('Microsoft.WindowsAppSDK');\n  expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n  expect(al.packagesConfig).not.toContain('Microsoft.UI.Xaml');\n\n  done();\n});\n\ntest('ensureXAMLDialect - useWinUI3=false in react-native.config.js, useWinUI3=true in ExperimentalFeatures.props', async done => {\n  const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n  const rnc = require(path.join(folder, 'react-native.config.js'));\n\n  const config = projectConfigWindows(folder, rnc.project.windows)!;\n  config.useWinUI3 = false;\n  const al = new AutolinkTest(\n    {windows: config},\n    {},\n    {\n      check: false,\n      logging: false,\n    },\n  );\n  al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>`;\n  al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/></packages>`;\n\n  const exd = await al.ensureXAMLDialect();\n  expect(exd).toBeTruthy();\n\n  const expectedExperimentalFeatures =\n    '<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>';\n  expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n  // example packages.config:\n  // <packages>\n  //   <package id=\"SuperPkg\" version=\"42\"/>\n  //   <package id=\"Microsoft.WindowsAppSDK\" version=\"1.0.0\" targetFramework=\"native\"/>\n  // </packages>\n  //\n  expect(al.packagesConfig).not.toContain('Microsoft.WindowsAppSDK');\n  expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n  expect(al.packagesConfig).toContain('Microsoft.UI.Xaml');\n\n  done();\n});\n\ntest('ensureXAMLDialect - useWinUI3 not in react-native.config.js, useWinUI3=true in ExperimentalFeatures.props', async done => {\n  const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n  const rnc = require(path.join(folder, 'react-native.config.js'));\n\n  const config = projectConfigWindows(folder, rnc.project.windows)!;\n  delete config.useWinUI3;\n  const al = new AutolinkTest(\n    {windows: config},\n    {},\n    {\n      check: false,\n      logging: false,\n    },\n  );\n  al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>`;\n  al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/></packages>`;\n\n  const exd = await al.ensureXAMLDialect();\n  expect(exd).toBeTruthy();\n\n  const expectedExperimentalFeatures =\n    '<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>';\n  expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n  // example packages.config:\n  // <packages>\n  //   <package id=\"SuperPkg\" version=\"42\"/>\n  //   <package id=\"Microsoft.WindowsAppSDK\" version=\"1.0.0\" targetFramework=\"native\"/>\n  // </packages>\n  //\n  expect(al.packagesConfig).toContain('Microsoft.WindowsAppSDK');\n  expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n  expect(al.packagesConfig).not.toContain('Microsoft.UI.Xaml');\n\n  done();\n});\n\ntest('ensureXAMLDialect - useWinUI3 not in react-native.config.js, useWinUI3=false in ExperimentalFeatures.props', async done => {\n  const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n  const rnc = require(path.join(folder, 'react-native.config.js'));\n\n  const config = projectConfigWindows(folder, rnc.project.windows)!;\n  delete config.useWinUI3;\n  const al = new AutolinkTest(\n    {windows: config},\n    {},\n    {\n      check: false,\n      logging: false,\n    },\n  );\n  al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>`;\n  al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/><package id=\"Microsoft.WindowsAppSDK\"/></packages>`;\n\n  const exd = await al.ensureXAMLDialect();\n  expect(exd).toBeTruthy();\n\n  const expectedExperimentalFeatures = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>`;\n  expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n  // example packages.config:\n  // <packages>\n  //   <package id=\"SuperPkg\" version=\"42\"/>\n  //   <package id=\"Microsoft.WindowsAppSDK\" version=\"1.0.0\" targetFramework=\"native\"/>\n  // </packages>\n  //\n  expect(al.packagesConfig).not.toContain('Microsoft.WindowsAppSDK');\n  expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n  expect(al.packagesConfig).toContain('Microsoft.UI.Xaml');\n\n  done();\n});\n\ntest('Indirect autolink dependency', () => {\n  const autolink = new AutolinkTest(\n    {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n    {\n      superModule: {\n        name: 'superModule',\n        root: 'theRoot',\n        platforms: {\n          windows: {\n            sourceDir: __dirname,\n            projects: [\n              {\n                directDependency: true,\n                projectFile: 'superModule.vcxproj',\n                cppHeaders: ['Garfield.h', 'Snoopy.h'],\n                cppPackageProviders: ['FamousAnimalCartoons'],\n              },\n              {\n                directDependency: false,\n                projectFile: 'indirect.vcxproj',\n              },\n            ],\n          },\n        },\n        assets: [],\n        hooks: {},\n        params: [],\n      },\n    },\n    {\n      check: true,\n      logging: false,\n      proj: 'projects/WithIndirectDependency/windows/WithIndirectDependency/WithIndirectDependency.vcxproj',\n    },\n  );\n  const replacements = autolink.getCppReplacements();\n  expect(replacements.cppIncludes).toMatch(/#include <Garfield.h>/);\n  expect(replacements.cppIncludes).toMatch(/#include <Snoopy.h>/);\n  expect(replacements.cppPackageProviders).toContain(\n    'packageProviders.Append(winrt::FamousAnimalCartoons())',\n  );\n});\n\nfunction validateOptionName(\n  name: string,\n  optionName: keyof AutoLinkOptions,\n): boolean {\n  // Do not add a default case here. Every item must explicitly return true\n  switch (optionName) {\n    case 'check':\n    case 'logging':\n    case 'sln':\n    case 'proj':\n    case 'telemetry':\n      return true;\n  }\n  throw new Error(\n    `Unable to find ${optionName} to match '${name}' in AutoLinkOptions.`,\n  );\n}\n\ntest('autolinkOptions - validate options', () => {\n  for (const commandOption of autolinkOptions) {\n    // Validate names\n    expect(commandOption.name).not.toBeNull();\n    expect(commandOption.name.startsWith('--')).toBe(true);\n    expect(commandOption.name).toBe(commandOption.name.trim());\n    // Validate defaults\n    if (\n      !commandOption.name.endsWith(' [string]') &&\n      !commandOption.name.endsWith(' [number]')\n    ) {\n      // Commander ignores defaults for flags, so leave undefined to prevent confusion\n      expect(commandOption.default).toBeUndefined();\n    }\n    // Validate description\n    expect(commandOption.description).not.toBeNull();\n    expect(commandOption.description!).toBe(commandOption.description!.trim());\n\n    // Validate all command options are present in AutoLinkOptions\n    const optionName = commanderNameToOptionName(commandOption.name);\n    expect(\n      validateOptionName(\n        commandOption.name,\n        optionName as keyof AutoLinkOptions,\n      ),\n    ).toBe(true);\n  }\n});\n"]}