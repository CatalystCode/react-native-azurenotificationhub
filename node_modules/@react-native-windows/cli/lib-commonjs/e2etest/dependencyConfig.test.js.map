{"version":3,"file":"dependencyConfig.test.js","sourceRoot":"","sources":["../../src/e2etest/dependencyConfig.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport path from 'path';\n\nimport {\n  dependencyConfigWindows,\n  WindowsDependencyConfig,\n} from '../config/dependencyConfig';\n\nimport {\n  ensureCppAppProject,\n  ensureCSharpAppProject,\n  tryMkdir,\n  templateRoot,\n  testProjectGuid,\n} from './projectConfig.utils';\n\nimport {copyAndReplace} from '../generator-common';\n\ntype TargetProject = [string, ((folder: string) => Promise<void>)?];\n\nfunction project(\n  name: string,\n  setup?: (folder: string) => Promise<void>,\n): TargetProject {\n  return [name, setup];\n}\n\nconst projects: TargetProject[] = [\n  // Nothing but a react-native.config.js, with nulls\n  project('BlankLib'),\n  // Nothing but a windows folder\n  project('MissingProjectFilesLib', async (folder: string) => {\n    const windowsDir = path.join(folder, 'windows');\n    await tryMkdir(windowsDir);\n  }),\n  // New C++ app project based on the template\n  project('SimpleCppApp', async (folder: string) => {\n    await ensureCppAppProject(folder, 'SimpleCppApp');\n  }),\n  // New C++ project based on the template\n  project('SimpleCppLib', async (folder: string) => {\n    const windowsDir = path.join(folder, 'windows');\n    await tryMkdir(windowsDir);\n\n    const replacements = {\n      name: 'SimpleCppLib',\n      namespace: 'SimpleCppLib',\n      useMustache: true,\n      projectGuidUpper: testProjectGuid,\n      projectGuidLower: testProjectGuid.toLowerCase(),\n    };\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cpp-lib/proj/MyLib.sln'),\n      path.join(windowsDir, 'SimpleCppLib.sln'),\n      replacements,\n      null,\n    );\n\n    const projDir = path.join(windowsDir, 'SimpleCppLib');\n    await tryMkdir(projDir);\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cpp-lib/proj/MyLib.vcxproj'),\n      path.join(projDir, 'SimpleCppLib.vcxproj'),\n      replacements,\n      null,\n    );\n  }),\n  // New C# app project based on the template\n  project('SimpleCSharpApp', async (folder: string) => {\n    await ensureCSharpAppProject(folder, 'SimpleCSharpApp');\n  }),\n  // New C# project based on the template\n  project('SimpleCSharpLib', async (folder: string) => {\n    const windowsDir = path.join(folder, 'windows');\n    await tryMkdir(windowsDir);\n\n    const replacements = {\n      name: 'SimpleCSharpLib',\n      namespace: 'SimpleCSharpLib',\n      useMustache: true,\n      projectGuidUpper: testProjectGuid,\n      projectGuidLower: testProjectGuid.toLowerCase(),\n    };\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cs-lib/proj/MyLib.sln'),\n      path.join(windowsDir, 'SimpleCSharpLib.sln'),\n      replacements,\n      null,\n    );\n\n    const projDir = path.join(windowsDir, 'SimpleCSharpLib');\n    await tryMkdir(projDir);\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cs-lib/proj/MyLib.csproj'),\n      path.join(projDir, 'SimpleCSharpLib.csproj'),\n      replacements,\n      null,\n    );\n  }),\n  project('WithIndirectDependency'),\n];\n\n// Tests that given userConfig is null, the result will always be null\ntest.each(projects)(\n  'dependencyConfig - %s (userConfig is null)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig = null;\n\n    expect(dependencyConfigWindows(folder, userConfig)).toBeNull();\n  },\n);\n\n// Tests the result given a windows project config in react-native.config.js\ntest.each(projects)(\n  'dependencyConfig - %s (Use react-native.config.js)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n    const rnc = require(path.join(folder, 'react-native.config.js'));\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig: Partial<WindowsDependencyConfig> =\n      rnc.dependency.platforms.windows;\n\n    if (name === 'BlankLib') {\n      expect(dependencyConfigWindows(folder, userConfig)).toMatchSnapshot();\n    } else if (name.endsWith('App')) {\n      expect(dependencyConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n        projects: expect.arrayContaining([\n          expect.objectContaining({\n            projectFile: expect.stringMatching(\n              /Error: .*\\.(?:cs|vcx)proj is type '\\w+'/,\n            ),\n          }),\n        ]),\n      });\n    } else {\n      expect(dependencyConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n      });\n    }\n  },\n);\n\n// Tests the result of ignoring the windows project config in react-native.config.js\ntest.each(projects)(\n  'dependencyConfig - %s (Ignore react-native.config.js)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig: Partial<WindowsDependencyConfig> = {};\n\n    if (name === 'BlankLib') {\n      expect(dependencyConfigWindows(folder, userConfig)).toMatchSnapshot();\n    } else if (name.endsWith('App')) {\n      expect(dependencyConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n        projects: expect.arrayContaining([\n          expect.objectContaining({\n            projectFile: expect.stringMatching(\n              /Error: .*\\.(?:cs|vcx)proj is type '\\w+'/,\n            ),\n          }),\n        ]),\n      });\n    } else {\n      expect(dependencyConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n      });\n    }\n  },\n);\n"]}