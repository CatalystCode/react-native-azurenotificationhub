{"version":3,"file":"runWindows.test.js","sourceRoot":"","sources":["../../src/e2etest/runWindows.test.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAEH,+DAA0E;AAE1E,uEAGyC;AAEzC,sCAAsC;AACtC,SAAS,kBAAkB,CACzB,IAAY,EACZ,UAAmC;IAEnC,yEAAyE;IACzE,QAAQ,UAAU,EAAE;QAClB,KAAK,SAAS,CAAC;QACf,KAAK,MAAM,CAAC;QACZ,KAAK,MAAM,CAAC;QACZ,KAAK,YAAY,CAAC;QAClB,KAAK,UAAU,CAAC;QAChB,KAAK,QAAQ,CAAC;QACd,KAAK,QAAQ,CAAC;QACd,KAAK,iBAAiB,CAAC;QACvB,KAAK,SAAS,CAAC;QACf,KAAK,UAAU,CAAC;QAChB,KAAK,QAAQ,CAAC;QACd,KAAK,QAAQ,CAAC;QACd,KAAK,UAAU,CAAC;QAChB,KAAK,OAAO,CAAC;QACb,KAAK,QAAQ,CAAC;QACd,KAAK,kBAAkB,CAAC;QACxB,KAAK,KAAK,CAAC;QACX,KAAK,MAAM,CAAC;QACZ,KAAK,cAAc,CAAC;QACpB,KAAK,mBAAmB,CAAC;QACzB,KAAK,MAAM,CAAC;QACZ,KAAK,iBAAiB,CAAC;QACvB,KAAK,WAAW;YACd,OAAO,IAAI,CAAC;KACf;IACD,MAAM,IAAI,KAAK,CACb,kBAAkB,UAAU,cAAc,IAAI,yBAAyB,CACxE,CAAC;AACJ,CAAC;AAED,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;IAChD,KAAK,MAAM,aAAa,IAAI,qCAAiB,EAAE;QAC7C,iBAAiB;QACjB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3D,oBAAoB;QACpB,IACE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;YACzC,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EACzC;YACA,gFAAgF;YAChF,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;SAC/C;QAED,uBAAuB;QACvB,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACjD,MAAM,CAAC,aAAa,CAAC,WAAY,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,WAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3E,gEAAgE;QAChE,MAAM,UAAU,GAAG,IAAA,qCAAyB,EAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,CACJ,kBAAkB,CAChB,aAAa,CAAC,IAAI,EAClB,UAAqC,CACtC,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACd;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {commanderNameToOptionName} from '@react-native-windows/telemetry';\n\nimport {\n  runWindowsOptions,\n  RunWindowsOptions,\n} from '../runWindows/runWindowsOptions';\n\n// eslint-disable-next-line complexity\nfunction validateOptionName(\n  name: string,\n  optionName: keyof RunWindowsOptions,\n): boolean {\n  // Do not add a default case here. Every item must explicitly return true\n  switch (optionName) {\n    case 'release':\n    case 'root':\n    case 'arch':\n    case 'singleproc':\n    case 'emulator':\n    case 'device':\n    case 'target':\n    case 'remoteDebugging':\n    case 'logging':\n    case 'packager':\n    case 'bundle':\n    case 'launch':\n    case 'autolink':\n    case 'build':\n    case 'deploy':\n    case 'deployFromLayout':\n    case 'sln':\n    case 'proj':\n    case 'msbuildprops':\n    case 'buildLogDirectory':\n    case 'info':\n    case 'directDebugging':\n    case 'telemetry':\n      return true;\n  }\n  throw new Error(\n    `Unable to find ${optionName} to match '${name}' in RunWindowsOptions.`,\n  );\n}\n\ntest('runWindowsOptions - validate options', () => {\n  for (const commandOption of runWindowsOptions) {\n    // Validate names\n    expect(commandOption.name).not.toBeNull();\n    expect(commandOption.name.startsWith('--')).toBe(true);\n    expect(commandOption.name).toBe(commandOption.name.trim());\n\n    // Validate defaults\n    if (\n      !commandOption.name.endsWith(' [string]') &&\n      !commandOption.name.endsWith(' [number]')\n    ) {\n      // Commander ignores defaults for flags, so leave undefined to prevent confusion\n      expect(commandOption.default).toBeUndefined();\n    }\n\n    // Validate description\n    expect(commandOption.description).not.toBeNull();\n    expect(commandOption.description!).toBe(commandOption.description!.trim());\n\n    // Validate all command options are present in RunWindowsOptions\n    const optionName = commanderNameToOptionName(commandOption.name);\n    expect(\n      validateOptionName(\n        commandOption.name,\n        optionName as keyof RunWindowsOptions,\n      ),\n    ).toBe(true);\n  }\n});\n"]}