{"version":3,"file":"projectConfig.test.js","sourceRoot":"","sources":["../../src/e2etest/projectConfig.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport fs from '@react-native-windows/fs';\nimport path from 'path';\n\nimport {\n  projectConfigWindows,\n  WindowsProjectConfig,\n} from '../config/projectConfig';\n\nimport {AutolinkWindows} from '../runWindows/utils/autolink';\nimport {\n  ensureCppAppProject,\n  ensureCSharpAppProject,\n  ensureWinUI3Project,\n  ensureHermesProject,\n  ensureExperimentalNuGetProject,\n  tryMkdir,\n} from './projectConfig.utils';\n\ntype TargetProject = [string, ((folder: string) => Promise<void>)?];\n\nfunction project(\n  name: string,\n  setup?: (folder: string) => Promise<void>,\n): TargetProject {\n  return [name, setup];\n}\n\nconst projects: TargetProject[] = [\n  // Nothing but a react-native.config.js, with nulls\n  project('BlankApp'),\n  // Nothing but a windows folder\n  project('MissingProjectFilesApp', async (folder: string) => {\n    const windowsDir = path.join(folder, 'windows');\n    await tryMkdir(windowsDir);\n  }),\n  // New C++ project based on the template\n  project('SimpleCppApp', async (folder: string) => {\n    await ensureCppAppProject(folder, 'SimpleCppApp');\n  }),\n  // New C# project based on the template\n  project('SimpleCSharpApp', async (folder: string) => {\n    await ensureCSharpAppProject(folder, 'SimpleCSharpApp');\n  }),\n  project('WithWinUI3', async (folder: string) => {\n    await ensureWinUI3Project(folder);\n  }),\n  project('WithHermes', async (folder: string) => {\n    await ensureHermesProject(folder);\n  }),\n  project('WithExperimentalNuget', async (folder: string) => {\n    await ensureExperimentalNuGetProject(folder);\n  }),\n  project('WithIndirectDependency'),\n];\n\n// Tests that given userConfig is null, the result will always be null\ntest.each(projects)(\n  'projectConfig - %s (userConfig is null)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig = null;\n\n    expect(projectConfigWindows(folder, userConfig)).toBeNull();\n  },\n);\n\n// Tests the result given a windows project config in react-native.config.js\ntest.each(projects)(\n  'projectConfig - %s (Use react-native.config.js)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n    const rnc = require(path.join(folder, 'react-native.config.js'));\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig: Partial<WindowsProjectConfig> = rnc.project.windows;\n\n    if (name === 'BlankApp') {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot();\n    } else {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n      });\n    }\n  },\n);\n\n// Tests the result of ignoring the windows project config in react-native.config.js\ntest.each(projects)(\n  'projectConfig - %s (Ignore react-native.config.js)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig: Partial<WindowsProjectConfig> = {};\n\n    if (name === 'BlankApp') {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot();\n    } else {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n      });\n    }\n  },\n);\n\ntest('useWinUI3=true in react-native.config.js, UseWinUI3=false in ExperimentalFeatures.props', async () => {\n  const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n\n  // Create project with UseWinUI3 == false in ExperimentalFeatures.props\n  await ensureCppAppProject(folder, 'WithWinUI3', false, false, false);\n\n  const rnc = require(path.join(folder, 'react-native.config.js'));\n\n  const config = projectConfigWindows(folder, rnc.project.windows)!;\n  // Set useWinUI3=true in react-native.config.js\n  config.useWinUI3 = true;\n\n  const experimentalFeaturesPropsFile = path.join(\n    folder,\n    'windows/ExperimentalFeatures.props',\n  );\n\n  // Verify starting props file\n  const startingExperimentalFeatures = (\n    await fs.readFile(experimentalFeaturesPropsFile)\n  ).toString();\n  expect(startingExperimentalFeatures.replace(/\\r/g, '')).toMatchSnapshot();\n\n  // Run Autolink to sync the files\n  const al = new AutolinkWindows(\n    {windows: config},\n    {},\n    {\n      check: false,\n      logging: false,\n    },\n  );\n\n  const exd = await al.ensureXAMLDialect();\n  expect(exd).toBeTruthy();\n\n  // Verify ending props file\n  const finalExperimentalFeatures = (\n    await fs.readFile(experimentalFeaturesPropsFile)\n  ).toString();\n\n  expect(finalExperimentalFeatures.replace(/\\r/g, '')).toMatchSnapshot();\n});\n"]}