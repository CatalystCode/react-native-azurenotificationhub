{"version":3,"file":"runWindows.js","sourceRoot":"","sources":["../../src/runWindows/runWindows.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport fs from '@react-native-windows/fs';\nimport path from 'path';\nimport {Telemetry, CodedError} from '@react-native-windows/telemetry';\n\nimport * as build from './utils/build';\nimport chalk from 'chalk';\nimport * as deploy from './utils/deploy';\nimport {\n  newError,\n  newInfo,\n  newWarn,\n  setExitProcessWithError,\n} from './utils/commandWithProgress';\nimport {\n  getDefaultOptions,\n  startTelemetrySession,\n  endTelemetrySession,\n} from './utils/telemetryHelpers';\nimport * as info from './utils/info';\nimport MSBuildTools from './utils/msbuildtools';\n\nimport {Command, Config} from '@react-native-community/cli-types';\nimport {runWindowsOptions, RunWindowsOptions} from './runWindowsOptions';\n\nimport {autolinkWindowsInternal, AutoLinkOptions} from './utils/autolink';\n\n/**\n * Sanitizes the given option for telemetery.\n * @param key The key of the option.\n * @param value The unsanitized value of the option.\n * @returns The sanitized value of the option.\n */\n// eslint-disable-next-line complexity\nfunction optionSanitizer(key: keyof RunWindowsOptions, value: any): any {\n  // Do not add a default case here.\n  // Strings risking PII should just return true if present, false otherwise.\n  // All others should return the value (or false if undefined).\n  switch (key) {\n    case 'root':\n    case 'target':\n    case 'sln':\n    case 'proj':\n    case 'buildLogDirectory':\n      return value === undefined ? false : true; // Strip PII\n    case 'msbuildprops':\n      return value === undefined ? 0 : value.split(',').length; // Convert to count\n    case 'release':\n    case 'arch':\n    case 'singleproc':\n    case 'emulator':\n    case 'device':\n    case 'remoteDebugging':\n    case 'logging':\n    case 'packager':\n    case 'bundle':\n    case 'launch':\n    case 'autolink':\n    case 'build':\n    case 'deploy':\n    case 'deployFromLayout':\n    case 'info':\n    case 'directDebugging':\n    case 'telemetry':\n      return value === undefined ? false : value; // Return value\n  }\n}\n\n/**\n * Get the extra props to add to the `run-windows` telemetry event.\n * @returns The extra props.\n */\nasync function getExtraProps(): Promise<Record<string, any>> {\n  const extraProps: Record<string, any> = {\n    phase: runWindowsPhase,\n    hasRunRnwDependencies,\n    msBuildProps: evaluateMSBuildPropsCallback\n      ? evaluateMSBuildPropsCallback()\n      : {},\n  };\n  return extraProps;\n}\n\n/**\n * Labels used by telemetry to represent current operation\n */\ntype RunWindowsPhase =\n  | 'None'\n  | 'Info'\n  | 'FindSolution'\n  | 'FindBuildTools'\n  | 'Autolink'\n  | 'RestorePackagesConfig'\n  | 'Build'\n  | 'Deploy';\n\nlet runWindowsPhase: RunWindowsPhase = 'None';\n\nlet hasRunRnwDependencies: boolean = false;\n\nlet evaluateMSBuildPropsCallback:\n  | (() => Record<string, string> | null)\n  | undefined;\n\n/**\n * The function run when calling `react-native run-windows`.\n * @param args Unprocessed args passed from react-native CLI.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n */\nasync function runWindows(\n  args: string[],\n  config: Config,\n  options: RunWindowsOptions,\n) {\n  await startTelemetrySession(\n    'run-windows',\n    config,\n    options,\n    getDefaultOptions(config, runWindowsOptions),\n    optionSanitizer,\n  );\n\n  // https://github.com/yarnpkg/yarn/issues/8334 - Yarn on Windows breaks apps that read from the environment variables\n  // Yarn will run node via CreateProcess and pass npm_config_* variables in lowercase without unifying their value\n  // with their possibly existing uppercase counterparts. This breaks programs that read from the environment block\n  // and write to a case-insensitive dictionary since they expect to encounter each variable only once.\n  // The values of the lowercase variables are the one npm actually wants to use, plus they are seeded from the\n  // uppercase variable values one if there are no overrides.\n  delete process.env.NPM_CONFIG_CACHE;\n  delete process.env.NPM_CONFIG_PREFIX;\n\n  if (process.env.LocalAppData) {\n    hasRunRnwDependencies = fs.existsSync(\n      path.join(process.env.LocalAppData, 'rnw-dependencies.txt'),\n    ); // CODESYNC \\vnext\\scripts\\rnw-dependencies.ps1\n  }\n\n  let runWindowsError: Error | undefined;\n  if (options.info) {\n    runWindowsPhase = 'Info';\n    try {\n      const output = await info.getEnvironmentInfo();\n      console.log(output.trimEnd());\n      console.log('  Installed UWP SDKs:');\n      const sdks = MSBuildTools.getAllAvailableUAPVersions();\n      sdks.forEach(version => console.log('    ' + version));\n    } catch (ex) {\n      runWindowsError =\n        ex instanceof Error ? (ex as Error) : new Error(String(ex));\n      Telemetry.trackException(runWindowsError);\n\n      newError(\n        'Unable to print environment info.\\n' + runWindowsError.toString(),\n      );\n    }\n    await endTelemetrySession(runWindowsError, getExtraProps);\n    setExitProcessWithError(options.logging, runWindowsError);\n    return;\n  }\n\n  try {\n    await runWindowsInternal(args, config, options);\n  } catch (ex) {\n    runWindowsError =\n      ex instanceof Error ? (ex as Error) : new Error(String(ex));\n    Telemetry.trackException(runWindowsError);\n\n    if (!hasRunRnwDependencies) {\n      const rnwPkgJsonPath = require.resolve(\n        'react-native-windows/package.json',\n        {\n          paths: [process.cwd(), __dirname],\n        },\n      );\n      const rnwDependenciesPath = path.join(\n        path.dirname(rnwPkgJsonPath),\n        'scripts/rnw-dependencies.ps1',\n      );\n\n      newError(\n        `It is possible your installation is missing required software dependencies. Dependencies can be automatically installed by running ${rnwDependenciesPath} from an elevated PowerShell prompt.\\nFor more information, go to http://aka.ms/rnw-deps`,\n      );\n    }\n  }\n  await endTelemetrySession(runWindowsError, getExtraProps);\n  setExitProcessWithError(options.logging, runWindowsError);\n}\n\n/**\n * Performs build deploy and launch of RNW apps.\n * @param args Unprocessed args passed from react-native CLI.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n */\nasync function runWindowsInternal(\n  args: string[],\n  config: Config,\n  options: RunWindowsOptions,\n) {\n  const verbose = options.logging === true;\n\n  if (verbose) {\n    newInfo('Verbose: ON');\n  }\n\n  // Get the solution file\n  let slnFile: string | null;\n  runWindowsPhase = 'FindSolution';\n  try {\n    slnFile = build.getAppSolutionFile(options, config);\n  } catch (e) {\n    newError(`Couldn't get app solution information. ${(e as Error).message}`);\n    throw e;\n  }\n\n  let buildTools: MSBuildTools;\n  runWindowsPhase = 'FindBuildTools';\n  try {\n    buildTools = MSBuildTools.findAvailableVersion(options.arch, verbose);\n  } catch (error) {\n    newWarn('No public VS release found');\n    // Try prerelease\n    try {\n      newInfo('Trying pre-release VS');\n      buildTools = MSBuildTools.findAvailableVersion(\n        options.arch,\n        verbose,\n        true, // preRelease\n      );\n    } catch (e) {\n      newError((e as Error).message);\n      throw error;\n    }\n  }\n\n  // Set up the callback to capture MSBuild properties after the command completes\n  evaluateMSBuildPropsCallback = () => {\n    const projectFile = build.getAppProjectFile(options, config);\n    if (projectFile) {\n      if (verbose) {\n        newInfo('Gathering MSBuild data for telemetry.');\n      }\n\n      const msBuildPropertiesJsonPath = path.resolve(\n        path.dirname(projectFile),\n        'Generated Files',\n        'msbuildproperties.g.json',\n      );\n\n      if (fs.existsSync(msBuildPropertiesJsonPath)) {\n        if (verbose) {\n          newInfo('Loading properties from msbuildproperties.g.json');\n        }\n        return fs.readJsonFileSync(msBuildPropertiesJsonPath);\n      }\n\n      if (verbose) {\n        newInfo('Unable to find msbuildproperties.g.json');\n      }\n    }\n\n    return {};\n  };\n\n  // Restore packages.config files for dependencies that don't support PackageReference.\n  runWindowsPhase = 'RestorePackagesConfig';\n  const buildType = deploy.getBuildConfiguration(options);\n  try {\n    await buildTools.restorePackageConfigs(slnFile, options.arch, buildType);\n  } catch (e) {\n    newError(\n      `Couldn't restore found packages.config instances. ${\n        (e as Error).message\n      }`,\n    );\n    throw e;\n  }\n\n  if (options.autolink) {\n    runWindowsPhase = 'Autolink';\n    try {\n      const autolinkArgs: string[] = [];\n      const autolinkConfig = config;\n      const autoLinkOptions: AutoLinkOptions = {\n        logging: options.logging,\n        check: false,\n        proj: options.proj,\n        sln: options.sln,\n        telemetry: options.telemetry,\n      };\n      await autolinkWindowsInternal(\n        autolinkArgs,\n        autolinkConfig,\n        autoLinkOptions,\n      );\n    } catch (e) {\n      newError(`Autolinking failed. ${(e as Error).message}`);\n      throw e;\n    }\n  } else {\n    newInfo('Autolink step is skipped');\n  }\n\n  if (options.build) {\n    runWindowsPhase = 'Build';\n    if (!slnFile) {\n      newError(\n        'Visual Studio Solution file not found. Maybe run \"npx react-native-windows-init\" first?',\n      );\n      throw new CodedError('NoSolution', 'Cannot find solution file');\n    }\n\n    // Get build/deploy options\n    const msBuildProps = build.parseMsBuildProps(options);\n\n    // Disable the autolink check since we just ran it\n    msBuildProps.RunAutolinkCheck = 'false';\n\n    try {\n      await build.buildSolution(\n        buildTools,\n        slnFile!,\n        buildType,\n        options.arch,\n        msBuildProps,\n        verbose,\n        'build',\n        options.buildLogDirectory,\n        options.singleproc,\n      );\n    } catch (e) {\n      newError(\n        `Build failed with message ${\n          (e as Error).message\n        }. Check your build configuration.`,\n      );\n      if ((e as any).logfile) {\n        console.log('See', chalk.bold((e as any).logfile));\n      }\n      throw e;\n    }\n  } else {\n    newInfo('Build step is skipped');\n  }\n\n  if (shouldLaunchPackager(options)) {\n    await deploy.startServerInNewWindow(options, verbose);\n  }\n\n  if (options.deploy) {\n    runWindowsPhase = 'Deploy';\n    if (!slnFile) {\n      newError(\n        'Visual Studio Solution file not found. Maybe run \"npx react-native-windows-init\" first?',\n      );\n      throw new CodedError('NoSolution', 'Cannot find solution file');\n    }\n\n    try {\n      if (options.device || options.emulator || options.target) {\n        await deploy.deployToDevice(options, verbose, config);\n      } else {\n        await deploy.deployToDesktop(options, verbose, config, buildTools);\n      }\n    } catch (e) {\n      newError(`Failed to deploy${e ? `: ${(e as Error).message}` : ''}`);\n      throw e;\n    }\n  } else {\n    newInfo('Deploy step is skipped');\n  }\n}\n\nfunction shouldLaunchPackager(options: RunWindowsOptions): boolean {\n  return (\n    options.packager === true &&\n    options.launch === true &&\n    options.release !== true\n  );\n}\n\n/*\n// Example of running the Windows Command\nrunWindows({\n  root: 'C:\\\\github\\\\hack\\\\myapp',\n  debug: true,\n  arch: 'x86',\n  nugetPath: 'C:\\\\github\\\\react\\\\react-native-windows\\\\local-cli\\\\runWindows\\\\.nuget\\\\nuget.exe'\n});\n*/\n\n/**\n * Starts the app on a connected Windows emulator or mobile device.\n */\nexport const runWindowsCommand: Command = {\n  name: 'run-windows',\n  description:\n    'builds your app and starts it on a connected Windows desktop, emulator or device',\n  func: runWindows,\n  options: runWindowsOptions,\n};\n"]}