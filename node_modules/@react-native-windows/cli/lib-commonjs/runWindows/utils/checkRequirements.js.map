{"version":3,"file":"checkRequirements.js","sourceRoot":"","sources":["../../../src/runWindows/utils/checkRequirements.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;;;;AAEH,+DAA2D;AAC3D,iDAAuC;AACvC,gDAAwB;AACxB,sDAA4B;AAC5B,wDAAgC;AAShC,MAAM,iBAAiB,GAAiD;IACtE,MAAM,EAAE;QACN,EAAE,EAAE,IAAI,iBAAO,CAAC,CAAC,EAAE,CAAC,CAAC;QACrB,OAAO,EAAE,IAAI,iBAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3B,YAAY,EAAE,IAAI,iBAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QAChC,UAAU,EAAE,IAAI,iBAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QAC9B,QAAQ,EAAE,IAAI,iBAAO,CAAC,EAAE,EAAE,CAAC,CAAC;KAC7B;CACF,CAAC;AAEF,SAAS,cAAc,CAAC,OAAgB;IACtC,OAAO,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAE,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAED,SAAS,4BAA4B,CACnC,WAAwB,EACxB,oBAAoD;IAEpD,OAAO,iBAAiB,CAAC,oBAAoB,CAAC,CAAC,WAAW,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,uBAAuB;IAC9B,MAAM,aAAa,GAAc,EAAE,CAAC;IAEpC,MAAM,UAAU,GACd,iGAAiG,CAAC;IACpG,IAAI,MAAc,CAAC;IACnB,IAAI;QACF,MAAM,GAAG,IAAA,wBAAQ,EAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;KAC1C;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,aAAa,CAAC;KACtB;IAED,MAAM,EAAE,GACN,gFAAgF,CAAC;IACnF,IAAI,KAA6B,CAAC;IAClC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;QAChC,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,iBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,cAAI,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,EAAE;YAC3D,MAAM,UAAU,GAAG,iBAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,UAAU,EAAE;gBACf,MAAM,IAAI,sBAAU,CAClB,qBAAqB,EACrB,sCAAsC,KAAK,CAAC,CAAC,CAAC,GAAG,CAClD,CAAC;aACH;YACD,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAChC;KACF;IAED,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,SAAS,WAAW,CAAC,oBAA4B;IAC/C,MAAM,aAAa,GAAG,uBAAuB,EAAE,CAAC;IAChD,MAAM,eAAe,GAAG,4BAA4B,CAClD,YAAY,EACZ,oBAAoB,CACrB,CAAC;IACF,MAAM,eAAe,GAAG,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CACxD,YAAY,CAAC,EAAE,CAAC,eAAe,CAAC,CACjC,CAAC;IAEF,IAAI,eAAe,EAAE;QACnB,OAAO,cAAc,CAAC,eAAe,CAAC,CAAC;KACxC;IAED,MAAM,gBAAgB,GAAG,cAAc,CAAC,eAAe,CAAC,CAAC;IACzD,MAAM,IAAI,sBAAU,CAClB,OAAO,EACP,iEAAiE,gBAAgB,oDAAoD,gBAAgB,8DAA8D,CACpN,CAAC;AACJ,CAAC;AAED,SAAgB,eAAe,CAAC,MAAc;IAC5C,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC;AAC7B,CAAC;AAFD,0CAEC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {CodedError} from '@react-native-windows/telemetry';\nimport {execSync} from 'child_process';\nimport path from 'path';\nimport shell from 'shelljs';\nimport Version from './version';\n\ntype Requirement =\n  | 'os'\n  | 'msbuild'\n  | 'visualstudio'\n  | 'windowssdk'\n  | 'phonesdk';\n\nconst REQUIRED_VERSIONS: Record<string, Record<Requirement, Version>> = {\n  '10.0': {\n    os: new Version(6, 3),\n    msbuild: new Version(14, 0),\n    visualstudio: new Version(14, 0),\n    windowssdk: new Version(10, 0),\n    phonesdk: new Version(10, 0),\n  },\n};\n\nfunction shortenVersion(version: Version): string {\n  return /^(\\d+(?:\\.\\d+)?)/.exec(version.toString())![1];\n}\n\nfunction getMinimalRequiredVersionFor(\n  requirement: Requirement,\n  windowsTargetVersion: keyof typeof REQUIRED_VERSIONS,\n): Version {\n  return REQUIRED_VERSIONS[windowsTargetVersion][requirement];\n}\n\nfunction getInstalledWindowsSdks(): Version[] {\n  const installedSdks: Version[] = [];\n\n  const execString =\n    'reg query \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\" /s /v InstallationFolder /reg:32';\n  let output: string;\n  try {\n    output = execSync(execString).toString();\n  } catch (e) {\n    return installedSdks;\n  }\n\n  const re =\n    /\\\\Microsoft SDKs\\\\Windows\\\\v(\\d+\\.\\d+)\\s*InstallationFolder\\s+REG_SZ\\s+(.*)/gim;\n  let match: RegExpExecArray | null;\n  while ((match = re.exec(output))) {\n    const sdkPath = match[2];\n    if (shell.test('-e', path.join(sdkPath, 'SDKManifest.xml'))) {\n      const sdkVersion = Version.tryParse(match[1]);\n      if (!sdkVersion) {\n        throw new CodedError(\n          'BadSDKVersionFormat',\n          `Unexpected SDK version format for '${match[1]}'`,\n        );\n      }\n      installedSdks.push(sdkVersion);\n    }\n  }\n\n  return installedSdks;\n}\n\nfunction checkWinSdk(windowsTargetVersion: string): string {\n  const installedSdks = getInstalledWindowsSdks();\n  const requiredVersion = getMinimalRequiredVersionFor(\n    'windowssdk',\n    windowsTargetVersion,\n  );\n  const hasSdkInstalled = installedSdks.some(installedSdk =>\n    installedSdk.eq(requiredVersion),\n  );\n\n  if (hasSdkInstalled) {\n    return shortenVersion(requiredVersion);\n  }\n\n  const shortenedVersion = shortenVersion(requiredVersion);\n  throw new CodedError(\n    'NoSDK',\n    `Windows SDK not found. Ensure that you have installed Windows ${shortenedVersion} SDK along with Visual Studio or install Windows ${shortenedVersion} SDK separately from https://dev.windows.com/en-us/downloads`,\n  );\n}\n\nexport function isWinSdkPresent(target: string): string {\n  return checkWinSdk(target);\n}\n"]}