{"version":3,"file":"vstools.js","sourceRoot":"","sources":["../../../src/runWindows/utils/vstools.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport fs from '@react-native-windows/fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport {Project} from '../../config/projectConfig';\nimport {CodedError} from '@react-native-windows/telemetry';\n\nconst projectTypeGuidsByLanguage = {\n  cpp: '{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}',\n  cs: '{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}',\n};\n\nexport const dotNetCoreProjectTypeGuid =\n  '{9A19103F-16F7-4668-BE54-9A1E7A4F7556}';\n\n/**\n * Checks is the given block of lines exists within an array of lines.\n * @param lines The array of lines to search.\n * @param block The block of lines to search for.\n * @return The starting index the block within lines, if it exists.\n */\nfunction linesContainsBlock(\n  lines: string[],\n  block: (string | RegExp)[],\n): number {\n  if (block.length > 0) {\n    const startIndex = lines.findIndex(s =>\n      block[0] instanceof RegExp ? s.match(block[0]) : s === block[0],\n    );\n\n    if (startIndex >= 0) {\n      for (let i = 1; i < block.length; i++) {\n        if (\n          block[i] instanceof RegExp\n            ? !lines[startIndex + i].match(block[i])\n            : lines[startIndex + i] !== block[i]\n        ) {\n          return -1;\n        }\n      }\n      return startIndex;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Insert the given block of lines into an array of lines.\n * @param lines The array of lines to insert into.\n * @param block The block of lines to insert.\n * @param index The index to perform the insert.\n */\nfunction insertBlockIntoLines(lines: string[], block: string[], index: number) {\n  for (let i = 0; i < block.length; i++) {\n    lines.splice(index + i, 0, block[i]);\n  }\n}\n\n/**\n * Overwrite the lines at the given index with the block.\n * @param lines The destionation array of lines to.\n * @param block The source block of lines.\n * @param index The index to perform the pverwrite.\n */\nfunction overwriteLinesWithBlock(\n  lines: string[],\n  block: string[],\n  index: number,\n) {\n  for (let i = 0; i < block.length; i++) {\n    lines[index + i] = block[i];\n  }\n}\n\n/**\n * Search through an array of lines for a block of lines starting with startLine and ending with endLine.\n * @param lines The array of lines to search.\n * @param startLine The first line of the block.\n * @param endLine The last line of the block.\n * @param includeStartEnd Include the start and end lines in the result.\n * @return The found block of lines, if found.\n */\nfunction getBlockContentsFromLines(\n  lines: string[],\n  startLine: string,\n  endLine: string,\n  includeStartEnd: boolean = true,\n): string[] {\n  const startIndex = lines.indexOf(startLine);\n  const endIndex = lines.indexOf(endLine, startIndex);\n\n  if (startIndex >= 0 && startIndex < endIndex) {\n    if (includeStartEnd) {\n      return lines.slice(startIndex, endIndex + 1);\n    } else if (startIndex + 1 < endIndex) {\n      return lines.slice(startIndex + 1, endIndex);\n    }\n  }\n\n  return [];\n}\n\n/**\n * Adds the necessary info from a VS project into a VS solution file so that it will build.\n * @param slnFile The Absolute path to the target VS solution file.\n * @param project The object representing the project info.\n * @param verbose If true, enable verbose logging.\n * @param checkMode It true, don't make any changes.\n * @return Whether any changes were necessary.\n */\nexport function addProjectToSolution(\n  slnFile: string,\n  project: Project,\n  verbose: boolean = false,\n  checkMode: boolean = false,\n): boolean {\n  if (project.projectLang === null) {\n    throw new CodedError(\n      'AddProjectToSolution',\n      'Unable to add project to solution, projectLang is null',\n    );\n  }\n\n  if (project.projectGuid === null) {\n    throw new CodedError(\n      'AddProjectToSolution',\n      'Unable to add project to solution, projectGuid is null',\n    );\n  }\n\n  if (verbose) {\n    console.log(\n      `Processing ${chalk.bold(path.basename(project.projectFile))}...`,\n    );\n  }\n\n  const originalSlnContents = fs.readFileSync(slnFile).toString();\n\n  const isCRLF = originalSlnContents.includes('\\r\\n');\n\n  const slnLines = originalSlnContents.split(isCRLF ? '\\r\\n' : '\\n');\n\n  let contentsChanged = false;\n\n  // Check for the project entry block\n\n  const slnDir = path.dirname(slnFile);\n  const relProjectFile = path.relative(slnDir, project.projectFile);\n\n  const projectTypeGuid =\n    'projectTypeGuid' in project\n      ? project.projectTypeGuid!\n      : projectTypeGuidsByLanguage[project.projectLang];\n\n  const projectGuid = project.projectGuid.toUpperCase();\n\n  const projectEntryBlock = [\n    `Project(\"${projectTypeGuid}\") = \"${project.projectName}\", \"${relProjectFile}\", \"${projectGuid}\"`,\n    'EndProject',\n  ];\n\n  const projectEntryBlockRegex = [\n    new RegExp(\n      `Project\\\\(\"${projectTypeGuid}\"\\\\) = \"${project.projectName}\", \"(.*)\", \"${projectGuid}\"`,\n    ),\n    'EndProject',\n  ];\n\n  const blockIndex = linesContainsBlock(slnLines, projectEntryBlockRegex);\n\n  if (blockIndex < 0) {\n    // Regex didn't match, insert\n    if (verbose) {\n      console.log(chalk.yellow('Missing project entry block, inserting.'));\n    }\n\n    const globalIndex = slnLines.indexOf('Global');\n    insertBlockIntoLines(slnLines, projectEntryBlock, globalIndex);\n    contentsChanged = true;\n  } else if (linesContainsBlock(slnLines, projectEntryBlock) < 0) {\n    // Regex matched but project path has changed, so correct it\n    if (verbose) {\n      console.log(\n        chalk.yellow('Existing project entry block found, overwriting.'),\n      );\n    }\n\n    overwriteLinesWithBlock(slnLines, projectEntryBlock, blockIndex);\n    contentsChanged = true;\n  }\n\n  // Check for the project configuration platforms\n\n  const slnConfigs = getBlockContentsFromLines(\n    slnLines,\n    '\\tGlobalSection(SolutionConfigurationPlatforms) = preSolution',\n    '\\tEndGlobalSection',\n    false,\n  ).map(line => line.match(/\\s+([\\w\\s|]+)\\s=/)![1]);\n\n  const projectConfigLines: string[] = [];\n\n  slnConfigs.forEach(slnConfig => {\n    if (!slnConfig.endsWith('|Any CPU')) {\n      projectConfigLines.push(\n        `\\t\\t${projectGuid}.${slnConfig}.ActiveCfg = ${\n          project.projectLang === 'cpp'\n            ? slnConfig.replace('x86', 'Win32')\n            : slnConfig\n        }`,\n      );\n      projectConfigLines.push(\n        `\\t\\t${projectGuid}.${slnConfig}.Build.0 = ${\n          project.projectLang === 'cpp'\n            ? slnConfig.replace('x86', 'Win32')\n            : slnConfig\n        }`,\n      );\n    }\n  });\n\n  const projectConfigStartIndex = slnLines.indexOf(\n    '\\tGlobalSection(ProjectConfigurationPlatforms) = postSolution',\n  );\n\n  projectConfigLines.forEach(projectConfigLine => {\n    if (!slnLines.includes(projectConfigLine)) {\n      if (verbose) {\n        const configLine = projectConfigLine.substr(\n          projectConfigLine.indexOf('= ') + 2,\n        );\n        console.log(chalk.yellow(`Missing ${configLine} config block.`));\n      }\n\n      const projectConfigEndIndex = slnLines.indexOf(\n        '\\tEndGlobalSection',\n        projectConfigStartIndex,\n      );\n\n      slnLines.splice(projectConfigEndIndex, 0, projectConfigLine);\n      contentsChanged = true;\n    }\n  });\n\n  // Write out new solution file if there were changes\n  if (contentsChanged) {\n    if (verbose) {\n      console.log(\n        chalk.yellow(\n          `${chalk.bold(path.basename(slnFile))} needs to be updated.`,\n        ),\n      );\n    }\n\n    if (!checkMode) {\n      if (verbose) {\n        console.log(\n          `Writing changes to ${chalk.bold(path.basename(slnFile))}...`,\n        );\n      }\n\n      const slnContents = slnLines.join(isCRLF ? '\\r\\n' : '\\n');\n      fs.writeFileSync(slnFile, slnContents, {\n        encoding: 'utf8',\n        flag: 'w',\n      });\n    }\n  } else {\n    if (verbose) {\n      console.log(`No changes to ${chalk.bold(path.basename(slnFile))}.`);\n    }\n  }\n\n  return contentsChanged;\n}\n"]}