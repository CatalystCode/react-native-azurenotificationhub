{"version":3,"file":"winappdeploytool.js","sourceRoot":"","sources":["../../../src/runWindows/utils/winappdeploytool.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport fs from '@react-native-windows/fs';\nimport path from 'path';\nimport {execSync} from 'child_process';\nimport {newSpinner, commandWithProgress, newWarn} from './commandWithProgress';\nimport {CodedError} from '@react-native-windows/telemetry';\n\nfunction sortDevices(l: DeviceInfo, r: DeviceInfo): number {\n  return l.toString().length - r.toString().length;\n}\n\nclass DeviceInfo {\n  constructor(\n    public readonly name: string,\n    public readonly guid: string,\n    public readonly ip: string,\n\n    private readonly index: number,\n    private readonly type: string,\n  ) {}\n\n  toString() {\n    return `${this.index}. ${this.name} (${this.type})`;\n  }\n}\n\nexport default class WinAppDeployTool {\n  private readonly path: string;\n\n  constructor() {\n    const programFilesPath =\n      process.env['ProgramFiles(x86)'] || process.env.ProgramFiles;\n    this.path = path.join(\n      programFilesPath!,\n      'Windows Kits',\n      '10',\n      'bin',\n      'x86',\n      'WinAppDeployCmd.exe',\n    );\n  }\n\n  get isAvailable() {\n    return fs.existsSync(this.path);\n  }\n\n  findDevice(target: string): DeviceInfo {\n    const devices = this.enumerateDevices();\n\n    if (devices.length === 0) {\n      throw new CodedError('NoDevice', 'No devices found');\n    }\n\n    if (target === 'emulator') {\n      const sortedList = devices.sort(sortDevices);\n      for (const sortedItem of sortedList) {\n        if (sortedItem.toString().includes(target)) {\n          return sortedItem;\n        }\n      }\n    }\n\n    if (target === 'device') {\n      return devices[0];\n    }\n\n    const candidateList = devices.filter(device => device.guid === target);\n\n    if (candidateList.length > 0) {\n      return candidateList[0];\n    } else {\n      throw new CodedError('NoDevice', 'No devices found');\n    }\n  }\n\n  enumerateDevices(): DeviceInfo[] {\n    // 127.0.0.1   00000015-b21e-0da9-0000-000000000000    Lumia 1520 (RM-940)\\r\n    //  maps to\n    // [(line), '127.0.0.1', '00000015-b21e-0da9-0000-000000000000', 'Lumia 1520 (RM-940)']\n    // The expansion is: IP address, spaces, GUID, spaces, text name\n    const LINE_TEST = /^([\\d\\.]+?)\\s+([\\da-fA-F\\-]+?)\\s+(.+)$/m; // eslint-disable-line no-useless-escape\n\n    const result = execSync(`\"${this.path}\" devices`).toString();\n    const lines = result.split('\\r\\n');\n    const matchedLines = lines.filter(line => LINE_TEST.test(line));\n\n    const devices = matchedLines.map((line, arrayIndex) => {\n      const match = line.match(LINE_TEST);\n      if (!match) {\n        throw new CodedError(\n          'InvalidDevicesOutput',\n          'Unexpected format of \"devices\" output',\n        );\n      }\n\n      const ip = match[1];\n      const guid = match[2];\n      const name = match[3];\n      const type = 'device';\n\n      const deviceInfo = new DeviceInfo(name, guid, ip, arrayIndex, type);\n      return deviceInfo;\n    });\n\n    return devices;\n  }\n\n  async installAppPackage(\n    pathToAppxPackage: string,\n    targetDevice: DeviceInfo,\n    shouldLaunch: boolean,\n    shouldUpdate: boolean,\n    pin: boolean,\n    verbose: boolean = false,\n  ) {\n    const text = `Installing app to ${targetDevice.name}`;\n\n    if (shouldLaunch) {\n      newWarn(\n        'Cannot launch app with current version of Windows 10 SDK tools.  You will have to launch the app after installation is completed.',\n      );\n    }\n\n    const args = [\n      shouldUpdate ? 'update' : 'install',\n      '-file',\n      pathToAppxPackage,\n      '-ip',\n      targetDevice.ip,\n    ];\n\n    if (pin) {\n      args.push('-pin', pin.toString());\n    }\n    await commandWithProgress(\n      newSpinner(text),\n      text,\n      this.path,\n      args,\n      verbose,\n      'InstallAppToDeviceFailure',\n    );\n  }\n\n  async uninstallAppPackage(\n    appName: string,\n    targetDevice: DeviceInfo,\n    verbose: boolean,\n  ) {\n    const text = `Uninstalling app from ${targetDevice.name}`;\n    await commandWithProgress(\n      newSpinner(text),\n      text,\n      this.path,\n      `uninstall -package ${appName} -ip {$targetDevice.ip}`.split(' '),\n      verbose,\n      'UninstallAppOnDeviceFailure',\n    );\n  }\n}\n"]}