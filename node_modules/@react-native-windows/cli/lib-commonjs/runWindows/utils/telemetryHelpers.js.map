{"version":3,"file":"telemetryHelpers.js","sourceRoot":"","sources":["../../../src/runWindows/utils/telemetryHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {camelCase} from 'lodash';\n\nimport {\n  Config,\n  CommandOption,\n  OptionValue,\n} from '@react-native-community/cli-types';\n\nimport {\n  Telemetry,\n  CodedError,\n  CommandStartInfo,\n  CommandEndInfo,\n  CommanderOptionsType,\n  commanderOptionsToOptions,\n  optionsToArgs,\n  OptionSanitizer,\n  configToProjectInfo,\n  getProjectFileFromConfig,\n} from '@react-native-windows/telemetry';\n\n/**\n * Calculates a the default values of a given react-native CLI command's options.\n * @param config Config passed from react-native CLI.\n * @param commandOptions The options definition for the command.\n * @returns The default options for the command.\n */\nexport function getDefaultOptions(\n  config: Config,\n  commandOptions: CommandOption[],\n): CommanderOptionsType {\n  const result: CommanderOptionsType = {\n    logging: false,\n  };\n  for (const option of commandOptions) {\n    let key = option.name.startsWith('--')\n      ? option.name.slice('--'.length)\n      : option.name;\n    key = key.trim();\n\n    let value = option.default;\n    if (value !== undefined && (value as (ctx: Config) => OptionValue).name) {\n      value = (value as (ctx: Config) => OptionValue)(config);\n    }\n\n    if (key.endsWith(' [string]')) {\n      // Option is a string\n      key = key.slice(0, -' [string]'.length);\n      // Option is a number\n    } else if (key.endsWith(' [number]')) {\n      key = key.slice(0, -' [number]'.length);\n    } else {\n      // Option is a boolean\n      // Note: Commander ignores the default property for booleans\n      if (key.startsWith('no-')) {\n        key = key.slice('no-'.length);\n        // Commander always defaults to true for flags that start with --no\n        value = true;\n      } else {\n        // Commander always defaults to undefined for flags\n        value = undefined;\n      }\n    }\n\n    key = camelCase(key);\n    result[key] = value;\n  }\n  return result;\n}\n\n/**\n * Sets up and starts the telemetry gathering for the CLI command.\n * @param commandName The name of the CLI command.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n * @param defaultOptions Default options for the command.\n * @param optionSanitizer Function to sanitize the option values for telemetry.\n */\nexport async function startTelemetrySession(\n  commandName: string,\n  config: Config,\n  options: CommanderOptionsType,\n  defaultOptions: CommanderOptionsType,\n  optionSanitizer: OptionSanitizer,\n) {\n  if (!options.telemetry) {\n    if (options.logging) {\n      console.log('Telemetry is disabled');\n    }\n    return;\n  }\n\n  await Telemetry.setup();\n\n  const sanitizedOptions = commanderOptionsToOptions(options, optionSanitizer);\n  const sanitizedDefaultOptions = commanderOptionsToOptions(\n    defaultOptions,\n    optionSanitizer,\n  );\n  const sanitizedArgs = optionsToArgs(sanitizedOptions, process.argv);\n\n  const startInfo: CommandStartInfo = {\n    commandName,\n    args: sanitizedArgs,\n    options: sanitizedOptions,\n    defaultOptions: sanitizedDefaultOptions,\n  };\n\n  Telemetry.startCommand(startInfo);\n\n  const projectInfo = await configToProjectInfo(config);\n  if (projectInfo) {\n    Telemetry.setProjectInfo(projectInfo);\n  }\n\n  const projectFile = getProjectFileFromConfig(config);\n  if (projectFile) {\n    await Telemetry.populateNuGetPackageVersions(projectFile);\n  }\n}\n\n/**\n * Ends the gathering of telemetry for the CLI command.\n * @param error The error (if any) thrown during the command.\n * @param getExtraProps Function to get any extra command-specific telemetry properties.\n */\nexport async function endTelemetrySession(\n  error?: Error,\n  getExtraProps?: () => Promise<Record<string, any>>,\n) {\n  if (!Telemetry.isEnabled()) {\n    // Bail early so don't waste time here\n    return;\n  }\n\n  const endInfo: CommandEndInfo = {\n    resultCode: 'Success',\n  };\n\n  if (error) {\n    endInfo.resultCode =\n      error instanceof CodedError ? (error as CodedError).type : 'Unknown';\n  }\n\n  Telemetry.endCommand(\n    endInfo,\n    getExtraProps ? await getExtraProps() : undefined,\n  );\n}\n"]}