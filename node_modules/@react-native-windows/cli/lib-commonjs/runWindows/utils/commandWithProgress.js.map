{"version":3,"file":"commandWithProgress.js","sourceRoot":"","sources":["../../../src/runWindows/utils/commandWithProgress.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {spawn, SpawnOptions} from 'child_process';\nimport ora from 'ora';\nimport spinners from 'cli-spinners';\nimport chalk from 'chalk';\nimport {\n  Telemetry,\n  CodedError,\n  CodedErrors,\n  CodedErrorType,\n} from '@react-native-windows/telemetry';\n\nfunction setSpinnerText(spinner: ora.Ora, prefix: string, text: string) {\n  text = prefix + spinnerString(text);\n  spinner.text = text.length > 45 ? text.slice(0, 110) + '...' : text;\n}\n\nfunction spinnerString(msg: string) {\n  msg = msg.trim();\n  const lastLineIndex = msg.lastIndexOf('\\n');\n  if (lastLineIndex > 0) {\n    msg = msg.slice(lastLineIndex + 1);\n  }\n  msg = msg.trim();\n  return msg;\n}\n\nexport function newSpinner(text: string) {\n  const options: ora.Options = {\n    text: text,\n    indent: 1,\n\n    // ora turns off emoji rendering by default on windows, since the default terminal\n    // doesn't render them.  Turn them back on when running in the new windows terminal\n    ...(process.env.WT_SESSION && {spinner: spinners.dots}),\n\n    // By default, ora process.stderr as the output stream, however,the VS Code debugger\n    // Uses stdout to match success patterns\n    stream: process.stdout,\n  };\n\n  return ora(options).start();\n}\n\nexport const powershell = `${process.env.SystemRoot}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`;\n\nexport async function runPowerShellScriptFunction(\n  taskDescription: string,\n  script: string | null,\n  funcName: string,\n  verbose: boolean,\n  errorCategory: CodedErrorType,\n) {\n  try {\n    const printException = verbose ? '$_;' : '';\n    const importScript = script ? `Import-Module \"${script}\"; ` : '';\n    await commandWithProgress(\n      newSpinner(taskDescription),\n      taskDescription,\n      powershell,\n      [\n        '-NoProfile',\n        '-ExecutionPolicy',\n        'RemoteSigned',\n        `${importScript}try { ${funcName} -ErrorAction Stop; $lec = $LASTEXITCODE; } catch { $lec = 1; ${printException} }; exit $lec`,\n      ],\n      verbose,\n      errorCategory,\n    );\n  } catch {\n    // The error output from the process will be shown if verbose is set.\n    // We don't capture the process output if verbose is set, but at least we have the task name in text, so throw that.\n    throw new CodedError(errorCategory, taskDescription);\n  }\n}\n\nexport function commandWithProgress(\n  spinner: ora.Ora,\n  taskDoingName: string,\n  command: string,\n  args: string[],\n  verbose: boolean,\n  errorCategory: CodedErrorType,\n) {\n  return new Promise<void>((resolve, reject) => {\n    const spawnOptions: SpawnOptions = verbose ? {stdio: 'inherit'} : {};\n\n    if (verbose) {\n      spinner.stop();\n    }\n\n    const cp = spawn(command, args, spawnOptions);\n    let firstErrorLine: string | null = null;\n    if (!verbose) {\n      cp.stdout!.on('data', chunk => {\n        const text = chunk.toString();\n        setSpinnerText(spinner, taskDoingName + ': ', text);\n      });\n      cp.stderr!.on('data', chunk => {\n        const text: string = chunk.toString();\n        if (!firstErrorLine) {\n          firstErrorLine = text;\n        }\n        if (text) {\n          setSpinnerText(spinner, taskDoingName + ': ERROR: ', firstErrorLine);\n        }\n        reject(\n          new CodedError(errorCategory, firstErrorLine, {\n            taskName: taskDoingName,\n          }),\n        );\n      });\n    }\n    cp.on('error', e => {\n      if (verbose) {\n        console.error(chalk.red(e.toString()));\n      }\n      spinner.fail(e.toString());\n      const ce = new CodedError(errorCategory, e.message);\n      ce.stack = e.stack;\n      reject(ce);\n    }).on('close', code => {\n      if (code === 0) {\n        spinner.succeed(taskDoingName);\n        resolve();\n      } else {\n        spinner.fail();\n        reject(\n          new CodedError(\n            errorCategory,\n            `${taskDoingName} - exit error code ${code}`,\n            {\n              taskName: taskDoingName,\n              taskExitCode: code,\n            },\n          ),\n        );\n      }\n    });\n  });\n}\n\nexport function newError(text: string) {\n  newSpinner(text).fail(text);\n}\n\nexport function newWarn(text: string) {\n  newSpinner(text).warn(text);\n}\n\nexport function newSuccess(text: string) {\n  newSpinner(text).succeed(text);\n}\n\nexport function newInfo(text: string) {\n  newSpinner(text).info(text);\n}\n\n/**\n * Sets the process exit code and offers some information at the end of a CLI command.\n * @param loggingIsEnabled Is verbose logging enabled.\n * @param error The error caught during the process, if any.\n */\nexport function setExitProcessWithError(\n  loggingIsEnabled?: boolean,\n  error?: Error,\n): void {\n  if (error) {\n    const errorType =\n      error instanceof CodedError ? (error as CodedError).type : 'Unknown';\n\n    process.exitCode = CodedErrors[errorType];\n\n    if (loggingIsEnabled) {\n      console.log(\n        `Command failed with error ${chalk.bold(errorType)}: ${error.message}`,\n      );\n      if (Telemetry.isEnabled()) {\n        console.log(\n          `Your telemetry sessionId was ${chalk.bold(\n            Telemetry.getSessionId(),\n          )}`,\n        );\n      }\n    } else {\n      console.log(\n        `Command failed. Re-run the command with ${chalk.bold(\n          '--logging',\n        )} for more information.`,\n      );\n    }\n  }\n}\n"]}