{"version":3,"file":"PerformanceMetricsTelemetryProcessor.js","sourceRoot":"","sources":["../../TelemetryProcessors/PerformanceMetricsTelemetryProcessor.ts"],"names":[],"mappings":";;;AAEA,sEAAyE;AACzE,yDAA2D;AAE3D,SAAgB,oCAAoC,CAAC,QAAqC,EAAE,MAA+B;IACvH,0DAA0D;IAC1D,IAAI,MAAM,EAAE;QACR,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;KAChC;IAED,kEAAkE;IAClE,QAAQ,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE;QAC5B,KAAK,aAAa,CAAC,mBAAmB,CAAC,SAAS;YAC5C,sBAAsB,CAAC,cAAc,EAAE,CAAC;YACxC,MAAM;QACV,KAAK,aAAa,CAAC,mBAAmB,CAAC,OAAO;YAC1C,IAAM,WAAW,GAA2B,QAAQ,CAAC,IAAY,CAAC,QAAQ,CAAC;YAC3E,sBAAsB,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;YAC/E,MAAM;QACV,KAAK,aAAa,CAAC,mBAAmB,CAAC,UAAU;YAC7C,IAAM,oBAAoB,GAAoC,QAAQ,CAAC,IAAY,CAAC,QAAQ,CAAC;YAC7F,sBAAsB,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,EAAE,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACpG,MAAM;KACb;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AArBD,oFAqBC","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\");\r\nimport QuickPulseStateManager = require(\"../Library/QuickPulseStateManager\")\r\nimport AutoCollectPerformance = require(\"../AutoCollection/Performance\");\r\nimport * as TelemetryType from \"../Declarations/Contracts\";\r\n\r\nexport function performanceMetricsTelemetryProcessor(envelope: Contracts.EnvelopeTelemetry, client?: QuickPulseStateManager): boolean {\r\n    // If live metrics is enabled, forward all telemetry there\r\n    if (client) {\r\n        client.addDocument(envelope);\r\n    }\r\n\r\n    // Increment rate counters (for standard metrics and live metrics)\r\n    switch (envelope.data.baseType) {\r\n        case TelemetryType.TelemetryTypeString.Exception:\r\n            AutoCollectPerformance.countException();\r\n            break;\r\n        case TelemetryType.TelemetryTypeString.Request:\r\n            const requestData: Contracts.RequestData = (envelope.data as any).baseData;\r\n            AutoCollectPerformance.countRequest(requestData.duration, requestData.success);\r\n            break;\r\n        case TelemetryType.TelemetryTypeString.Dependency:\r\n            const remoteDependencyData: Contracts.RemoteDependencyData = (envelope.data as any).baseData;\r\n            AutoCollectPerformance.countDependency(remoteDependencyData.duration, remoteDependencyData.success);\r\n            break;\r\n    }\r\n    return true;\r\n}\r\n"]}