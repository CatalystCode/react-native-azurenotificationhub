{"version":3,"file":"FileSystemHelper.js","sourceRoot":"","sources":["../../Library/FileSystemHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\nimport path = require(\"path\");\r\nimport { promisify } from \"util\";\r\n\r\nexport const statAsync = promisify(fs.stat);\r\nexport const lstatAsync = promisify(fs.lstat);\r\nexport const mkdirAsync = promisify(fs.mkdir);\r\nexport const accessAsync = promisify(fs.access);\r\nexport const appendFileAsync = promisify(fs.appendFile);\r\nexport const writeFileAsync = promisify(fs.writeFile);\r\nexport const readFileAsync = promisify(fs.readFile);\r\nexport const readdirAsync = promisify(fs.readdir);\r\nexport const unlinkAsync = promisify(fs.unlink);\r\n\r\n/**\r\n * Validate directory exists.\r\n */\r\nexport const confirmDirExists = async (directory: string): Promise<void> => {\r\n    try {\r\n        const stats = await lstatAsync(directory);\r\n        if (!stats.isDirectory()) {\r\n            throw new Error(\"Path existed but was not a directory\");\r\n        }\r\n    } catch (err) {\r\n        if (err && err.code === \"ENOENT\") {\r\n            try {\r\n                await mkdirAsync(directory);\r\n            } catch (mkdirErr) {\r\n                if (mkdirErr && mkdirErr.code !== \"EEXIST\") {\r\n                    // Handle race condition by ignoring EEXIST\r\n                    throw mkdirErr;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Computes the size (in bytes) of all files in a directory at the root level. Asynchronously.\r\n */\r\nexport const getShallowDirectorySize = async (directory: string): Promise<number> => {\r\n    // Get the directory listing\r\n    const files = await readdirAsync(directory);\r\n    let totalSize = 0;\r\n    // Query all file sizes\r\n    for (const file of files) {\r\n        const fileStats = await statAsync(path.join(directory, file));\r\n        if (fileStats.isFile()) {\r\n            totalSize += fileStats.size;\r\n        }\r\n    }\r\n    return totalSize;\r\n};\r\n\r\n/**\r\n* Computes the size (in bytes) of all files in a directory at the root level. Synchronously.\r\n*/\r\nexport const getShallowDirectorySizeSync = (directory: string): number => {\r\n    let files = fs.readdirSync(directory);\r\n    let totalSize = 0;\r\n    for (let i = 0; i < files.length; i++) {\r\n        totalSize += fs.statSync(path.join(directory, files[i])).size;\r\n    }\r\n    return totalSize;\r\n}\r\n\r\n/**\r\n* Computes the size (in bytes) of a file asynchronously.\r\n*/\r\nexport const getShallowFileSize = async (filePath: string): Promise<number> => {\r\n    const fileStats = await statAsync(filePath);\r\n    if (fileStats.isFile()) {\r\n        return fileStats.size;\r\n    }\r\n}\r\n\r\n"]}