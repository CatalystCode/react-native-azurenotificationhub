{"version":3,"file":"QuickPulseStateManager.js","sourceRoot":"","sources":["../../Library/QuickPulseStateManager.ts"],"names":[],"mappings":"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","sourcesContent":["import AuthorizationHandler = require(\"./AuthorizationHandler\");\r\nimport Logging = require(\"./Logging\");\r\nimport Config = require(\"./Config\");\r\nimport QuickPulseEnvelopeFactory = require(\"./QuickPulseEnvelopeFactory\");\r\nimport QuickPulseSender = require(\"./QuickPulseSender\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Context = require(\"./Context\");\r\n\r\nimport * as http from \"http\";\r\nimport * as Contracts from \"../Declarations/Contracts\";\r\n\r\n\r\n/** State Container for sending to the QuickPulse Service */\r\nclass QuickPulseStateManager {\r\n    public config: Config;\r\n    public context: Context;\r\n    public authorizationHandler: AuthorizationHandler;\r\n\r\n    private static MAX_POST_WAIT_TIME = 20000;\r\n    private static MAX_PING_WAIT_TIME = 60000;\r\n    private static FALLBACK_INTERVAL = 60000;\r\n    private static PING_INTERVAL = 5000;\r\n    private static POST_INTERVAL = 1000;\r\n\r\n    private _isCollectingData: boolean = false;\r\n    private _sender: QuickPulseSender;\r\n    private _isEnabled: boolean;\r\n    private _lastSuccessTime: number = Date.now();\r\n    private _lastSendSucceeded: boolean = true;\r\n    private _handle: NodeJS.Timer;\r\n    private _metrics: { [name: string]: Contracts.MetricQuickPulse } = {};\r\n    private _documents: Contracts.DocumentQuickPulse[] = [];\r\n    private _collectors: { enable: (enable: boolean) => void }[] = [];\r\n    private _redirectedHost: string = null;\r\n    private _pollingIntervalHint: number = -1;\r\n\r\n    constructor(config: Config, context?: Context, getAuthorizationHandler?: (config: Config) => AuthorizationHandler) {\r\n        this.config = config;\r\n        this.context = context || new Context();\r\n        this._sender = new QuickPulseSender(this.config, getAuthorizationHandler);\r\n        this._isEnabled = false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param collector\r\n     */\r\n    public addCollector(collector: any): void {\r\n        this._collectors.push(collector);\r\n    }\r\n\r\n    /**\r\n     * Override of TelemetryClient.trackMetric\r\n     */\r\n    public trackMetric(telemetry: Contracts.MetricTelemetry): void {\r\n        this._addMetric(telemetry);\r\n    }\r\n\r\n    /**\r\n     * Add a document to the current buffer\r\n     * @param envelope\r\n     */\r\n    public addDocument(envelope: Contracts.Envelope): void {\r\n        // Only add documents in buffer when Live Metrics is collecting data\r\n        if (this._isCollectingData) {\r\n            const document = QuickPulseEnvelopeFactory.telemetryEnvelopeToQuickPulseDocument(envelope);\r\n            if (document) {\r\n                this._documents.push(document);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable communication with QuickPulseService\r\n     * @param isEnabled\r\n     */\r\n    public enable(isEnabled: boolean): void {\r\n        if (isEnabled && !this._isEnabled) {\r\n            this._isEnabled = true;\r\n            this._goQuickPulse();\r\n        } else if (!isEnabled && this._isEnabled) {\r\n            this._isEnabled = false;\r\n            clearTimeout(this._handle);\r\n            this._handle = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable all collectors in this instance\r\n     * @param enable\r\n     */\r\n    private enableCollectors(enable: boolean): void {\r\n        this._collectors.forEach(collector => {\r\n            collector.enable(enable)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add the metric to this buffer. If same metric already exists in this buffer, add weight to it\r\n     * @param telemetry\r\n     */\r\n    private _addMetric(telemetry: Contracts.MetricTelemetry) {\r\n        const { value } = telemetry;\r\n        const count = telemetry.count || 1;\r\n\r\n        let name = Constants.PerformanceToQuickPulseCounter[telemetry.name];\r\n        if (name) {\r\n            if (this._metrics[name]) {\r\n                this._metrics[name].Value = (this._metrics[name].Value * this._metrics[name].Weight + value * count) / (this._metrics[name].Weight + count);\r\n                this._metrics[name].Weight += count;\r\n            } else {\r\n                this._metrics[name] = QuickPulseEnvelopeFactory.createQuickPulseMetric(telemetry);\r\n                this._metrics[name].Name = name;\r\n                this._metrics[name].Weight = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resetQuickPulseBuffer(): void {\r\n        delete this._metrics;\r\n        this._metrics = {};\r\n        this._documents.length = 0;\r\n    }\r\n\r\n    private async _goQuickPulse(): Promise<void> {\r\n        // Create envelope from Documents and Metrics\r\n        const metrics = Object.keys(this._metrics).map(k => this._metrics[k]);\r\n        const envelope = QuickPulseEnvelopeFactory.createQuickPulseEnvelope(metrics, this._documents.slice(), this.config, this.context);\r\n\r\n        // Clear this document, metric buffer\r\n        this._resetQuickPulseBuffer();\r\n\r\n        // Send it to QuickPulseService, if collecting\r\n        if (this._isCollectingData) {\r\n            await this._post(envelope);\r\n        } else {\r\n            this._ping(envelope);\r\n        }\r\n\r\n        let pingInterval = this._pollingIntervalHint > 0 ? this._pollingIntervalHint : QuickPulseStateManager.PING_INTERVAL;\r\n        let currentTimeout = this._isCollectingData ? QuickPulseStateManager.POST_INTERVAL : pingInterval;\r\n        if (this._isCollectingData && Date.now() - this._lastSuccessTime >= QuickPulseStateManager.MAX_POST_WAIT_TIME && !this._lastSendSucceeded) {\r\n            // Haven't posted successfully in 20 seconds, so wait 60 seconds and ping\r\n            this._isCollectingData = false;\r\n            currentTimeout = QuickPulseStateManager.FALLBACK_INTERVAL;\r\n        } else if (!this._isCollectingData && Date.now() - this._lastSuccessTime >= QuickPulseStateManager.MAX_PING_WAIT_TIME && !this._lastSendSucceeded) {\r\n            // Haven't pinged successfully in 60 seconds, so wait another 60 seconds\r\n            currentTimeout = QuickPulseStateManager.FALLBACK_INTERVAL;\r\n        }\r\n        this._lastSendSucceeded = null;\r\n        this._handle = <any>setTimeout(this._goQuickPulse.bind(this), currentTimeout);\r\n        this._handle.unref(); // Don't block apps from terminating\r\n    }\r\n\r\n    private _ping(envelope: Contracts.EnvelopeQuickPulse): void {\r\n        this._sender.ping(envelope, this._redirectedHost, this._quickPulseDone.bind(this));\r\n    }\r\n\r\n    private async _post(envelope: Contracts.EnvelopeQuickPulse): Promise<void> {\r\n        await this._sender.post(envelope, this._redirectedHost, this._quickPulseDone.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Change the current QPS send state. (shouldPOST == undefined) --> error, but do not change the state yet.\r\n     */\r\n    private _quickPulseDone(shouldPOST?: boolean, res?: http.IncomingMessage,\r\n        redirectedHost?: string, pollingIntervalHint?: number): void {\r\n        if (shouldPOST != undefined) {\r\n            if (this._isCollectingData !== shouldPOST) {\r\n                Logging.info(\"Live Metrics sending data\", shouldPOST);\r\n                this.enableCollectors(shouldPOST);\r\n            }\r\n            this._isCollectingData = shouldPOST;\r\n\r\n            if (redirectedHost && redirectedHost.length > 0) {\r\n                this._redirectedHost = redirectedHost;\r\n                Logging.info(\"Redirecting endpoint to: \", redirectedHost);\r\n            }\r\n\r\n            if (pollingIntervalHint && pollingIntervalHint > 0) {\r\n                this._pollingIntervalHint = pollingIntervalHint;\r\n            }\r\n\r\n            if (res && res.statusCode < 300 && res.statusCode >= 200) {\r\n                this._lastSuccessTime = Date.now();\r\n                this._lastSendSucceeded = true;\r\n            } else {\r\n                this._lastSendSucceeded = false;\r\n            }\r\n        } else {\r\n            // Received an error, keep the state as is\r\n            this._lastSendSucceeded = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport = QuickPulseStateManager;"]}