{"version":3,"file":"QuickPulseSender.js","sourceRoot":"","sources":["../../Library/QuickPulseSender.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAAgC;AAIhC,gFAAmF;AACnF,mCAAsC;AACtC,iDAAoD;AACpD,6BAAgC;AAChC,yBAA4B;AAM5B,IAAM,gBAAgB,GAAG;IACrB,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,4BAA4B;IAClC,mBAAmB,EAAE,wCAAwC;IAC7D,gBAAgB,EAAE,uCAAuC;IACzD,YAAY,EAAE,wBAAwB;IACtC,QAAQ,EAAE,oBAAoB;IAC9B,WAAW,EAAE,uBAAuB;IACpC,QAAQ,EAAE,oBAAoB;IAC9B,QAAQ,EAAE,oBAAoB;IAC9B,gBAAgB,EAAE,4BAA4B;IAC9C,UAAU,EAAE,qBAAqB;CACpC,CAAC;AAEF;IAQI,0BAAY,MAAc,EAAE,uBAAkE;QAC1F,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,wBAAwB,GAAG,uBAAuB,CAAC;IAC5D,CAAC;IAEM,+BAAI,GAAX,UAAY,QAAsC,EAC9C,sBAA8B,EAC9B,IAAuH;QAGvH,IAAI,WAAW,GAAsC;YACjD,EAAE,IAAI,EAAE,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE;YAC7D,EAAE,IAAI,EAAE,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE,QAAQ,CAAC,WAAW,EAAE;YACnE,EAAE,IAAI,EAAE,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE;YAC7D,EAAE,IAAI,EAAE,gBAAgB,CAAC,YAAY,EAAE,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE;YACjE,EAAE,IAAI,EAAE,gBAAgB,CAAC,gBAAgB,EAAE,KAAK,EAAE,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE;SAC3F,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IAClF,CAAC;IAEY,+BAAI,GAAjB,UAAkB,QAAsC,EACpD,sBAA8B,EAC9B,IAAuH;;;;;oBAGvH,0DAA0D;oBAC1D,qBAAM,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,EAAE,sBAAsB,EAAE,IAAI,EAAE,MAAM,CAAC,EAAA;;wBADxE,0DAA0D;wBAC1D,SAAwE,CAAC;;;;;KAC5E;IAEa,sCAAW,GAAzB,UAA0B,QAAuE,EAC7F,sBAA8B,EAC9B,IAAuH,EACvH,UAA2B,EAC3B,iBAAqD;;;;;;;;wBAG/C,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;wBACrC,OAAO;4BACP,GAAC,2BAA2B,CAAC,8BAA8B,IAAG,IAAI;4BAClE,OAAI,GAAE,CAAC,sBAAsB,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc;4BAC1H,SAAM,GAAE,gBAAgB,CAAC,MAAM;4BAC/B,OAAI,GAAE,4BAA0B,UAAU,cAAS,IAAI,CAAC,OAAO,CAAC,kBAAoB;4BACpF,UAAO;oCACH,QAAQ,EAAE,cAAc;;gCACxB,GAAC,gBAAgB,CAAC,IAAI,IAAG,cAAc,CAAC,mBAAmB,EAAE;gCAC7D,kBAAc,GAAE,mBAAmB;gCACnC,oBAAgB,GAAE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;mCAC/C;+BACJ,CAAC;wBAEF,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;4BACnD,iBAAiB,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,EAA3C,CAA2C,CAAC,CAAC;yBACpF;6BAEG,CAAA,UAAU,KAAK,MAAM,CAAA,EAArB,wBAAqB;wBACjB,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;6BACjG,WAAW,EAAX,wBAAW;;;;wBAEP,mBAAmB;wBACnB,qBAAM,WAAW,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAA;;wBADjD,mBAAmB;wBACnB,SAAiD,CAAC;;;;wBAG9C,MAAM,GAAG,4DAA4D,CAAC;wBAC1E,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,MAAM,EAAE,WAAS,CAAC,CAAC;wBACtD,wEAAwE;wBACxE,sBAAO;;wBAKnB,aAAa;wBACb,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;4BACnB,OAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;yBAClD;6BAAM;4BACG,OAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC;yBAClD;wBAEK,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,GAAyB;4BACzD,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE;gCACvB,IAAM,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC;gCAC3E,IAAI,cAAc,GAAG,IAAI,CAAC;gCAC1B,IAAI;oCACA,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;iCACxJ;gCAAC,OAAO,KAAK,EAAE;oCACZ,KAAI,CAAC,QAAQ,CAAC,mDAAmD,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;iCAC5F;gCAED,IAAM,mBAAmB,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gCAC9J,KAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;gCAC5B,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE,cAAc,EAAE,mBAAmB,CAAC,CAAC;6BAClE;iCACI;gCACD,KAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,GAAG,CAAC,UAAU,GAAG,iBAAiB,GAAG,GAAG,CAAC,aAAa,CAAC,CAAC;gCACtF,IAAI,EAAE,CAAC;6BACV;wBACL,CAAC,CAAC,CAAC;wBAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAY;4BACzB,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACrB,IAAI,EAAE,CAAC;wBACX,CAAC,CAAC,CAAC;wBAEH,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;wBACnB,GAAG,CAAC,GAAG,EAAE,CAAC;;;;;KACb;IAEO,mCAAQ,GAAhB,UAAiB,KAAqB;QAClC,kCAAkC;QAClC,sBAAsB;QACtB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,8EAA8E;QAC9E,IAAI,MAAM,GAAG,0HAA0H,CAAC;QACxI,IAAI,IAAI,CAAC,kBAAkB,GAAG,gBAAgB,CAAC,4BAA4B,KAAK,CAAC,EAAE;YAC/E,MAAM,GAAG,gDAA8C,IAAI,CAAC,kBAAkB,2CAAwC,CAAC;YACvH,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;SACrD;aAAM;YACH,sEAAsE;YACtE,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;SACrD;IACL,CAAC;IA/Hc,oBAAG,GAAG,kBAAkB,CAAC;IACzB,6CAA4B,GAAG,EAAE,CAAC;IA+HrD,uBAAC;CAAA,AAjID,IAiIC;AAED,iBAAS,gBAAgB,CAAC","sourcesContent":["import https = require(\"https\");\r\n\r\nimport AuthorizationHandler = require(\"./AuthorizationHandler\");\r\nimport Config = require(\"./Config\");\r\nimport AutoCollectHttpDependencies = require(\"../AutoCollection/HttpDependencies\");\r\nimport Logging = require(\"./Logging\");\r\nimport QuickPulseUtil = require(\"./QuickPulseUtil\");\r\nimport Util = require(\"./Util\");\r\nimport url = require(\"url\");\r\n\r\n// Types\r\nimport * as http from \"http\";\r\nimport * as Contracts from \"../Declarations/Contracts\";\r\n\r\nconst QuickPulseConfig = {\r\n    method: \"POST\",\r\n    time: \"x-ms-qps-transmission-time\",\r\n    pollingIntervalHint: \"x-ms-qps-service-polling-interval-hint\",\r\n    endpointRedirect: \"x-ms-qps-service-endpoint-redirect-v2\",\r\n    instanceName: \"x-ms-qps-instance-name\",\r\n    streamId: \"x-ms-qps-stream-id\",\r\n    machineName: \"x-ms-qps-machine-name\",\r\n    roleName: \"x-ms-qps-role-name\",\r\n    streamid: \"x-ms-qps-stream-id\",\r\n    invariantVersion: \"x-ms-qps-invariant-version\",\r\n    subscribed: \"x-ms-qps-subscribed\"\r\n};\r\n\r\nclass QuickPulseSender {\r\n    private static TAG = \"QuickPulseSender\";\r\n    private static MAX_QPS_FAILURES_BEFORE_WARN = 25;\r\n\r\n    private _config: Config;\r\n    private _consecutiveErrors: number;\r\n    private _getAuthorizationHandler: (config: Config) => AuthorizationHandler;\r\n\r\n    constructor(config: Config, getAuthorizationHandler?: (config: Config) => AuthorizationHandler) {\r\n        this._config = config;\r\n        this._consecutiveErrors = 0;\r\n        this._getAuthorizationHandler = getAuthorizationHandler;\r\n    }\r\n\r\n    public ping(envelope: Contracts.EnvelopeQuickPulse,\r\n        redirectedHostEndpoint: string,\r\n        done: (shouldPOST?: boolean, res?: http.IncomingMessage, redirectedHost?: string, pollingIntervalHint?: number) => void\r\n    ): void {\r\n\r\n        let pingHeaders: { name: string, value: string }[] = [\r\n            { name: QuickPulseConfig.streamId, value: envelope.StreamId },\r\n            { name: QuickPulseConfig.machineName, value: envelope.MachineName },\r\n            { name: QuickPulseConfig.roleName, value: envelope.RoleName },\r\n            { name: QuickPulseConfig.instanceName, value: envelope.Instance },\r\n            { name: QuickPulseConfig.invariantVersion, value: envelope.InvariantVersion.toString() }\r\n        ];\r\n        this._submitData(envelope, redirectedHostEndpoint, done, \"ping\", pingHeaders);\r\n    }\r\n\r\n    public async post(envelope: Contracts.EnvelopeQuickPulse,\r\n        redirectedHostEndpoint: string,\r\n        done: (shouldPOST?: boolean, res?: http.IncomingMessage, redirectedHost?: string, pollingIntervalHint?: number) => void\r\n    ): Promise<void> {\r\n\r\n        // Important: When POSTing data, envelope must be an array\r\n        await this._submitData([envelope], redirectedHostEndpoint, done, \"post\");\r\n    }\r\n\r\n    private async _submitData(envelope: Contracts.EnvelopeQuickPulse | Contracts.EnvelopeQuickPulse[],\r\n        redirectedHostEndpoint: string,\r\n        done: (shouldPOST?: boolean, res?: http.IncomingMessage, redirectedHost?: string, pollingIntervalHint?: number) => void,\r\n        postOrPing: \"post\" | \"ping\",\r\n        additionalHeaders?: { name: string, value: string }[]\r\n    ): Promise<void> {\r\n\r\n        const payload = Util.stringify(envelope);\r\n        var options = {\r\n            [AutoCollectHttpDependencies.disableCollectionRequestOption]: true,\r\n            host: (redirectedHostEndpoint && redirectedHostEndpoint.length > 0) ? redirectedHostEndpoint : this._config.quickPulseHost,\r\n            method: QuickPulseConfig.method,\r\n            path: `/QuickPulseService.svc/${postOrPing}?ikey=${this._config.instrumentationKey}`,\r\n            headers: {\r\n                \"Expect\": \"100-continue\",\r\n                [QuickPulseConfig.time]: QuickPulseUtil.getTransmissionTime(), // unit = 100s of nanoseconds\r\n                \"Content-Type\": \"application\\/json\",\r\n                \"Content-Length\": Buffer.byteLength(payload)\r\n            }\r\n        };\r\n\r\n        if (additionalHeaders && additionalHeaders.length > 0) {\r\n            additionalHeaders.forEach(header => options.headers[header.name] = header.value);\r\n        }\r\n\r\n        if (postOrPing === \"post\") {\r\n            let authHandler = this._getAuthorizationHandler ? this._getAuthorizationHandler(this._config) : null;\r\n            if (authHandler) {\r\n                try {\r\n                    // Add bearer token\r\n                    await authHandler.addAuthorizationHeader(options);\r\n                }\r\n                catch (authError) {\r\n                    let notice = \"Failed to get AAD bearer token for the Application. Error:\";\r\n                    Logging.info(QuickPulseSender.TAG, notice, authError);\r\n                    // Do not send request to Quickpulse if auth fails, data will be dropped\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        // HTTPS only\r\n        if (this._config.httpsAgent) {\r\n            (<any>options).agent = this._config.httpsAgent;\r\n        } else {\r\n            (<any>options).agent = Util.tlsRestrictedAgent;\r\n        }\r\n\r\n        const req = https.request(options, (res: http.IncomingMessage) => {\r\n            if (res.statusCode == 200) {\r\n                const shouldPOSTData = res.headers[QuickPulseConfig.subscribed] === \"true\";\r\n                let redirectHeader = null;\r\n                try {\r\n                    redirectHeader = res.headers[QuickPulseConfig.endpointRedirect] ? new url.URL(res.headers[QuickPulseConfig.endpointRedirect].toString()).host : null;\r\n                } catch (error) {\r\n                    this._onError(\"Failed to parse redirect header from QuickPulse: \" + Util.dumpObj(error));\r\n                }\r\n                \r\n                const pollingIntervalHint = res.headers[QuickPulseConfig.pollingIntervalHint] ? parseInt(res.headers[QuickPulseConfig.pollingIntervalHint].toString()) : null;\r\n                this._consecutiveErrors = 0;\r\n                done(shouldPOSTData, res, redirectHeader, pollingIntervalHint);\r\n            }\r\n            else {\r\n                this._onError(\"StatusCode:\" + res.statusCode + \" StatusMessage:\" + res.statusMessage);\r\n                done();\r\n            }\r\n        });\r\n\r\n        req.on(\"error\", (error: Error) => {\r\n            this._onError(error);\r\n            done();\r\n        });\r\n\r\n        req.write(payload);\r\n        req.end();\r\n    }\r\n\r\n    private _onError(error: Error | string) {\r\n        // Unable to contact qps endpoint.\r\n        // Do nothing for now.\r\n        this._consecutiveErrors++;\r\n        // LOG every error, but WARN instead when X number of consecutive errors occur\r\n        let notice = \"Transient error connecting to the Live Metrics endpoint. This packet will not appear in your Live Metrics Stream. Error:\";\r\n        if (this._consecutiveErrors % QuickPulseSender.MAX_QPS_FAILURES_BEFORE_WARN === 0) {\r\n            notice = `Live Metrics endpoint could not be reached ${this._consecutiveErrors} consecutive times. Most recent error:`;\r\n            Logging.warn(QuickPulseSender.TAG, notice, error);\r\n        } else {\r\n            // Potentially transient error, do not change the ping/post state yet.\r\n            Logging.info(QuickPulseSender.TAG, notice, error);\r\n        }\r\n    }\r\n}\r\n\r\nexport = QuickPulseSender;"]}