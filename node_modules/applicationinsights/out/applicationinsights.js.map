{"version":3,"file":"applicationinsights.js","sourceRoot":"","sources":["../applicationinsights.ts"],"names":[],"mappings":"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","sourcesContent":["import CorrelationContextManager = require(\"./AutoCollection/CorrelationContextManager\"); // Keep this first\r\nimport AutoCollectConsole = require(\"./AutoCollection/Console\");\r\nimport AutoCollectExceptions = require(\"./AutoCollection/Exceptions\");\r\nimport AutoCollectPerformance = require(\"./AutoCollection/Performance\");\r\nimport AutoCollecPreAggregatedMetrics = require(\"./AutoCollection/PreAggregatedMetrics\");\r\nimport HeartBeat = require(\"./AutoCollection/HeartBeat\");\r\nimport WebSnippet = require(\"./AutoCollection/WebSnippet\");\r\nimport AutoCollectHttpDependencies = require(\"./AutoCollection/HttpDependencies\");\r\nimport AutoCollectHttpRequests = require(\"./AutoCollection/HttpRequests\");\r\nimport CorrelationIdManager = require(\"./Library/CorrelationIdManager\");\r\nimport Logging = require(\"./Library/Logging\");\r\nimport QuickPulseClient = require(\"./Library/QuickPulseStateManager\");\r\nimport { IncomingMessage } from \"http\";\r\nimport { SpanContext } from \"@opentelemetry/api\";\r\nimport { AutoCollectNativePerformance, IDisabledExtendedMetrics } from \"./AutoCollection/NativePerformance\";\r\n\r\n// We export these imports so that SDK users may use these classes directly.\r\n// They're exposed using \"export import\" so that types are passed along as expected\r\nexport import TelemetryClient = require(\"./Library/NodeClient\");\r\nexport import Contracts = require(\"./Declarations/Contracts\");\r\nexport import azureFunctionsTypes = require(\"./Library/Functions\");\r\n\r\n\r\nexport enum DistributedTracingModes {\r\n    /**\r\n     * (Default) Send Application Insights correlation headers\r\n     */\r\n\r\n    AI = 0,\r\n\r\n    /**\r\n     * Send both W3C Trace Context headers and back-compatibility Application Insights headers\r\n     */\r\n    AI_AND_W3C\r\n}\r\n\r\n// Default autocollection configuration\r\nlet defaultConfig = _getDefaultAutoCollectConfig();\r\nlet _isConsole = defaultConfig.isConsole();\r\nlet _isConsoleLog = defaultConfig.isConsoleLog();\r\nlet _isExceptions = defaultConfig.isExceptions();\r\nlet _isPerformance = defaultConfig.isPerformance();\r\nlet _isPreAggregatedMetrics = defaultConfig.isPreAggregatedMetrics();\r\nlet _isHeartBeat = defaultConfig.isHeartBeat(); // off by default for now\r\nlet _isRequests = defaultConfig.isRequests();\r\nlet _isDependencies = defaultConfig.isDependencies();\r\nlet _isDiskRetry = defaultConfig.isDiskRetry();\r\nlet _isCorrelating = defaultConfig.isCorrelating();\r\nlet _forceClsHooked: boolean;\r\nlet _isSendingLiveMetrics = defaultConfig.isSendingLiveMetrics(); // Off by default\r\nlet _isNativePerformance = defaultConfig.isNativePerformance();\r\nlet _disabledExtendedMetrics: IDisabledExtendedMetrics;\r\nlet _isSnippetInjection = defaultConfig.isSnippetInjection(); // default to false\r\n\r\nfunction _getDefaultAutoCollectConfig() {\r\n    return {\r\n        isConsole: () => true,\r\n        isConsoleLog: () => false,\r\n        isExceptions: () => true,\r\n        isPerformance: () => true,\r\n        isPreAggregatedMetrics: () => true,\r\n        isHeartBeat: () => false, // off by default for now\r\n        isRequests: () => true,\r\n        isDependencies: () => true,\r\n        isDiskRetry: () => true,\r\n        isCorrelating: () => true,\r\n        isSendingLiveMetrics: () => false, // Off by default\r\n        isNativePerformance: () => true,\r\n        isSnippetInjection: () => false\r\n    }\r\n}\r\n\r\nlet _diskRetryInterval: number = undefined;\r\nlet _diskRetryMaxBytes: number = undefined;\r\nlet _webSnippetConnectionString: string = undefined;\r\n\r\nlet _console: AutoCollectConsole;\r\nlet _exceptions: AutoCollectExceptions;\r\nlet _performance: AutoCollectPerformance;\r\nlet _preAggregatedMetrics: AutoCollecPreAggregatedMetrics;\r\nlet _heartbeat: HeartBeat;\r\nlet _webSnippet: WebSnippet;\r\nlet _nativePerformance: AutoCollectNativePerformance;\r\nlet _serverRequests: AutoCollectHttpRequests;\r\nlet _clientRequests: AutoCollectHttpDependencies;\r\n\r\nlet _isStarted = false;\r\n\r\n/**\r\n* The default client, initialized when setup was called. To initialize a different client\r\n* with its own configuration, use `new TelemetryClient(instrumentationKey?)`.\r\n*/\r\nexport let defaultClient: TelemetryClient;\r\nexport let liveMetricsClient: QuickPulseClient;\r\nlet _performanceLiveMetrics: AutoCollectPerformance;\r\n\r\n/**\r\n * Initializes the default client. Should be called after setting\r\n * configuration options.\r\n *\r\n * @param setupString the Connection String or Instrumentation Key to use. Optional, if\r\n * this is not specified, the value will be read from the environment\r\n * variable APPLICATIONINSIGHTS_CONNECTION_STRING.\r\n * @returns {Configuration} the configuration class to initialize\r\n * and start the SDK.\r\n */\r\nexport function setup(setupString?: string) {\r\n    if (!defaultClient) {\r\n        defaultClient = new TelemetryClient(setupString);\r\n        _initializeConfig();\r\n        _console = new AutoCollectConsole(defaultClient);\r\n        _exceptions = new AutoCollectExceptions(defaultClient);\r\n        _performance = new AutoCollectPerformance(defaultClient);\r\n        _preAggregatedMetrics = new AutoCollecPreAggregatedMetrics(defaultClient);\r\n        _heartbeat = new HeartBeat(defaultClient);\r\n        _webSnippet = new WebSnippet(defaultClient);\r\n        _serverRequests = new AutoCollectHttpRequests(defaultClient);\r\n        _clientRequests = new AutoCollectHttpDependencies(defaultClient);\r\n        if (!_nativePerformance) {\r\n            _nativePerformance = new AutoCollectNativePerformance(defaultClient);\r\n        }\r\n    } else {\r\n        Logging.info(\"The default client is already setup\");\r\n    }\r\n\r\n    if (defaultClient && defaultClient.channel) {\r\n        defaultClient.channel.setUseDiskRetryCaching(_isDiskRetry, _diskRetryInterval, _diskRetryMaxBytes);\r\n    }\r\n\r\n    return Configuration;\r\n}\r\n\r\n/**\r\n * Starts automatic collection of telemetry. Prior to calling start no\r\n * telemetry will be *automatically* collected, though manual collection\r\n * is enabled.\r\n * @returns {ApplicationInsights} this class\r\n */\r\nexport function start() {\r\n    if (!!defaultClient) {\r\n        _isStarted = true;\r\n        _console.enable(_isConsole, _isConsoleLog);\r\n        _exceptions.enable(_isExceptions);\r\n        _performance.enable(_isPerformance);\r\n        _preAggregatedMetrics.enable(_isPreAggregatedMetrics);\r\n        _heartbeat.enable(_isHeartBeat);\r\n        _nativePerformance.enable(_isNativePerformance, _disabledExtendedMetrics);\r\n        _serverRequests.useAutoCorrelation(_isCorrelating, _forceClsHooked);\r\n        _serverRequests.enable(_isRequests);\r\n        _clientRequests.enable(_isDependencies);\r\n        _webSnippet.enable(_isSnippetInjection, _webSnippetConnectionString);\r\n        if (liveMetricsClient && _isSendingLiveMetrics) {\r\n            liveMetricsClient.enable(_isSendingLiveMetrics);\r\n        }\r\n    } else {\r\n        Logging.warn(\"Start cannot be called before setup\");\r\n    }\r\n\r\n    return Configuration;\r\n}\r\n\r\nfunction _initializeConfig() {\r\n    _isConsole = defaultClient.config.enableAutoCollectExternalLoggers !== undefined ? defaultClient.config.enableAutoCollectExternalLoggers : _isConsole;\r\n    _isConsoleLog = defaultClient.config.enableAutoCollectConsole !== undefined ? defaultClient.config.enableAutoCollectConsole : _isConsoleLog;\r\n    _isExceptions = defaultClient.config.enableAutoCollectExceptions !== undefined ? defaultClient.config.enableAutoCollectExceptions : _isExceptions;\r\n    _isPerformance = defaultClient.config.enableAutoCollectPerformance !== undefined ? defaultClient.config.enableAutoCollectPerformance : _isPerformance;\r\n    _isPreAggregatedMetrics = defaultClient.config.enableAutoCollectPreAggregatedMetrics !== undefined ? defaultClient.config.enableAutoCollectPreAggregatedMetrics : _isPreAggregatedMetrics;\r\n    _isHeartBeat = defaultClient.config.enableAutoCollectHeartbeat !== undefined ? defaultClient.config.enableAutoCollectHeartbeat : _isHeartBeat;\r\n    _isRequests = defaultClient.config.enableAutoCollectRequests !== undefined ? defaultClient.config.enableAutoCollectRequests : _isRequests;\r\n    _isDependencies = defaultClient.config.enableAutoDependencyCorrelation !== undefined ? defaultClient.config.enableAutoDependencyCorrelation : _isDependencies;\r\n    _isCorrelating = defaultClient.config.enableAutoDependencyCorrelation !== undefined ? defaultClient.config.enableAutoDependencyCorrelation : _isCorrelating;\r\n    _forceClsHooked = defaultClient.config.enableUseAsyncHooks !== undefined ? defaultClient.config.enableUseAsyncHooks : _forceClsHooked;\r\n    _isSnippetInjection = defaultClient.config.enableAutoWebSnippetInjection !== undefined ? defaultClient.config.enableAutoWebSnippetInjection : _isSnippetInjection;\r\n    const extendedMetricsConfig = AutoCollectNativePerformance.parseEnabled(defaultClient.config.enableAutoCollectExtendedMetrics, defaultClient.config);\r\n    _isNativePerformance = extendedMetricsConfig.isEnabled;\r\n    _disabledExtendedMetrics = extendedMetricsConfig.disabledMetrics;\r\n    \r\n}\r\n\r\n/**\r\n * Returns an object that is shared across all code handling a given request.\r\n * This can be used similarly to thread-local storage in other languages.\r\n * Properties set on this object will be available to telemetry processors.\r\n *\r\n * Do not store sensitive information here.\r\n * Custom properties set on this object can be exposed in a future SDK\r\n * release via outgoing HTTP headers.\r\n * This is to allow for correlating data cross-component.\r\n *\r\n * This method will return null if automatic dependency correlation is disabled.\r\n * @returns A plain object for request storage or null if automatic dependency correlation is disabled.\r\n */\r\nexport function getCorrelationContext(): CorrelationContextManager.CorrelationContext {\r\n    if (_isCorrelating) {\r\n        return CorrelationContextManager.CorrelationContextManager.getCurrentContext();\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * **(Experimental!)**\r\n * Starts a fresh context or propagates the current internal one.\r\n */\r\nexport function startOperation(context: SpanContext, name: string): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: azureFunctionsTypes.Context, request: azureFunctionsTypes.HttpRequest): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: azureFunctionsTypes.Context, name: string): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: IncomingMessage | azureFunctionsTypes.HttpRequest, request?: never): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: azureFunctionsTypes.Context | (IncomingMessage | azureFunctionsTypes.HttpRequest) | (SpanContext), request?: azureFunctionsTypes.HttpRequest | string): CorrelationContextManager.CorrelationContext | null {\r\n    return CorrelationContextManager.CorrelationContextManager.startOperation(context, request);\r\n}\r\n\r\n/**\r\n * Returns a function that will get the same correlation context within its\r\n * function body as the code executing this function.\r\n * Use this method if automatic dependency correlation is not propagating\r\n * correctly to an asynchronous callback.\r\n */\r\nexport function wrapWithCorrelationContext<T extends Function>(fn: T, context?: CorrelationContextManager.CorrelationContext): T {\r\n    return CorrelationContextManager.CorrelationContextManager.wrapCallback(fn, context);\r\n}\r\n\r\n/**\r\n * The active configuration for global SDK behaviors, such as autocollection.\r\n */\r\nexport class Configuration {\r\n    // Convenience shortcut to ApplicationInsights.start\r\n    public static start = start;\r\n\r\n    /**\r\n     * Sets the distributed tracing modes. If W3C mode is enabled, W3C trace context\r\n     * headers (traceparent/tracestate) will be parsed in all incoming requests, and included in outgoing\r\n     * requests. In W3C mode, existing back-compatibility AI headers will also be parsed and included.\r\n     * Enabling W3C mode will not break existing correlation with other Application Insights instrumented\r\n     * services. Default=AI\r\n    */\r\n    public static setDistributedTracingMode(value: DistributedTracingModes) {\r\n        CorrelationIdManager.w3cEnabled = value === DistributedTracingModes.AI_AND_W3C;\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of console and logger tracking (enabled by default for third-party loggers only)\r\n     * @param value if true logger activity will be sent to Application Insights\r\n     * @param collectConsoleLog if true, logger autocollection will include console.log calls (default false)\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectConsole(value: boolean, collectConsoleLog: boolean = false) {\r\n        _isConsole = value;\r\n        _isConsoleLog = collectConsoleLog;\r\n        if (_isStarted) {\r\n            _console.enable(value, collectConsoleLog);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of exception tracking (enabled by default)\r\n     * @param value if true uncaught exceptions will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectExceptions(value: boolean) {\r\n        _isExceptions = value;\r\n        if (_isStarted) {\r\n            _exceptions.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * @param value if true performance counters will be collected every second and sent to Application Insights\r\n     * @param collectExtendedMetrics if true, extended metrics counters will be collected every minute and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectPerformance(value: boolean, collectExtendedMetrics: boolean | IDisabledExtendedMetrics = true) {\r\n        _isPerformance = value;\r\n        const extendedMetricsConfig = AutoCollectNativePerformance.parseEnabled(collectExtendedMetrics, defaultClient.config);\r\n        _isNativePerformance = extendedMetricsConfig.isEnabled;\r\n        _disabledExtendedMetrics = extendedMetricsConfig.disabledMetrics;\r\n        if (_isStarted) {\r\n            _performance.enable(value);\r\n            _nativePerformance.enable(extendedMetricsConfig.isEnabled, extendedMetricsConfig.disabledMetrics);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of pre aggregated metrics tracking (enabled by default)\r\n     * @param value if true pre aggregated metrics will be collected every minute and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectPreAggregatedMetrics(value: boolean) {\r\n        _isPreAggregatedMetrics = value;\r\n        if (_isStarted) {\r\n            _preAggregatedMetrics.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * @param value if true HeartBeat metric data will be collected every 15 mintues and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectHeartbeat(value: boolean) {\r\n        _isHeartBeat = value;\r\n        if (_isStarted) {\r\n            _heartbeat.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of Web snippet injection\r\n     * @param value if true Web snippet will be tried to be injected in server response\r\n     * @param WebSnippetConnectionString if provided, web snippet injection will use this ConnectionString. Default to use the connectionString in Node.js app initialization\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static enableAutoWebSnippetInjection(value: boolean, WebSnippetConnectionString?: string ) {\r\n        _isSnippetInjection = value;\r\n        _webSnippetConnectionString = WebSnippetConnectionString;\r\n        if (_isStarted) {\r\n            _webSnippet.enable(value, _webSnippetConnectionString);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * @param value if true requests will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectRequests(value: boolean) {\r\n        _isRequests = value;\r\n        if (_isStarted) {\r\n            _serverRequests.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of dependency tracking (enabled by default)\r\n     * @param value if true dependencies will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectDependencies(value: boolean) {\r\n        _isDependencies = value;\r\n        if (_isStarted) {\r\n            _clientRequests.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of automatic dependency correlation (enabled by default)\r\n     * @param value if true dependencies will be correlated with requests\r\n     * @param useAsyncHooks if true, forces use of experimental async_hooks module to provide correlation. If false, instead uses only patching-based techniques. If left blank, the best option is chosen for you based on your version of Node.js.\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoDependencyCorrelation(value: boolean, useAsyncHooks?: boolean) {\r\n        _isCorrelating = value;\r\n        _forceClsHooked = useAsyncHooks;\r\n        if (_isStarted) {\r\n            _serverRequests.useAutoCorrelation(value, useAsyncHooks);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\r\n     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.\r\n     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).\r\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\r\n     * @param value if true events that occured while client is offline will be cached on disk\r\n     * @param resendInterval The wait interval for resending cached events.\r\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setUseDiskRetryCaching(value: boolean, resendInterval?: number, maxBytesOnDisk?: number) {\r\n        _isDiskRetry = value;\r\n        _diskRetryInterval = resendInterval;\r\n        _diskRetryMaxBytes = maxBytesOnDisk;\r\n        if (defaultClient && defaultClient.channel) {\r\n            defaultClient.channel.setUseDiskRetryCaching(_isDiskRetry, _diskRetryInterval, _diskRetryMaxBytes);\r\n        }\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enables debug and warning logging for AppInsights itself.\r\n     * @param enableDebugLogging if true, enables debug logging\r\n     * @param enableWarningLogging if true, enables warning logging\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setInternalLogging(enableDebugLogging = false, enableWarningLogging = true) {\r\n        Logging.enableDebug = enableDebugLogging;\r\n        Logging.disableWarnings = !enableWarningLogging;\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enables communication with Application Insights Live Metrics.\r\n     * @param enable if true, enables communication with the live metrics service\r\n     */\r\n    public static setSendLiveMetrics(enable = false) {\r\n        if (!defaultClient) {\r\n            // Need a defaultClient so that we can add the QPS telemetry processor to it\r\n            Logging.warn(\"Live metrics client cannot be setup without the default client\");\r\n            return Configuration;\r\n        }\r\n\r\n        if (!liveMetricsClient && enable) {\r\n            // No qps client exists. Create one and prepare it to be enabled at .start()\r\n            liveMetricsClient = new QuickPulseClient(defaultClient.config, defaultClient.context, defaultClient.getAuthorizationHandler);\r\n            _performanceLiveMetrics = new AutoCollectPerformance(liveMetricsClient as any, 1000, true);\r\n            liveMetricsClient.addCollector(_performanceLiveMetrics);\r\n            defaultClient.quickPulseClient = liveMetricsClient; // Need this so we can forward all manual tracks to live metrics via PerformanceMetricsTelemetryProcessor\r\n        } else if (liveMetricsClient) {\r\n            // qps client already exists; enable/disable it\r\n            liveMetricsClient.enable(enable);\r\n        }\r\n        _isSendingLiveMetrics = enable;\r\n        return Configuration;\r\n    }\r\n}\r\n\r\n/**\r\n * Disposes the default client and all the auto collectors so they can be reinitialized with different configuration\r\n*/\r\nexport function dispose() {\r\n    CorrelationIdManager.w3cEnabled = true; // reset to default\r\n    defaultClient = null;\r\n    _isStarted = false;\r\n    if (_console) {\r\n        _console.dispose();\r\n    }\r\n    if (_exceptions) {\r\n        _exceptions.dispose();\r\n    }\r\n    if (_performance) {\r\n        _performance.dispose();\r\n    }\r\n    if (_preAggregatedMetrics) {\r\n        _preAggregatedMetrics.dispose();\r\n    }\r\n    if (_heartbeat) {\r\n        _heartbeat.dispose();\r\n    }\r\n    if (_webSnippet) {\r\n        _webSnippet.dispose();\r\n    }\r\n    if (_nativePerformance) {\r\n        _nativePerformance.dispose();\r\n    }\r\n    if (_serverRequests) {\r\n        _serverRequests.dispose();\r\n    }\r\n    if (_clientRequests) {\r\n        _clientRequests.dispose();\r\n    }\r\n    if (liveMetricsClient) {\r\n        liveMetricsClient.enable(false);\r\n        _isSendingLiveMetrics = false;\r\n        liveMetricsClient = undefined;\r\n    }\r\n}"]}