{"version":3,"file":"Interfaces.js","sourceRoot":"","sources":["../../Declarations/Interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import http = require(\"http\");\r\nimport https = require(\"https\");\r\nimport azureCore = require(\"@azure/core-http\");\r\nimport { DistributedTracingModes } from \"../applicationinsights\";\r\nimport { IDisabledExtendedMetrics } from \"../AutoCollection/NativePerformance\";\r\n\r\n\r\nexport interface IBaseConfig {\r\n    /** Application Insights resource instrumentation key */\r\n    instrumentationKey: string;\r\n    /** The ingestion endpoint to send telemetry payloads to */\r\n    endpointUrl: string;\r\n    /** The maximum number of telemetry items to include in a payload to the ingestion endpoint (Default 250) */\r\n    maxBatchSize: number;\r\n    /** The maximum amount of time to wait for a payload to reach maxBatchSize (Default 15000) */\r\n    maxBatchIntervalMs: number;\r\n    /** A flag indicating if telemetry transmission is disabled (Default false) */\r\n    disableAppInsights: boolean;\r\n    /** The percentage of telemetry items tracked that should be transmitted (Default 100) */\r\n    samplingPercentage: number;\r\n    /** The time to wait before retrying to retrieve the id for cross-component correlation (Default 30000) */\r\n    correlationIdRetryIntervalMs: number;\r\n    /** A list of domains to exclude from cross-component header injection */\r\n    correlationHeaderExcludedDomains: string[];\r\n    /** A proxy server for SDK HTTP traffic (Optional, Default pulled from `http_proxy` environment variable) */\r\n    proxyHttpUrl: string;\r\n    /** A proxy server for SDK HTTPS traffic (Optional, Default pulled from `https_proxy` environment variable) */\r\n    proxyHttpsUrl: string;\r\n    /** Disable including legacy headers in outgoing requests, x-ms-request-id */\r\n    ignoreLegacyHeaders: boolean;\r\n    /**\r\n     * Sets the distributed tracing modes. If W3C mode is enabled, W3C trace context\r\n     * headers (traceparent/tracestate) will be parsed in all incoming requests, and included in outgoing\r\n     * requests. In W3C mode, existing back-compatibility AI headers will also be parsed and included.\r\n     * Enabling W3C mode will not break existing correlation with other Application Insights instrumented\r\n     * services. Default=AI\r\n    */\r\n    distributedTracingMode: DistributedTracingModes;\r\n    /**\r\n     * Sets the state of console\r\n     * if true logger activity will be sent to Application Insights\r\n     */\r\n    enableAutoCollectExternalLoggers: boolean;\r\n    /**\r\n     * Sets the state of logger tracking (enabled by default for third-party loggers only)\r\n     * if true, logger autocollection will include console.log calls (default false)\r\n     */\r\n    enableAutoCollectConsole: boolean;\r\n    /**\r\n     * Sets the state of exception tracking (enabled by default)\r\n     * if true uncaught exceptions will be sent to Application Insights\r\n     */\r\n    enableAutoCollectExceptions: boolean;\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * if true performance counters will be collected every second and sent to Application Insights\r\n     */\r\n    enableAutoCollectPerformance: boolean;\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * if true, extended metrics counters will be collected every minute and sent to Application Insights\r\n     */\r\n    enableAutoCollectExtendedMetrics: boolean | IDisabledExtendedMetrics;\r\n    /**\r\n     * Sets the state of pre aggregated metrics tracking (enabled by default)\r\n     * if true pre aggregated metrics will be collected every minute and sent to Application Insights\r\n     */\r\n    enableAutoCollectPreAggregatedMetrics: boolean;\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * if true HeartBeat metric data will be collected every 15 minutes and sent to Application Insights\r\n     */\r\n    enableAutoCollectHeartbeat: boolean;\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * if true requests will be sent to Application Insights\r\n     */\r\n    enableAutoCollectRequests: boolean;\r\n    /**\r\n     * Sets the state of dependency tracking (enabled by default)\r\n     * if true dependencies will be sent to Application Insights\r\n     */\r\n    enableAutoCollectDependencies: boolean;\r\n    /**\r\n     * Sets the state of automatic dependency correlation (enabled by default)\r\n     * if true dependencies will be correlated with requests\r\n     */\r\n    enableAutoDependencyCorrelation: boolean;\r\n    /**\r\n     * Sets the state of automatic dependency correlation (enabled by default)\r\n     * if true, forces use of experimental async_hooks module to provide correlation. If false, instead uses only patching-based techniques. If left blank, the best option is chosen for you based on your version of Node.js.\r\n     */\r\n    enableUseAsyncHooks: boolean;\r\n    /**\r\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\r\n     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.\r\n     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).\r\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\r\n     * enableUseDiskRetryCaching if true events that occured while client is offline will be cached on disk\r\n     * enableResendInterval The wait interval for resending cached events.\r\n     * enableMaxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\r\n     */\r\n    enableUseDiskRetryCaching: boolean;\r\n    enableResendInterval: number;\r\n    enableMaxBytesOnDisk: number;\r\n    /**\r\n     * Enables debug and warning logging for AppInsights itself.\r\n     * if true, enables debug logging\r\n     */\r\n    enableInternalDebugLogging: boolean;\r\n    /**\r\n     * Enables debug and warning logging for AppInsights itself.\r\n     * if true, enables warning logging\r\n     */\r\n    enableInternalWarningLogging: boolean;\r\n    /**\r\n    * Enables communication with Application Insights Live Metrics.\r\n    * if true, enables communication with the live metrics service\r\n    */\r\n    enableSendLiveMetrics: boolean;\r\n    /**\r\n    * Disable all environment variables set\r\n    */\r\n    disableAllExtendedMetrics: boolean;\r\n    /**\r\n    * Disable individual environment variables set. eg. \"extendedMetricDisablers\": \"...\"\r\n    */\r\n    extendedMetricDisablers: string;\r\n    /**\r\n    * Disable Statsbeat\r\n    */\r\n    disableStatsbeat: boolean;\r\n    /**\r\n    * Live Metrics custom host\r\n    */\r\n    quickPulseHost: string;\r\n    /**\r\n     * Enable web snippet auto html injection, default to false\r\n     */\r\n     enableAutoWebSnippetInjection: boolean;\r\n    /**\r\n     * Application Insights resource connection string for web snippet\r\n     * Note: if no valid connection string is provided here, web snippet will use the connection string during initializing Nodejs SDK\r\n     */\r\n    webSnippetConnectionString?: string;\r\n}\r\n\r\nexport interface IEnvironmentConfig {\r\n    /** Connection String used to send telemetry payloads to */\r\n    connectionString: string;\r\n    /**\r\n    * In order to track context across asynchronous calls,\r\n    * some changes are required in third party libraries such as mongodb and redis.\r\n    * By default ApplicationInsights will use diagnostic-channel-publishers to monkey-patch some of these libraries.\r\n    * This property is to disable the feature.\r\n    * Note that by setting this flag, events may no longer be correctly associated with the right operation.\r\n    */\r\n    noDiagnosticChannel: boolean;\r\n    /**\r\n    * Disable individual monkey-patches.\r\n    * Set `noPatchModules` to a comma separated list of packages to disable.\r\n    * e.g. `\"noPatchModules\": \"console,redis\"` to avoid patching the console and redis packages.\r\n    * The following modules are available: `azuresdk, bunyan, console, mongodb, mongodb-core, mysql, redis, winston, pg`, and `pg-pool`.\r\n    */\r\n    noPatchModules: string;\r\n    /**\r\n    * HTTPS without a passed in agent\r\n    */\r\n    noHttpAgentKeepAlive: boolean;\r\n}\r\n\r\nexport interface IJsonConfig extends IBaseConfig, IEnvironmentConfig { }\r\n\r\nexport interface IConfig extends IBaseConfig {\r\n    /** An http.Agent to use for SDK HTTP traffic (Optional, Default undefined) */\r\n    httpAgent: http.Agent;\r\n    /** An https.Agent to use for SDK HTTPS traffic (Optional, Default undefined) */\r\n    httpsAgent: https.Agent;\r\n    /** AAD TokenCredential to use to authenticate the app */\r\n    aadTokenCredential?: azureCore.TokenCredential;\r\n}\r\n"]}