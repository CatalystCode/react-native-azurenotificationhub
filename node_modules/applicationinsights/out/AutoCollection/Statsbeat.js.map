{"version":3,"file":"Statsbeat.js","sourceRoot":"","sources":["../../AutoCollection/Statsbeat.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\r\nimport EnvelopeFactory = require(\"../Library/EnvelopeFactory\");\r\nimport Logging = require(\"../Library/Logging\");\r\nimport Sender = require(\"../Library/Sender\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Contracts = require(\"../Declarations/Contracts\");\r\nimport Vm = require(\"../Library/AzureVirtualMachine\");\r\nimport Config = require(\"../Library/Config\");\r\nimport Context = require(\"../Library/Context\");\r\nimport Network = require(\"./NetworkStatsbeat\");\r\nimport Util = require(\"../Library/Util\");\r\n\r\nconst STATSBEAT_LANGUAGE = \"node\";\r\n\r\nclass Statsbeat {\r\n\r\n    public static NON_EU_CONNECTION_STRING = \"InstrumentationKey=c4a29126-a7cb-47e5-b348-11414998b11e;IngestionEndpoint=https://westus-0.in.applicationinsights.azure.com\";\r\n    public static EU_CONNECTION_STRING = \"InstrumentationKey=7dc56bab-3c0c-4e9f-9ebb-d1acadee8d0f;IngestionEndpoint=https://westeurope-5.in.applicationinsights.azure.com\";\r\n    public static STATS_COLLECTION_SHORT_INTERVAL: number = 900000; // 15 minutes\r\n    public static STATS_COLLECTION_LONG_INTERVAL: number = 86400000; // 1 day\r\n\r\n    private static TAG = \"Statsbeat\";\r\n\r\n    private _networkStatsbeatCollection: Array<Network.NetworkStatsbeat>;\r\n    private _sender: Sender;\r\n    private _context: Context;\r\n    private _handle: NodeJS.Timer | null;\r\n    private _longHandle: NodeJS.Timer | null;\r\n    private _isEnabled: boolean;\r\n    private _isInitialized: boolean;\r\n    private _config: Config;\r\n    private _statsbeatConfig: Config;\r\n    private _isVM: boolean | undefined;\r\n    private _statbeatMetrics: Array<{ name: string; value: number, properties: {} }>;\r\n\r\n    // Custom dimensions\r\n    private _resourceProvider: string;\r\n    private _resourceIdentifier: string;\r\n    private _sdkVersion: string;\r\n    private _runtimeVersion: string;\r\n    private _os: string;\r\n    private _language: string;\r\n    private _cikey: string;\r\n    private _attach: string = Constants.StatsbeatAttach.sdk; // Default is SDK\r\n    private _feature: number = Constants.StatsbeatFeature.NONE;\r\n    private _instrumentation: number = Constants.StatsbeatInstrumentation.NONE;\r\n\r\n    constructor(config: Config, context?: Context) {\r\n        this._isInitialized = false;\r\n        this._statbeatMetrics = [];\r\n        this._networkStatsbeatCollection = [];\r\n        this._config = config;\r\n        this._context = context || new Context();\r\n        let statsbeatConnectionString = this._getConnectionString(config);\r\n        this._statsbeatConfig = new Config(statsbeatConnectionString);\r\n        this._statsbeatConfig.samplingPercentage = 100; // Do not sample\r\n        this._sender = new Sender(this._statsbeatConfig, null, null, null, null, true, this._shutdownStatsbeat.bind(this));\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        this._isEnabled = isEnabled;\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._getCustomProperties();\r\n            this._isInitialized = true;\r\n        }\r\n        if (isEnabled) {\r\n            if (!this._handle) {\r\n                this._handle = setInterval(() => {\r\n                    this.trackShortIntervalStatsbeats();\r\n                }, Statsbeat.STATS_COLLECTION_SHORT_INTERVAL);\r\n                this._handle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n            if (!this._longHandle) {\r\n                // On first enablement\r\n                this.trackLongIntervalStatsbeats();\r\n                this._longHandle = setInterval(() => {\r\n                    this.trackLongIntervalStatsbeats();\r\n                }, Statsbeat.STATS_COLLECTION_LONG_INTERVAL);\r\n                this._longHandle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n        } else {\r\n            if (this._handle) {\r\n                clearInterval(this._handle);\r\n                this._handle = null;\r\n            }\r\n            if (this._longHandle) {\r\n                clearInterval(this._longHandle);\r\n                this._longHandle = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public isEnabled() {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public setCodelessAttach() {\r\n        this._attach = Constants.StatsbeatAttach.codeless;\r\n    }\r\n\r\n    public addFeature(feature: Constants.StatsbeatFeature) {\r\n        this._feature |= feature;\r\n    }\r\n\r\n    public removeFeature(feature: Constants.StatsbeatFeature) {\r\n        this._feature &= ~feature;\r\n    }\r\n\r\n    public addInstrumentation(instrumentation: Constants.StatsbeatInstrumentation) {\r\n        this._instrumentation |= instrumentation;\r\n    }\r\n\r\n    public removeInstrumentation(instrumentation: Constants.StatsbeatInstrumentation) {\r\n        this._instrumentation &= ~instrumentation;\r\n    }\r\n\r\n    public countRequest(endpoint: number, host: string, duration: number, success: boolean, statusCode?: number) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(endpoint, host);\r\n        counter.totalRequestCount++;\r\n        counter.intervalRequestExecutionTime += duration;\r\n        if (success === false) {\r\n            if (!statusCode) {\r\n                return;\r\n            }\r\n            let currentStatusCounter = counter.totalFailedRequestCount.find((statusCounter) => statusCode === statusCounter.statusCode);\r\n            if (currentStatusCounter) {\r\n                currentStatusCounter.count++;\r\n            } else {\r\n                counter.totalFailedRequestCount.push({ statusCode: statusCode, count: 1 });\r\n            }\r\n        }\r\n        else {\r\n            counter.totalSuccesfulRequestCount++;\r\n        }\r\n    }\r\n\r\n    public countException(endpoint: number, host: string, exceptionType: Error) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(endpoint, host);\r\n        let currentErrorCounter = counter.exceptionCount.find((exceptionCounter) => exceptionType.name === exceptionCounter.exceptionType);\r\n        if (currentErrorCounter) {\r\n            currentErrorCounter.count++;\r\n        } else {\r\n            counter.exceptionCount.push({ exceptionType: exceptionType.name, count: 1 });\r\n        }\r\n    }\r\n\r\n    public countThrottle(endpoint: number, host: string, statusCode: number) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(endpoint, host);\r\n        let currentStatusCounter = counter.throttleCount.find((statusCounter) => statusCode === statusCounter.statusCode);\r\n        if (currentStatusCounter) {\r\n            currentStatusCounter.count++;\r\n        } else {\r\n            counter.throttleCount.push({ statusCode: statusCode, count: 1 });\r\n        }\r\n    }\r\n\r\n    public countRetry(endpoint: number, host: string, statusCode: number) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(endpoint, host);\r\n        let currentStatusCounter = counter.retryCount.find((statusCounter) => statusCode === statusCounter.statusCode);\r\n        if (currentStatusCounter) {\r\n            currentStatusCounter.count++;\r\n        } else {\r\n            counter.retryCount.push({ statusCode: statusCode, count: 1 });\r\n        }\r\n    }\r\n\r\n    public async trackShortIntervalStatsbeats() {\r\n        try {\r\n            await this._getResourceProvider();\r\n            let networkProperties = {\r\n                \"os\": this._os,\r\n                \"rp\": this._resourceProvider,\r\n                \"cikey\": this._cikey,\r\n                \"runtimeVersion\": this._runtimeVersion,\r\n                \"language\": this._language,\r\n                \"version\": this._sdkVersion,\r\n                \"attach\": this._attach\r\n            }\r\n            this._trackRequestDuration(networkProperties);\r\n            this._trackRequestsCount(networkProperties);\r\n            await this._sendStatsbeats();\r\n        }\r\n        catch (error) {\r\n            Logging.info(Statsbeat.TAG, \"Failed to send Statsbeat metrics: \" + Util.dumpObj(error));\r\n        }\r\n    }\r\n\r\n    public async trackLongIntervalStatsbeats() {\r\n        try {\r\n            await this._getResourceProvider();\r\n            let commonProperties = {\r\n                \"os\": this._os,\r\n                \"rp\": this._resourceProvider,\r\n                \"cikey\": this._cikey,\r\n                \"runtimeVersion\": this._runtimeVersion,\r\n                \"language\": this._language,\r\n                \"version\": this._sdkVersion,\r\n                \"attach\": this._attach\r\n            };\r\n            let attachProperties = Object.assign({\r\n                \"rpId\": this._resourceIdentifier\r\n            }, commonProperties);\r\n            this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.ATTACH, value: 1, properties: attachProperties });\r\n            if (this._instrumentation != Constants.StatsbeatInstrumentation.NONE) {// Only send if there are some instrumentations enabled\r\n                let instrumentationProperties = Object.assign({ \"feature\": this._instrumentation, \"type\": Constants.StatsbeatFeatureType.Instrumentation }, commonProperties);\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.FEATURE, value: 1, properties: instrumentationProperties });\r\n            }\r\n            if (this._feature != Constants.StatsbeatFeature.NONE) {// Only send if there are some features enabled\r\n                let featureProperties = Object.assign({ \"feature\": this._feature, \"type\": Constants.StatsbeatFeatureType.Feature }, commonProperties);\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.FEATURE, value: 1, properties: featureProperties });\r\n            }\r\n            await this._sendStatsbeats();\r\n        }\r\n        catch (error) {\r\n            Logging.info(Statsbeat.TAG, \"Failed to send Statsbeat metrics: \" + Util.dumpObj(error));\r\n        }\r\n    }\r\n\r\n    private _getNetworkStatsbeatCounter(endpoint: number, host: string): Network.NetworkStatsbeat {\r\n        let shortHost = this._getShortHost(host);\r\n        // Check if counter is available\r\n        for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\r\n            // Same object\r\n            if (endpoint === this._networkStatsbeatCollection[i].endpoint &&\r\n                shortHost === this._networkStatsbeatCollection[i].host) {\r\n                return this._networkStatsbeatCollection[i];\r\n            }\r\n        }\r\n        // Create a new one if not found\r\n        let newCounter = new Network.NetworkStatsbeat(endpoint, shortHost);\r\n        this._networkStatsbeatCollection.push(newCounter);\r\n        return newCounter;\r\n    }\r\n\r\n    private _trackRequestDuration(commonProperties: {}) {\r\n        for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\r\n            var currentCounter = this._networkStatsbeatCollection[i];\r\n            currentCounter.time = +new Date;\r\n            var intervalRequests = (currentCounter.totalRequestCount - currentCounter.lastRequestCount) || 0;\r\n            var averageRequestExecutionTime = ((currentCounter.intervalRequestExecutionTime - currentCounter.lastIntervalRequestExecutionTime) / intervalRequests) || 0;\r\n            currentCounter.lastIntervalRequestExecutionTime = currentCounter.intervalRequestExecutionTime; // reset\r\n            if (intervalRequests > 0) {\r\n                // Add extra properties\r\n                let properties = Object.assign(\r\n                    {\r\n                        \"endpoint\": this._networkStatsbeatCollection[i].endpoint,\r\n                        \"host\": this._networkStatsbeatCollection[i].host\r\n                    },\r\n                    commonProperties\r\n                );\r\n                this._statbeatMetrics.push({\r\n                    name: Constants.StatsbeatCounter.REQUEST_DURATION,\r\n                    value: averageRequestExecutionTime,\r\n                    properties: properties\r\n                });\r\n            }\r\n            // Set last counters\r\n            currentCounter.lastRequestCount = currentCounter.totalRequestCount;\r\n            currentCounter.lastTime = currentCounter.time;\r\n        }\r\n    }\r\n\r\n    private _getShortHost(originalHost: string) {\r\n        let shortHost = originalHost;\r\n        try {\r\n            let hostRegex = new RegExp(/^https?:\\/\\/(?:www\\.)?([^\\/.-]+)/);\r\n            let res = hostRegex.exec(originalHost);\r\n            if (res != null && res.length > 1) {\r\n                shortHost = res[1];\r\n            }\r\n        }\r\n        catch (error) {\r\n            // Ignore error\r\n        }\r\n        return shortHost;\r\n    }\r\n\r\n    private _trackRequestsCount(commonProperties: {}) {\r\n        for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\r\n            var currentCounter = this._networkStatsbeatCollection[i];\r\n            let properties = Object.assign(\r\n                { \"endpoint\": currentCounter.endpoint, \"host\": currentCounter.host },\r\n                commonProperties\r\n            );\r\n            if (currentCounter.totalSuccesfulRequestCount > 0) {\r\n                this._statbeatMetrics.push({\r\n                        name: Constants.StatsbeatCounter.REQUEST_SUCCESS,\r\n                        value: currentCounter.totalSuccesfulRequestCount,\r\n                        properties: properties\r\n                });\r\n                currentCounter.totalSuccesfulRequestCount = 0; //Reset\r\n            }\r\n            if (currentCounter.totalFailedRequestCount.length > 0) {\r\n                currentCounter.totalFailedRequestCount.forEach((currentCounter) => {\r\n                    properties = Object.assign({ ...properties, \"statusCode\": currentCounter.statusCode });\r\n                    this._statbeatMetrics.push({\r\n                        name: Constants.StatsbeatCounter.REQUEST_FAILURE,\r\n                        value: currentCounter.count,\r\n                        properties: properties\r\n                    });\r\n                });\r\n                currentCounter.totalFailedRequestCount = []; //Reset\r\n            }\r\n            if (currentCounter.retryCount.length > 0) {\r\n                currentCounter.retryCount.forEach((currentCounter) => {\r\n                    properties = Object.assign({ ...properties, \"statusCode\": currentCounter.statusCode });\r\n                    this._statbeatMetrics.push({\r\n                        name: Constants.StatsbeatCounter.RETRY_COUNT,\r\n                        value: currentCounter.count,\r\n                        properties: properties\r\n                    });\r\n                });\r\n                currentCounter.retryCount = []; //Reset\r\n            }\r\n            if (currentCounter.throttleCount.length > 0) {\r\n                currentCounter.throttleCount.forEach((currentCounter) => {\r\n                    properties = Object.assign({ ...properties, \"statusCode\": currentCounter.statusCode });\r\n                    this._statbeatMetrics.push({\r\n                        name: Constants.StatsbeatCounter.THROTTLE_COUNT,\r\n                        value: currentCounter.count,\r\n                        properties: properties\r\n                    });\r\n                });\r\n                currentCounter.throttleCount = []; //Reset\r\n            }\r\n            if (currentCounter.exceptionCount.length > 0) {\r\n                currentCounter.exceptionCount.forEach((currentCounter) => {\r\n                    properties = Object.assign({ ...properties, \"exceptionType\": currentCounter.exceptionType });\r\n                    this._statbeatMetrics.push({\r\n                        name: Constants.StatsbeatCounter.EXCEPTION_COUNT,\r\n                        value: currentCounter.count,\r\n                        properties: properties\r\n                    });\r\n                });\r\n                currentCounter.exceptionCount = []; //Reset\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _sendStatsbeats() {\r\n        let envelopes: Array<Contracts.Envelope> = [];\r\n        for (let i = 0; i < this._statbeatMetrics.length; i++) {\r\n            let statsbeat: Contracts.MetricTelemetry = {\r\n                name: this._statbeatMetrics[i].name,\r\n                value: this._statbeatMetrics[i].value,\r\n                properties: this._statbeatMetrics[i].properties\r\n            };\r\n            let envelope = EnvelopeFactory.createEnvelope(statsbeat, Contracts.TelemetryType.Metric, null, this._context, this._statsbeatConfig);\r\n            envelope.name = Constants.StatsbeatTelemetryName;\r\n            envelopes.push(envelope);\r\n        }\r\n        this._statbeatMetrics = [];\r\n        await this._sender.send(envelopes);\r\n    }\r\n\r\n    private _getCustomProperties() {\r\n        this._language = STATSBEAT_LANGUAGE;\r\n        this._cikey = this._config.instrumentationKey;\r\n        this._sdkVersion = Context.sdkVersion; // \"node\" or \"node-nativeperf\"\r\n        this._os = os.type();\r\n        this._runtimeVersion = process.version;\r\n    }\r\n\r\n    private _getResourceProvider(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            // Check resource provider\r\n            let waiting: boolean = false;\r\n            this._resourceProvider = Constants.StatsbeatResourceProvider.unknown;\r\n            this._resourceIdentifier = Constants.StatsbeatResourceProvider.unknown;\r\n            if (process.env.WEBSITE_SITE_NAME) { // Web apps\r\n                this._resourceProvider = Constants.StatsbeatResourceProvider.appsvc;\r\n                this._resourceIdentifier = process.env.WEBSITE_SITE_NAME;\r\n                if (process.env.WEBSITE_HOME_STAMPNAME) {\r\n                    this._resourceIdentifier += \"/\" + process.env.WEBSITE_HOME_STAMPNAME;\r\n                }\r\n            } else if (process.env.FUNCTIONS_WORKER_RUNTIME) { // Function apps\r\n                this._resourceProvider = Constants.StatsbeatResourceProvider.functions;\r\n                if (process.env.WEBSITE_HOSTNAME) {\r\n                    this._resourceIdentifier = process.env.WEBSITE_HOSTNAME;\r\n                }\r\n            } else if (this._config) {\r\n                if (this._isVM === undefined || this._isVM == true) {\r\n                    waiting = true;\r\n                    Vm.AzureVirtualMachine.getAzureComputeMetadata(this._config, (vmInfo) => {\r\n                        this._isVM = vmInfo.isVM;\r\n                        if (this._isVM) {\r\n                            this._resourceProvider = Constants.StatsbeatResourceProvider.vm;\r\n                            this._resourceIdentifier = vmInfo.id + \"/\" + vmInfo.subscriptionId;\r\n                            // Override OS as VM info have higher precedence\r\n                            if (vmInfo.osType) {\r\n                                this._os = vmInfo.osType;\r\n                            }\r\n                        }\r\n                        resolve();\r\n                    });\r\n                } else {\r\n                    this._resourceProvider = Constants.StatsbeatResourceProvider.unknown;\r\n                }\r\n            }\r\n            if (!waiting) {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _shutdownStatsbeat() {\r\n        this.enable(false);// Disable Statsbeat as is it failed 3 times cosnecutively during initialization, is possible SDK is running in private or restricted network \r\n    }\r\n\r\n    private _getConnectionString(config: Config): string {\r\n        let currentEndpoint = config.endpointUrl;\r\n        let euEndpoints = [\r\n            \"westeurope\",\r\n            \"northeurope\",\r\n            \"francecentral\",\r\n            \"francesouth\",\r\n            \"germanywestcentral\",\r\n            \"norwayeast\",\r\n            \"norwaywest\",\r\n            \"swedencentral\",\r\n            \"switzerlandnorth\",\r\n            \"switzerlandwest\"\r\n        ];\r\n        for (let i = 0; i < euEndpoints.length; i++) {\r\n            if (currentEndpoint.indexOf(euEndpoints[i]) > -1) {\r\n                return Statsbeat.EU_CONNECTION_STRING;\r\n            }\r\n        }\r\n        return Statsbeat.NON_EU_CONNECTION_STRING;\r\n    }\r\n}\r\n\r\nexport = Statsbeat;\r\n"]}