{"version":3,"file":"HttpDependencyParser.js","sourceRoot":"","sources":["../../AutoCollection/HttpDependencyParser.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\r\nimport https = require(\"https\");\r\nimport url = require(\"url\");\r\nimport Contracts = require(\"../Declarations/Contracts\");\r\nimport Util = require(\"../Library/Util\");\r\nimport RequestResponseHeaders = require(\"../Library/RequestResponseHeaders\");\r\nimport RequestParser = require(\"./RequestParser\");\r\nimport CorrelationIdManager = require(\"../Library/CorrelationIdManager\");\r\n\r\n/**\r\n * Helper class to read data from the request/response objects and convert them into the telemetry contract\r\n */\r\nclass HttpDependencyParser extends RequestParser {\r\n    private correlationId: string;\r\n\r\n    constructor(requestOptions: object | string | http.RequestOptions | https.RequestOptions, request: http.ClientRequest) {\r\n        super();\r\n        if (request && (<any>request).method && requestOptions) {\r\n            // The ClientRequest.method property isn't documented, but is always there.\r\n            this.method = (<any>request).method;\r\n\r\n            this.url = HttpDependencyParser._getUrlFromRequestOptions(requestOptions, request);\r\n            this.startTime = +new Date();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the ClientRequest emits an error event.\r\n     */\r\n    public onError(error: Error) {\r\n        this._setStatus(undefined, error);\r\n    }\r\n\r\n    /**\r\n     * Called when the ClientRequest emits a response event.\r\n     */\r\n    public onResponse(response: http.ClientResponse) {\r\n        this._setStatus(response.statusCode, undefined);\r\n        this.correlationId = Util.getCorrelationContextTarget(response, RequestResponseHeaders.requestContextTargetKey);\r\n    }\r\n\r\n    /**\r\n     * Gets a dependency data contract object for a completed ClientRequest.\r\n     */\r\n    public getDependencyTelemetry(baseTelemetry?: Contracts.Telemetry, dependencyId?: string): Contracts.DependencyTelemetry {\r\n        let dependencyName = this.method.toUpperCase();\r\n        let remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_HTTP;\r\n        let remoteDependencyTarget = \"\";\r\n        try {\r\n            let urlObject = new url.URL(this.url);\r\n            urlObject.search = undefined;\r\n            urlObject.hash = undefined;\r\n            dependencyName += \" \" + urlObject.pathname;\r\n            remoteDependencyTarget = urlObject.hostname;\r\n            if (urlObject.port) {\r\n                remoteDependencyTarget += \":\" + urlObject.port;\r\n            }\r\n\r\n        }\r\n        catch (ex) { // Invalid URL\r\n            // Ignore error\r\n        }\r\n        if (this.correlationId) {\r\n            remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_AI;\r\n            if (this.correlationId !== CorrelationIdManager.correlationIdPrefix) {\r\n                remoteDependencyTarget += \" | \" + this.correlationId;\r\n            }\r\n        } else {\r\n            remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_HTTP;\r\n        }\r\n\r\n        var dependencyTelemetry: Contracts.DependencyTelemetry & Contracts.Identified = {\r\n            id: dependencyId,\r\n            name: dependencyName,\r\n            data: this.url,\r\n            duration: this.duration,\r\n            success: this._isSuccess(),\r\n            resultCode: this.statusCode ? this.statusCode.toString() : null,\r\n            properties: this.properties || {},\r\n            dependencyTypeName: remoteDependencyType,\r\n            target: remoteDependencyTarget\r\n        };\r\n\r\n        if (baseTelemetry && baseTelemetry.time) {\r\n            dependencyTelemetry.time = baseTelemetry.time;\r\n        } else if (this.startTime) {\r\n            dependencyTelemetry.time = new Date(this.startTime);\r\n        }\r\n\r\n        // We should keep any parameters the user passed in\r\n        // Except the fields defined above in requestTelemetry, which take priority\r\n        // Except the properties field, where they're merged instead, with baseTelemetry taking priority\r\n        if (baseTelemetry) {\r\n            // Copy missing fields\r\n            for (let key in baseTelemetry) {\r\n                if (!(<any>dependencyTelemetry)[key]) {\r\n                    (<any>dependencyTelemetry)[key] = (<any>baseTelemetry)[key];\r\n                }\r\n            }\r\n            // Merge properties\r\n            if (baseTelemetry.properties) {\r\n                for (let key in baseTelemetry.properties) {\r\n                    dependencyTelemetry.properties[key] = baseTelemetry.properties[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return dependencyTelemetry;\r\n    }\r\n\r\n    /**\r\n     * Builds a URL from request options, using the same logic as http.request(). This is\r\n     * necessary because a ClientRequest object does not expose a url property.\r\n     */\r\n    private static _getUrlFromRequestOptions(options: any, request: http.ClientRequest) {\r\n        if (typeof options === \"string\") {\r\n            if (options.indexOf(\"http://\") === 0 || options.indexOf(\"https://\") === 0) {\r\n                // protocol exists, parse normally\r\n                try {\r\n                    options = new url.URL(options);\r\n                }\r\n                catch (ex) {\r\n                    // Ignore error\r\n                }\r\n            } else {\r\n                // protocol not found, insert http/https where appropriate\r\n                try {\r\n                    const parsed = new url.URL(\"http://\" + options);\r\n                    if (parsed.port === \"443\") {\r\n                        options = new url.URL(\"https://\" + options);\r\n                    } else {\r\n                        options = new url.URL(\"http://\" + options);\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    // Ignore error\r\n                }\r\n            }\r\n        } else if (options && typeof url.URL === \"function\" && options instanceof url.URL) {\r\n            return url.format(options);\r\n        } else {\r\n            // Avoid modifying the original options object.\r\n            let originalOptions = options;\r\n            options = {};\r\n            if (originalOptions) {\r\n                Object.keys(originalOptions).forEach(key => {\r\n                    options[key] = originalOptions[key];\r\n                });\r\n            }\r\n        }\r\n\r\n        // Oddly, url.format ignores path and only uses pathname and search,\r\n        // so create them from the path, if path was specified\r\n        if (options.path && options.host) {\r\n            // need to force a protocol to make parameter valid - base url is required when input is a relative url\r\n            try {\r\n                const parsedQuery = new url.URL(options.path, \"http://\" + options.host + options.path);\r\n                options.pathname = parsedQuery.pathname;\r\n                options.search = parsedQuery.search;\r\n            }\r\n            catch (ex) {\r\n                // Ignore error\r\n            }\r\n        }\r\n\r\n        // Sometimes the hostname is provided but not the host\r\n        // Add in the path when this occurs\r\n        if (options.path && options.hostname && !options.host) {\r\n            // need to force a protocol to make parameter valid - base url is required when input is a relative url\r\n            try {\r\n                const parsedQuery = new url.URL(options.path, \"http://\" + options.hostname + options.path);\r\n                options.pathname = parsedQuery.pathname;\r\n                options.search = parsedQuery.search;\r\n            }\r\n            catch (ex) {\r\n                // Ignore error\r\n            }\r\n        }\r\n\r\n        // Similarly, url.format ignores hostname and port if host is specified,\r\n        // even if host doesn't have the port, but http.request does not work\r\n        // this way. It will use the port if one is not specified in host,\r\n        // effectively treating host as hostname, but will use the port specified\r\n        // in host if it exists.\r\n        if (options.host && options.port) {\r\n            // Force a protocol so it will parse the host as the host, not path.\r\n            // It is discarded and not used, so it doesn't matter if it doesn't match\r\n            try {\r\n                const parsedHost = new url.URL(`http://${options.host}`);\r\n                if (!parsedHost.port && options.port) {\r\n                    options.hostname = options.host;\r\n                    delete options.host;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                // Ignore error\r\n            }\r\n        }\r\n\r\n        // Mix in default values used by http.request and others\r\n        options.protocol = options.protocol || ((<any>request).agent && (<any>request).agent.protocol) || ((<any>request).protocol) || undefined;\r\n        options.hostname = options.hostname || \"localhost\";\r\n\r\n        return url.format(options);\r\n    }\r\n}\r\n\r\nexport = HttpDependencyParser;\r\n"]}