{"version":3,"file":"CorrelationContextManager.js","sourceRoot":"","sources":["../../AutoCollection/CorrelationContextManager.ts"],"names":[],"mappings":"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","sourcesContent":["import events = require(\"events\");\r\nimport Logging = require(\"../Library/Logging\");\r\n\r\nimport * as DiagChannel from \"./diagnostic-channel/initialization\";\r\nimport * as azureFunctionsTypes from \"../Library/Functions\";\r\n\r\n// Don't reference modules from these directly. Use only for types.\r\nimport * as cls from \"cls-hooked\";\r\nimport * as http from \"http\";\r\nimport Traceparent = require(\"../Library/Traceparent\");\r\nimport Tracestate = require(\"../Library/Tracestate\");\r\nimport HttpRequestParser = require(\"./HttpRequestParser\");\r\nimport { SpanContext } from \"@opentelemetry/api\";\r\nimport { Span } from \"@opentelemetry/sdk-trace-base\";\r\nimport Util = require(\"../Library/Util\");\r\n\r\nexport interface CustomProperties {\r\n    /**\r\n     * Get a custom property from the correlation context\r\n     */\r\n    getProperty(key: string): string;\r\n    /**\r\n     * Store a custom property in the correlation context.\r\n     * Do not store sensitive information here.\r\n     * Properties stored here are exposed via outgoing HTTP headers for correlating data cross-component.\r\n     * The characters ',' and '=' are disallowed within keys or values.\r\n     */\r\n    setProperty(key: string, value: string): void;\r\n}\r\n\r\nexport interface PrivateCustomProperties extends CustomProperties {\r\n    addHeaderData(header: string): void;\r\n    serializeToHeader(): string;\r\n}\r\n\r\nexport interface CorrelationContext {\r\n    operation: {\r\n        name: string;\r\n        id: string;\r\n        parentId: string; // Always used for dependencies, may be ignored in favor of incoming headers for requests\r\n        traceparent?: Traceparent; // w3c context trace\r\n        tracestate?: Tracestate; // w3c context state\r\n    };\r\n\r\n    /** Do not store sensitive information here.\r\n     *  Properties here are exposed via outgoing HTTP headers for correlating data cross-component.\r\n     */\r\n    customProperties: CustomProperties\r\n}\r\n\r\nexport class CorrelationContextManager {\r\n    private static enabled: boolean = false;\r\n    private static hasEverEnabled: boolean = false;\r\n    private static forceClsHooked: boolean = undefined; // true: use cls-hooked, false: use cls, undefined: choose based on node version\r\n    private static session: cls.Namespace;\r\n    private static cls: typeof cls;\r\n    private static CONTEXT_NAME = \"ApplicationInsights-Context\";\r\n\r\n    /**\r\n     *  Provides the current Context.\r\n     *  The context is the most recent one entered into for the current\r\n     *  logical chain of execution, including across asynchronous calls.\r\n     */\r\n    public static getCurrentContext(): CorrelationContext | null {\r\n        if (!CorrelationContextManager.enabled) {\r\n            return null;\r\n        }\r\n        const context = CorrelationContextManager.session.get(CorrelationContextManager.CONTEXT_NAME);\r\n\r\n        if (context === undefined) { // cast undefined to null\r\n            return null;\r\n        }\r\n        return context;\r\n    }\r\n\r\n    /**\r\n     *  A helper to generate objects conforming to the CorrelationContext interface\r\n     */\r\n    public static generateContextObject(operationId: string, parentId?: string, operationName?: string, correlationContextHeader?: string, traceparent?: Traceparent, tracestate?: Tracestate): CorrelationContext {\r\n        parentId = parentId || operationId;\r\n\r\n        if (this.enabled) {\r\n            return {\r\n                operation: {\r\n                    name: operationName,\r\n                    id: operationId,\r\n                    parentId: parentId,\r\n                    traceparent,\r\n                    tracestate\r\n                },\r\n                customProperties: new CustomPropertiesImpl(correlationContextHeader)\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static spanToContextObject(spanContext: SpanContext, parentId?: string, name?: string): CorrelationContext {\r\n        const traceContext = new Traceparent();\r\n        traceContext.traceId = spanContext.traceId;\r\n        traceContext.spanId = spanContext.spanId;\r\n        traceContext.traceFlag = Traceparent.formatOpenTelemetryTraceFlags(spanContext.traceFlags) || Traceparent.DEFAULT_TRACE_FLAG;\r\n        traceContext.parentId = parentId;\r\n        return CorrelationContextManager.generateContextObject(traceContext.traceId, traceContext.parentId, name, null, traceContext);\r\n    }\r\n\r\n    /**\r\n     *  Runs a function inside a given Context.\r\n     *  All logical children of the execution path that entered this Context\r\n     *  will receive this Context object on calls to GetCurrentContext.\r\n     */\r\n    public static runWithContext(context: CorrelationContext, fn: () => any): any {\r\n        if (CorrelationContextManager.enabled) {\r\n            try {\r\n                return CorrelationContextManager.session.bind(fn, { [CorrelationContextManager.CONTEXT_NAME]: context })();\r\n            }\r\n            catch (error) {\r\n                Logging.warn(\"Error binding to session context\", Util.dumpObj(error));\r\n            }\r\n        }\r\n        return fn();\r\n    }\r\n\r\n    /**\r\n     * Wrapper for cls-hooked bindEmitter method\r\n     */\r\n    public static wrapEmitter(emitter: events.EventEmitter): void {\r\n        if (CorrelationContextManager.enabled) {\r\n            try {\r\n                CorrelationContextManager.session.bindEmitter(emitter);\r\n            }\r\n            catch (error) {\r\n                Logging.warn(\"Error binding to session context\", Util.dumpObj(error));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Patches a callback to restore the correct Context when getCurrentContext\r\n     *  is run within it. This is necessary if automatic correlation fails to work\r\n     *  with user-included libraries.\r\n     *\r\n     *  The supplied callback will be given the same context that was present for\r\n     *  the call to wrapCallback.  */\r\n    public static wrapCallback<T extends Function>(fn: T, context?: CorrelationContext): T {\r\n        if (CorrelationContextManager.enabled) {\r\n            try {\r\n                return CorrelationContextManager.session.bind(fn, context ? {\r\n                    [CorrelationContextManager.CONTEXT_NAME]: context\r\n                } : undefined);\r\n            }\r\n            catch (error) {\r\n                Logging.warn(\"Error binding to session context\", Util.dumpObj(error));\r\n            }\r\n        }\r\n        return fn;\r\n    }\r\n\r\n    /**\r\n     *  Enables the CorrelationContextManager.\r\n     */\r\n    public static enable(forceClsHooked?: boolean) {\r\n        if (this.enabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isNodeVersionCompatible()) {\r\n            this.enabled = false;\r\n            return;\r\n        }\r\n        if (!CorrelationContextManager.hasEverEnabled) {\r\n            this.forceClsHooked = forceClsHooked;\r\n            this.hasEverEnabled = true;\r\n\r\n            if (typeof this.cls === \"undefined\") {\r\n                if ((CorrelationContextManager.forceClsHooked === true) || (CorrelationContextManager.forceClsHooked === undefined && CorrelationContextManager.shouldUseClsHooked())) {\r\n                    this.cls = require(\"cls-hooked\");\r\n                } else {\r\n                    this.cls = require(\"continuation-local-storage\");\r\n                }\r\n            }\r\n\r\n            CorrelationContextManager.session = this.cls.createNamespace(\"AI-CLS-Session\");\r\n\r\n            DiagChannel.registerContextPreservation((cb) => {\r\n                try {\r\n                    return CorrelationContextManager.session.bind(cb);\r\n                }\r\n                catch (error) {\r\n                    Logging.warn(\"Error binding to session context\", Util.dumpObj(error));\r\n                }\r\n            });\r\n        }\r\n\r\n        this.enabled = true;\r\n    }\r\n\r\n    /**\r\n     * Create new correlation context.\r\n     */\r\n    public static startOperation(\r\n        input: azureFunctionsTypes.Context | (http.IncomingMessage | azureFunctionsTypes.HttpRequest) | SpanContext | Span,\r\n        request?: azureFunctionsTypes.HttpRequest | string)\r\n        : CorrelationContext | null {\r\n        const traceContext = input && (input as azureFunctionsTypes.Context).traceContext || null;\r\n        const span = input && (input as Span).spanContext ? input as Span : null;\r\n        const spanContext = input && (input as SpanContext).traceId ? input as SpanContext : null;\r\n        const headers = input && (input as http.IncomingMessage | azureFunctionsTypes.HttpRequest).headers;\r\n\r\n        // OpenTelemetry Span\r\n        if (span) {\r\n            return this.spanToContextObject(span.spanContext(), span.parentSpanId, span.name);\r\n        }\r\n\r\n        // OpenTelemetry SpanContext\r\n        if (spanContext) {\r\n            return this.spanToContextObject(spanContext, `|${spanContext.traceId}.${spanContext.spanId}.`, typeof request === \"string\" ? request : \"\");\r\n        }\r\n\r\n        // AzFunction TraceContext\r\n        if (traceContext) {\r\n            let traceparent = null;\r\n            let tracestate = null;\r\n            if ((request as azureFunctionsTypes.HttpRequest).headers) {\r\n                if ((request as azureFunctionsTypes.HttpRequest).headers.traceparent) {\r\n                    traceparent = new Traceparent((request as azureFunctionsTypes.HttpRequest).headers.traceparent);\r\n                } else if ((request as azureFunctionsTypes.HttpRequest).headers[\"request-id\"]) {\r\n                    traceparent = new Traceparent(null, (request as azureFunctionsTypes.HttpRequest).headers[\"request-id\"]);\r\n                }\r\n                if ((request as azureFunctionsTypes.HttpRequest).headers.tracestate) {\r\n                    tracestate = new Tracestate((request as azureFunctionsTypes.HttpRequest).headers.tracestate);\r\n                }\r\n            }\r\n            if (!traceparent) {\r\n                traceparent = new Traceparent(traceContext.traceparent);\r\n            }\r\n            if (!tracestate) {\r\n                tracestate = new Tracestate(traceContext.tracestate);\r\n            }\r\n            const parser = typeof request === \"object\"\r\n                ? new HttpRequestParser(request)\r\n                : null;\r\n            const correlationContext = CorrelationContextManager.generateContextObject(\r\n                traceparent.traceId,\r\n                traceparent.parentId,\r\n                typeof request === \"string\"\r\n                    ? request\r\n                    : parser.getOperationName({}),\r\n                parser && parser.getCorrelationContextHeader() || undefined,\r\n                traceparent,\r\n                tracestate\r\n            );\r\n\r\n            return correlationContext;\r\n        }\r\n\r\n        // No TraceContext available, parse as http.IncomingMessage\r\n        if (headers) {\r\n            const traceparent = new Traceparent(headers.traceparent ? headers.traceparent.toString() : null);\r\n            const tracestate = new Tracestate(headers.tracestate ? headers.tracestate.toString() : null);\r\n            const parser = new HttpRequestParser(input as http.IncomingMessage | azureFunctionsTypes.HttpRequest);\r\n            const correlationContext = CorrelationContextManager.generateContextObject(\r\n                traceparent.traceId,\r\n                traceparent.parentId,\r\n                parser.getOperationName({}),\r\n                parser.getCorrelationContextHeader(),\r\n                traceparent,\r\n                tracestate\r\n            );\r\n\r\n            return correlationContext;\r\n        }\r\n\r\n        Logging.warn(\"startOperation was called with invalid arguments\", arguments);\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *  Disables the CorrelationContextManager.\r\n     */\r\n    public static disable() {\r\n        this.enabled = false;\r\n    }\r\n\r\n    /**\r\n     * Reset the namespace\r\n     */\r\n    public static reset() {\r\n        if (CorrelationContextManager.hasEverEnabled) {\r\n            CorrelationContextManager.session = null;\r\n            CorrelationContextManager.session = this.cls.createNamespace(\"AI-CLS-Session\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Reports if CorrelationContextManager is able to run in this environment\r\n     */\r\n    public static isNodeVersionCompatible() {\r\n        var nodeVer = process.versions.node.split(\".\");\r\n        return parseInt(nodeVer[0]) > 3 || (parseInt(nodeVer[0]) > 2 && parseInt(nodeVer[1]) > 2);\r\n\r\n    }\r\n\r\n    /**\r\n     * We only want to use cls-hooked when it uses async_hooks api (8.2+), else\r\n     * use async-listener (plain -cls)\r\n     */\r\n    public static shouldUseClsHooked() {\r\n        var nodeVer = process.versions.node.split(\".\");\r\n        return (parseInt(nodeVer[0]) > 8) || (parseInt(nodeVer[0]) >= 8 && parseInt(nodeVer[1]) >= 2);\r\n    }\r\n\r\n    /**\r\n     * A TypeError is triggered by cls-hooked for node [8.0, 8.2)\r\n     * @internal Used in tests only\r\n     */\r\n    public static canUseClsHooked() {\r\n        var nodeVer = process.versions.node.split(\".\");\r\n        var greater800 = (parseInt(nodeVer[0]) > 8) || (parseInt(nodeVer[0]) >= 8 && parseInt(nodeVer[1]) >= 0);\r\n        var less820 = (parseInt(nodeVer[0]) < 8) || (parseInt(nodeVer[0]) <= 8 && parseInt(nodeVer[1]) < 2)\r\n        var greater470 = parseInt(nodeVer[0]) > 4 || (parseInt(nodeVer[0]) >= 4 && parseInt(nodeVer[1]) >= 7) // cls-hooked requires node 4.7+\r\n        return !(greater800 && less820) && greater470;\r\n    }\r\n}\r\n\r\nclass CustomPropertiesImpl implements PrivateCustomProperties {\r\n    private static bannedCharacters = /[,=]/;\r\n    private props: { key: string, value: string }[] = [];\r\n\r\n    public constructor(header: string) {\r\n        this.addHeaderData(header);\r\n    }\r\n\r\n    public addHeaderData(header?: string) {\r\n        const keyvals = header ? header.split(\", \") : [];\r\n        this.props = keyvals.map((keyval) => {\r\n            const parts = keyval.split(\"=\");\r\n            return { key: parts[0], value: parts[1] };\r\n        }).concat(this.props);\r\n    }\r\n\r\n    public serializeToHeader() {\r\n        return this.props.map((keyval) => {\r\n            return `${keyval.key}=${keyval.value}`\r\n        }).join(\", \");\r\n    }\r\n\r\n    public getProperty(prop: string) {\r\n        for (let i = 0; i < this.props.length; ++i) {\r\n            const keyval = this.props[i]\r\n            if (keyval.key === prop) {\r\n                return keyval.value;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    // TODO: Strictly according to the spec, properties which are recieved from\r\n    // an incoming request should be left untouched, while we may add our own new\r\n    // properties. The logic here will need to change to track that.\r\n    public setProperty(prop: string, val: string) {\r\n        if (CustomPropertiesImpl.bannedCharacters.test(prop) || CustomPropertiesImpl.bannedCharacters.test(val)) {\r\n            Logging.warn(\"Correlation context property keys and values must not contain ',' or '='. setProperty was called with key: \" + prop + \" and value: \" + val);\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.props.length; ++i) {\r\n            const keyval = this.props[i];\r\n            if (keyval.key === prop) {\r\n                keyval.value = val;\r\n                return;\r\n            }\r\n        }\r\n        this.props.push({ key: prop, value: val });\r\n    }\r\n}"]}