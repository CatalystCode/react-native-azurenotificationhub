{"version":3,"file":"postgres.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/postgres.sub.ts"],"names":[],"mappings":";;;AAGA,0DAAwE;AACxE,yDAAyE;AAIzE,IAAI,OAAO,GAAsB,EAAE,CAAC;AAE7B,IAAM,UAAU,GAAG,UAAC,KAAuC;IAC9D,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;QACnB,IAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAM,GAAG,GAAG,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,eAAe,CAAC;QACvF,IAAM,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;QAClC,IAAM,IAAI,GAAM,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAM,CAAC;QACvE,MAAM,CAAC,eAAe,CAAC;YACnB,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,GAAG;YACT,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ;YAC7B,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;YAC/B,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;YACrB,kBAAkB,EAAE,UAAU;SACjC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAjBW,QAAA,UAAU,cAiBrB;AAEF,SAAgB,MAAM,CAAC,OAAgB,EAAE,MAAuB;IAC5D,IAAI,OAAO,EAAE;QACT,IAAI,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QACjD,IAAI,WAAW,EAAE;YACb,OAAO;SACV;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,SAAS,CAAmB,UAAU,EAAE,kBAAU,EAAE,+BAAU,EAAE,UAAC,MAAM,EAAE,OAAO;gBACpF,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;gBACtC,IAAI,SAAS,EAAE;oBACX,SAAS,CAAC,kBAAkB,CAAC,oCAAwB,CAAC,QAAQ,CAAC,CAAC;iBACnE;YACL,CAAC,CAAC,CAAC;SACN;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;SAAM;QACH,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QAC7C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,WAAW,CAAC,UAAU,EAAE,kBAAU,CAAC,CAAC;SAC/C;KACJ;AACL,CAAC;AArBD,wBAqBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\r\nimport { StatsbeatInstrumentation } from \"../../Declarations/Constants\";\r\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\r\n\r\nimport { pg } from \"diagnostic-channel-publishers\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nexport const subscriber = (event: IStandardEvent<pg.IPostgresData>) => {\r\n    clients.forEach((client) => {\r\n        const q = event.data.query;\r\n        const sql = (q.preparable && q.preparable.text) || q.plan || q.text || \"unknown query\";\r\n        const success = !event.data.error;\r\n        const conn = `${event.data.database.host}:${event.data.database.port}`;\r\n        client.trackDependency({\r\n            target: conn,\r\n            data: sql,\r\n            name: sql,\r\n            duration: event.data.duration,\r\n            success: success,\r\n            resultCode: success ? \"0\" : \"1\",\r\n            time: event.data.time,\r\n            dependencyTypeName: \"postgres\"\r\n        });\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    if (enabled) {\r\n        let clientFound = clients.find(c => c == client);\r\n        if (clientFound) {\r\n            return;\r\n        }\r\n        if (clients.length === 0) {\r\n            channel.subscribe<pg.IPostgresData>(\"postgres\", subscriber, trueFilter, (module, version) => {\r\n                let statsbeat = client.getStatsbeat();\r\n                if (statsbeat) {\r\n                    statsbeat.addInstrumentation(StatsbeatInstrumentation.POSTGRES);\r\n                }\r\n            });\r\n        }\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c != client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"postgres\", subscriber);\r\n        }\r\n    }\r\n}\r\n"]}