{"version":3,"file":"EventHub.js","sourceRoot":"","sources":["../../../../AutoCollection/diagnostic-channel/Azure/EventHub.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4DAA4D;AAC5D,oFAAoF;AACpF,0CAA8C;AAC9C,4CAA2D;AAC3D,4EAAyE;AAGzE,6DAOyC;AAGzC;;GAEG;AACH,IAAM,oBAAoB,GAAG,UAAC,IAAkB;IAC5C,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAC1B,IAAI,eAAe,GAAG,CAAC,CAAC;IACxB,IAAM,WAAW,GAAG,2BAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAEzD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,EAAc;YAAZ,UAAU,gBAAA;QAC5B,IAAM,YAAY,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,yBAAa,CAAoB,CAAC;QACpE,IAAI,YAAY,EAAE;YACd,iBAAiB,IAAI,CAAC,CAAC;YACvB,eAAe,IAAI,WAAW,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;SAC/E;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,eAAe,GAAG,CAAC,iBAAiB,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC;AAEF;;;;GAIG;AACI,IAAM,iBAAiB,GAAG,UAAC,IAAkB,EAAE,SAAgE;;IAClH,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAA6B,CAAC;IAC3E,IAAM,WAAW,GAAI,CAAC,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC;QACnE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;QAC/B,SAAS,CAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,sBAAsB;IACrE,IAAM,qBAAqB,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,iCAAqB,CAAC,IAAI,SAAS,CAAW,CAAC;IAE9F,QAAQ,IAAI,CAAC,IAAI,EAAE;QACf,KAAK,cAAQ,CAAC,MAAM;YACM,SAAU,CAAC,kBAAkB,GAAG,SAAS,CAAC;YAC1C,SAAU,CAAC,MAAM,GAAM,WAAW,SAAI,qBAAuB,CAAC;YACpF,MAAM;QACV,KAAK,cAAQ,CAAC,QAAQ;YACI,SAAU,CAAC,kBAAkB,GAAM,8BAAkB,CAAC,YAAY,WAAM,SAAW,CAAC;YACpF,SAAU,CAAC,MAAM,GAAM,WAAW,SAAI,qBAAuB,CAAC;YACpF,MAAM;QACV,KAAK,cAAQ,CAAC,QAAQ;YACC,SAAU,CAAC,MAAM,GAAM,WAAW,SAAI,qBAAuB,CAAC;YAC9D,SAAU,CAAC,YAAY,yBAChB,SAAU,CAAC,YAAY,gBAC5C,+BAAmB,IAAG,oBAAoB,CAAC,IAAI,CAAC,MACpD,CAAC;YACF,MAAM;QACV,QAAQ,CAAC,QAAQ;KACpB;AACL,CAAC,CAAC;AAzBW,QAAA,iBAAiB,qBAyB5B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport { SpanKind } from \"@opentelemetry/api\";\r\nimport { hrTimeToMilliseconds } from \"@opentelemetry/core\";\r\nimport { SemanticAttributes } from \"@opentelemetry/semantic-conventions\";\r\nimport { ReadableSpan } from \"@opentelemetry/sdk-trace-base\";\r\n\r\nimport {\r\n    TIME_SINCE_ENQUEUED,\r\n    ENQUEUED_TIME,\r\n    AzNamespace,\r\n    MessageBusDestination,\r\n    MicrosoftEventHub,\r\n    DependencyTypeName\r\n} from \"../../../Declarations/Constants\";\r\nimport { DependencyTelemetry, Identified, RequestTelemetry } from \"../../../Declarations/Contracts\";\r\n\r\n/**\r\n * Average span.links[].attributes.enqueuedTime\r\n */\r\nconst getTimeSinceEnqueued = (span: ReadableSpan) => {\r\n    let countEnqueueDiffs = 0;\r\n    let sumEnqueueDiffs = 0;\r\n    const startTimeMs = hrTimeToMilliseconds(span.startTime);\r\n\r\n    span.links.forEach(({ attributes }) => {\r\n        const enqueuedTime = attributes?.[ENQUEUED_TIME] as string | number;\r\n        if (enqueuedTime) {\r\n            countEnqueueDiffs += 1;\r\n            sumEnqueueDiffs += startTimeMs - (parseFloat(enqueuedTime.toString()) || 0);\r\n        }\r\n    });\r\n\r\n    return Math.max(sumEnqueueDiffs / (countEnqueueDiffs || 1), 0);\r\n};\r\n\r\n/**\r\n * Implementation of Mapping to Azure Monitor\r\n *\r\n * https://gist.github.com/lmolkova/e4215c0f44a49ef824983382762e6b92#file-z_azure_monitor_exporter_mapping-md\r\n */\r\nexport const parseEventHubSpan = (span: ReadableSpan, telemetry: (DependencyTelemetry | RequestTelemetry) & Identified): void => {\r\n    const namespace = span.attributes[AzNamespace] as typeof MicrosoftEventHub;\r\n    const peerAddress = ((span.attributes[SemanticAttributes.NET_PEER_NAME] ||\r\n        span.attributes[\"peer.address\"] ||\r\n        \"unknown\") as string).replace(/\\/$/g, \"\"); // remove trailing \"/\"\r\n    const messageBusDestination = (span.attributes[MessageBusDestination] || \"unknown\") as string;\r\n\r\n    switch (span.kind) {\r\n        case SpanKind.CLIENT:\r\n            (<DependencyTelemetry>telemetry).dependencyTypeName = namespace;\r\n            (<DependencyTelemetry>telemetry).target = `${peerAddress}/${messageBusDestination}`;\r\n            break;\r\n        case SpanKind.PRODUCER:\r\n            (<DependencyTelemetry>telemetry).dependencyTypeName = `${DependencyTypeName.QueueMessage} | ${namespace}`;\r\n            (<DependencyTelemetry>telemetry).target = `${peerAddress}/${messageBusDestination}`;\r\n            break;\r\n        case SpanKind.CONSUMER:\r\n            (<RequestTelemetry>telemetry).source = `${peerAddress}/${messageBusDestination}`;\r\n            (<RequestTelemetry>telemetry).measurements = {\r\n                ...(<RequestTelemetry>telemetry).measurements,\r\n                [TIME_SINCE_ENQUEUED]: getTimeSinceEnqueued(span)\r\n            };\r\n            break;\r\n        default: // no op\r\n    }\r\n};"]}