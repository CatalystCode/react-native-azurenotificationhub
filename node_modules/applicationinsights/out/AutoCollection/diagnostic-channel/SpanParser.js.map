{"version":3,"file":"SpanParser.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/SpanParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport { URL } from \"url\";\r\nimport { SpanKind, SpanStatusCode, Link } from \"@opentelemetry/api\";\r\nimport { SemanticAttributes, DbSystemValues } from \"@opentelemetry/semantic-conventions\";\r\nimport { ReadableSpan } from \"@opentelemetry/sdk-trace-base\";\r\n\r\nimport * as Contracts from \"../../Declarations/Contracts\";\r\nimport * as Constants from \"../../Declarations/Constants\";\r\nimport { parseEventHubSpan } from \"./Azure/EventHub\";\r\nimport { DependencyTelemetry } from \"../../Declarations/Contracts\";\r\nimport Util = require(\"../../Library/Util\");\r\n\r\nfunction createPropertiesFromSpan(span: ReadableSpan): { [key: string]: any; } {\r\n    const properties: { [key: string]: any; } = {};\r\n    for (const key of Object.keys(span.attributes)) {\r\n        if (\r\n            !(\r\n                key.startsWith(\"http.\") ||\r\n                key.startsWith(\"rpc.\") ||\r\n                key.startsWith(\"db.\") ||\r\n                key.startsWith(\"peer.\") ||\r\n                key.startsWith(\"net.\")\r\n            )\r\n        ) {\r\n            properties[key] = span.attributes[key] as string;\r\n        }\r\n    }\r\n    const links: Array<{ operation_Id: string, id: string }> = span.links.map((link: Link) => ({\r\n        operation_Id: link.context.traceId,\r\n        id: link.context.spanId\r\n    }));\r\n    if (links.length > 0) {\r\n        properties[\"_MS.links\"] = Util.stringify(links);\r\n    }\r\n    return properties;\r\n}\r\n\r\nfunction isSqlDB(dbSystem: string) {\r\n    return (\r\n        dbSystem === DbSystemValues.DB2 ||\r\n        dbSystem === DbSystemValues.DERBY ||\r\n        dbSystem === DbSystemValues.MARIADB ||\r\n        dbSystem === DbSystemValues.MSSQL ||\r\n        dbSystem === DbSystemValues.ORACLE ||\r\n        dbSystem === DbSystemValues.SQLITE ||\r\n        dbSystem === DbSystemValues.OTHER_SQL ||\r\n        dbSystem === DbSystemValues.HSQLDB ||\r\n        dbSystem === DbSystemValues.H2\r\n    );\r\n}\r\n\r\nfunction getUrl(span: ReadableSpan): string {\r\n    const httpMethod = span.attributes[SemanticAttributes.HTTP_METHOD];\r\n    if (httpMethod) {\r\n        const httpUrl = span.attributes[SemanticAttributes.HTTP_URL];\r\n        if (httpUrl) {\r\n            return String(httpUrl);\r\n        } else {\r\n            const httpScheme = span.attributes[SemanticAttributes.HTTP_SCHEME];\r\n            const httpTarget = span.attributes[SemanticAttributes.HTTP_TARGET];\r\n            if (httpScheme && httpTarget) {\r\n                const httpHost = span.attributes[SemanticAttributes.HTTP_HOST];\r\n                if (httpHost) {\r\n                    return `${httpScheme}://${httpHost}${httpTarget}`;\r\n                } else {\r\n                    const netPeerPort = span.attributes[SemanticAttributes.NET_PEER_PORT];\r\n                    if (netPeerPort) {\r\n                        const netPeerName = span.attributes[SemanticAttributes.NET_PEER_NAME];\r\n                        if (netPeerName) {\r\n                            return `${httpScheme}://${netPeerName}:${netPeerPort}${httpTarget}`;\r\n                        } else {\r\n                            const netPeerIp = span.attributes[SemanticAttributes.NET_PEER_IP];\r\n                            if (netPeerIp) {\r\n                                return `${httpScheme}://${netPeerIp}:${netPeerPort}${httpTarget}`;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nfunction getDependencyTarget(span: ReadableSpan): string {\r\n    const peerService = span.attributes[SemanticAttributes.PEER_SERVICE];\r\n    const httpHost = span.attributes[SemanticAttributes.HTTP_HOST];\r\n    const httpUrl = span.attributes[SemanticAttributes.HTTP_URL];\r\n    const netPeerName = span.attributes[SemanticAttributes.NET_PEER_NAME];\r\n    const netPeerIp = span.attributes[SemanticAttributes.NET_PEER_IP];\r\n    if (peerService) {\r\n        return String(peerService);\r\n    } else if (httpHost) {\r\n        return String(httpHost);\r\n    } else if (httpUrl) {\r\n        return String(httpUrl);\r\n    } else if (netPeerName) {\r\n        return String(netPeerName);\r\n    } else if (netPeerIp) {\r\n        return String(netPeerIp);\r\n    }\r\n    return \"\";\r\n}\r\n\r\nfunction createDependencyData(span: ReadableSpan): Contracts.DependencyTelemetry {\r\n    const remoteDependency: Contracts.DependencyTelemetry = {\r\n        name: span.name,\r\n        success: span.status.code != SpanStatusCode.ERROR,\r\n        resultCode: \"0\",\r\n        duration: 0,\r\n        data: \"\",\r\n        dependencyTypeName: \"\"\r\n    };\r\n    if (span.kind === SpanKind.PRODUCER) {\r\n        remoteDependency.dependencyTypeName = Constants.DependencyTypeName.QueueMessage;\r\n    }\r\n    if (span.kind === SpanKind.INTERNAL && span.parentSpanId) {\r\n        remoteDependency.dependencyTypeName = Constants.DependencyTypeName.InProc;\r\n    }\r\n\r\n    const httpMethod = span.attributes[SemanticAttributes.HTTP_METHOD];\r\n    const dbSystem = span.attributes[SemanticAttributes.DB_SYSTEM];\r\n    const rpcSystem = span.attributes[SemanticAttributes.RPC_SYSTEM];\r\n    // HTTP Dependency\r\n    if (httpMethod) {\r\n        remoteDependency.dependencyTypeName = Constants.DependencyTypeName.Http;\r\n        const httpUrl = span.attributes[SemanticAttributes.HTTP_URL];\r\n        if (httpUrl) {\r\n            var pathName = \"\";\r\n            try {\r\n                let dependencyUrl = new URL(String(httpUrl));\r\n                pathName = dependencyUrl.pathname;\r\n            }\r\n            catch (ex) {\r\n                // Ignore error\r\n            }\r\n            remoteDependency.name = `${httpMethod} ${pathName}`;\r\n        }\r\n        remoteDependency.data = getUrl(span);\r\n        const httpStatusCode = span.attributes[SemanticAttributes.HTTP_STATUS_CODE];\r\n        if (httpStatusCode) {\r\n            remoteDependency.resultCode = String(httpStatusCode);\r\n        }\r\n        let target = getDependencyTarget(span);\r\n        if (target) {\r\n            try {\r\n                // Remove default port\r\n                let portRegex = new RegExp(/(https?)(:\\/\\/.*)(:\\d+)(\\S*)/);\r\n                let res = portRegex.exec(target);\r\n                if (res != null) {\r\n                    let protocol = res[1];\r\n                    let port = res[3];\r\n                    if ((protocol == \"https\" && port == \":443\") || (protocol == \"http\" && port == \":80\")) {\r\n                        // Drop port\r\n                        target = res[1] + res[2] + res[4];\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                // Ignore error\r\n            }\r\n            remoteDependency.target = `${target}`;\r\n        }\r\n    }\r\n    // DB Dependency\r\n    else if (dbSystem) {\r\n        // TODO: Remove special logic when Azure UX supports OpenTelemetry dbSystem\r\n        if (String(dbSystem) === DbSystemValues.MYSQL) {\r\n            remoteDependency.dependencyTypeName = \"mysql\";\r\n        } else if (String(dbSystem) === DbSystemValues.POSTGRESQL) {\r\n            remoteDependency.dependencyTypeName = \"postgresql\";\r\n        } else if (String(dbSystem) === DbSystemValues.MONGODB) {\r\n            remoteDependency.dependencyTypeName = \"mongodb\";\r\n        } else if (String(dbSystem) === DbSystemValues.REDIS) {\r\n            remoteDependency.dependencyTypeName = \"redis\";\r\n        } else if (isSqlDB(String(dbSystem))) {\r\n            remoteDependency.dependencyTypeName = \"SQL\";\r\n        } else {\r\n            remoteDependency.dependencyTypeName = String(dbSystem);\r\n        }\r\n        const dbStatement = span.attributes[SemanticAttributes.DB_STATEMENT];\r\n        const dbOperation = span.attributes[SemanticAttributes.DB_OPERATION];\r\n        if (dbStatement) {\r\n            remoteDependency.data = String(dbStatement);\r\n        }\r\n        else if (dbOperation) {\r\n            remoteDependency.data = String(dbOperation);\r\n        }\r\n        let target = getDependencyTarget(span);\r\n        const dbName = span.attributes[SemanticAttributes.DB_NAME];\r\n        if (target) {\r\n            remoteDependency.target = dbName ? `${target}|${dbName}` : `${target}`;\r\n        } else {\r\n            remoteDependency.target = dbName ? `${dbName}` : `${dbSystem}`;\r\n        }\r\n    }\r\n    // grpc Dependency\r\n    else if (rpcSystem) {\r\n        remoteDependency.dependencyTypeName = Constants.DependencyTypeName.Grpc;\r\n        const grpcStatusCode = span.attributes[SemanticAttributes.RPC_GRPC_STATUS_CODE];\r\n        if (grpcStatusCode) {\r\n            remoteDependency.resultCode = String(grpcStatusCode);\r\n        }\r\n        let target = getDependencyTarget(span);\r\n        if (target) {\r\n            remoteDependency.target = `${target}`;\r\n        } else if (rpcSystem) {\r\n            remoteDependency.target = String(rpcSystem);\r\n        }\r\n    }\r\n    return remoteDependency;\r\n}\r\n\r\nfunction createRequestData(span: ReadableSpan): Contracts.RequestTelemetry {\r\n    const requestData: Contracts.RequestTelemetry = {\r\n        name: span.name,\r\n        success: span.status.code != SpanStatusCode.ERROR,\r\n        resultCode: \"0\",\r\n        duration: 0,\r\n        url: \"\",\r\n        source: undefined\r\n    };\r\n    const httpMethod = span.attributes[SemanticAttributes.HTTP_METHOD];\r\n    const grpcStatusCode = span.attributes[SemanticAttributes.RPC_GRPC_STATUS_CODE];\r\n    if (httpMethod) {\r\n        // Try to get request name for server spans\r\n        if (span.kind == SpanKind.SERVER) {\r\n            const httpRoute = span.attributes[SemanticAttributes.HTTP_ROUTE];\r\n            const httpUrl = span.attributes[SemanticAttributes.HTTP_URL];\r\n            if (httpRoute) {\r\n                requestData.name = `${httpMethod as string} ${httpRoute as string}`;\r\n            }\r\n            else if (httpUrl) {\r\n                try {\r\n                    let url = new URL(String(httpUrl));\r\n                    requestData.name = `${httpMethod} ${url.pathname}`;\r\n                }\r\n                catch (ex) {\r\n                    // Ignore error\r\n                }\r\n            }\r\n        }\r\n        requestData.url = getUrl(span);\r\n        const httpStatusCode = span.attributes[SemanticAttributes.HTTP_STATUS_CODE];\r\n        if (httpStatusCode) {\r\n            requestData.resultCode = String(httpStatusCode);\r\n        }\r\n    } else if (grpcStatusCode) {\r\n        requestData.resultCode = String(grpcStatusCode);\r\n    }\r\n    return requestData;\r\n}\r\n\r\nexport function spanToTelemetryContract(span: ReadableSpan): (Contracts.DependencyTelemetry | Contracts.RequestTelemetry) & Contracts.Identified {\r\n    let telemetry: (Contracts.DependencyTelemetry | Contracts.RequestTelemetry) & Contracts.Identified;\r\n    switch (span.kind) {\r\n        case SpanKind.CLIENT:\r\n        case SpanKind.PRODUCER:\r\n        case SpanKind.INTERNAL:\r\n            telemetry = createDependencyData(span);\r\n            break;\r\n        case SpanKind.SERVER:\r\n        case SpanKind.CONSUMER:\r\n            telemetry = createRequestData(span);\r\n            break;\r\n    }\r\n\r\n    const spanContext = span.spanContext ? span.spanContext() : (<any>span).context(); // context is available in OT API <v0.19.0\r\n    const id = `${spanContext.spanId}`;\r\n    const duration = Math.round(span.duration[0] * 1e3 + span.duration[1] / 1e6);\r\n    telemetry.id = id;\r\n    telemetry.duration = duration;\r\n    telemetry.properties = createPropertiesFromSpan(span);\r\n\r\n    // Azure SDK\r\n    if (span.attributes[Constants.AzNamespace]) {\r\n        if (span.kind === SpanKind.INTERNAL) {\r\n            (<DependencyTelemetry>telemetry).dependencyTypeName = `${Constants.DependencyTypeName.InProc} | ${span.attributes[Constants.AzNamespace]}`\r\n        }\r\n        if (span.attributes[Constants.AzNamespace] === Constants.MicrosoftEventHub) {\r\n            parseEventHubSpan(span, telemetry);\r\n        }\r\n    }\r\n    return telemetry;\r\n}\r\n"]}