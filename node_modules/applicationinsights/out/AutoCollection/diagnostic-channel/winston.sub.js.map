{"version":3,"file":"winston.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/winston.sub.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\r\nimport { StatsbeatInstrumentation } from \"../../Declarations/Constants\";\r\nimport { SeverityLevel } from \"../../Declarations/Contracts\";\r\n\r\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\r\n\r\nimport { winston } from \"diagnostic-channel-publishers\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nconst winstonToAILevelMap: { [key: string]: (og: string) => number } = {\r\n    syslog(og: string) {\r\n        const map: { [key: string]: number } = {\r\n            emerg: SeverityLevel.Critical,\r\n            alert: SeverityLevel.Critical,\r\n            crit: SeverityLevel.Critical,\r\n            error: SeverityLevel.Error,\r\n            warning: SeverityLevel.Warning,\r\n            notice: SeverityLevel.Information,\r\n            info: SeverityLevel.Information,\r\n            debug: SeverityLevel.Verbose\r\n        };\r\n\r\n        return map[og] === undefined ? SeverityLevel.Information : map[og];\r\n    },\r\n    npm(og: string) {\r\n        const map: { [key: string]: number } = {\r\n            error: SeverityLevel.Error,\r\n            warn: SeverityLevel.Warning,\r\n            info: SeverityLevel.Information,\r\n            verbose: SeverityLevel.Verbose,\r\n            debug: SeverityLevel.Verbose,\r\n            silly: SeverityLevel.Verbose\r\n        };\r\n\r\n        return map[og] === undefined ? SeverityLevel.Information : map[og];\r\n    },\r\n    unknown(og: string) {\r\n        return SeverityLevel.Information;\r\n    }\r\n};\r\n\r\nconst subscriber = (event: IStandardEvent<winston.IWinstonData>) => {\r\n    const message = event.data.message as Error | string;\r\n    clients.forEach((client) => {\r\n        if (message instanceof Error) {\r\n            client.trackException({\r\n                exception: message,\r\n                properties: event.data.meta\r\n            });\r\n        } else {\r\n            const AIlevel = winstonToAILevelMap[event.data.levelKind](event.data.level);\r\n            client.trackTrace({\r\n                message: message,\r\n                severity: AIlevel,\r\n                properties: event.data.meta\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    if (enabled) {\r\n        let clientFound = clients.find(c => c == client);\r\n        if (clientFound) {\r\n            return;\r\n        }\r\n        if (clients.length === 0) {\r\n            channel.subscribe<winston.IWinstonData>(\"winston\", subscriber, trueFilter, (module, version) => {\r\n                let statsbeat = client.getStatsbeat();\r\n                if (statsbeat) {\r\n                    statsbeat.addInstrumentation(StatsbeatInstrumentation.WINSTON);\r\n                }\r\n            });\r\n        }\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c != client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"winston\", subscriber);\r\n        }\r\n    }\r\n}\r\n\r\nexport function dispose() {\r\n    channel.unsubscribe(\"winston\", subscriber);\r\n    clients = [];\r\n}"]}