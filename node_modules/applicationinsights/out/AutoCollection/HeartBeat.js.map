{"version":3,"file":"HeartBeat.js","sourceRoot":"","sources":["../../AutoCollection/HeartBeat.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\r\nimport Vm = require(\"../Library/AzureVirtualMachine\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Config = require(\"../Library/Config\");\r\nimport Context = require(\"../Library/Context\");\r\n\r\nclass HeartBeat {\r\n\r\n    public static INSTANCE: HeartBeat;\r\n\r\n    private _collectionInterval: number = 900000;\r\n    private _client: TelemetryClient;\r\n    private _handle: NodeJS.Timer | null;\r\n    private _isEnabled: boolean;\r\n    private _isInitialized: boolean;\r\n    private _isVM: boolean;\r\n\r\n    constructor(client: TelemetryClient) {\r\n        if (!HeartBeat.INSTANCE) {\r\n            HeartBeat.INSTANCE = this;\r\n        }\r\n        this._isInitialized = false;\r\n        this._client = client;\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        this._isEnabled = isEnabled;\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._isInitialized = true;\r\n        }\r\n\r\n        if (isEnabled) {\r\n            if (!this._handle) {\r\n                this._handle = setInterval(() => this.trackHeartBeat(this._client.config, () => { }), this._collectionInterval);\r\n                this._handle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n        } else {\r\n            if (this._handle) {\r\n                clearInterval(this._handle);\r\n                this._handle = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public static isEnabled() {\r\n        return HeartBeat.INSTANCE && HeartBeat.INSTANCE._isEnabled;\r\n    }\r\n\r\n    public trackHeartBeat(config: Config, callback: () => void) {\r\n        let waiting: boolean = false;\r\n        let properties: { [key: string]: string } = {};\r\n        const sdkVersion = Context.sdkVersion; // \"node\" or \"node-nativeperf\"\r\n        properties[\"sdk\"] = sdkVersion;\r\n        properties[\"osType\"] = os.type();\r\n        if (process.env.WEBSITE_SITE_NAME) { // Web apps\r\n            properties[\"appSrv_SiteName\"] = process.env.WEBSITE_SITE_NAME || \"\";\r\n            properties[\"appSrv_wsStamp\"] = process.env.WEBSITE_HOME_STAMPNAME || \"\";\r\n            properties[\"appSrv_wsHost\"] = process.env.WEBSITE_HOSTNAME || \"\";\r\n        } else if (process.env.FUNCTIONS_WORKER_RUNTIME) { // Function apps\r\n            properties[\"azfunction_appId\"] = process.env.WEBSITE_HOSTNAME;\r\n        } else if (config) {\r\n            if (this._isVM === undefined) {\r\n                waiting = true;\r\n                Vm.AzureVirtualMachine.getAzureComputeMetadata(config, (vmInfo) => {\r\n                    this._isVM = vmInfo.isVM;\r\n                    if (this._isVM) {\r\n                        properties[\"azInst_vmId\"] = vmInfo.id;\r\n                        properties[\"azInst_subscriptionId\"] = vmInfo.subscriptionId;\r\n                        properties[\"azInst_osType\"] = vmInfo.osType;\r\n                    }\r\n                    this._client.trackMetric({ name: Constants.HeartBeatMetricName, value: 0, properties: properties });\r\n                    callback();\r\n                });\r\n            }\r\n        }\r\n        if (!waiting) {\r\n            this._client.trackMetric({ name: Constants.HeartBeatMetricName, value: 0, properties: properties });\r\n            callback();\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        HeartBeat.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    }\r\n}\r\n\r\nexport = HeartBeat;\r\n"]}