{"version":3,"file":"Exceptions.js","sourceRoot":"","sources":["../../AutoCollection/Exceptions.ts"],"names":[],"mappings":"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","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\n\r\n\r\nclass AutoCollectExceptions {\r\n\r\n    public static INSTANCE: AutoCollectExceptions = null;\r\n    public static UNCAUGHT_EXCEPTION_MONITOR_HANDLER_NAME = \"uncaughtExceptionMonitor\";\r\n    public static UNCAUGHT_EXCEPTION_HANDLER_NAME = \"uncaughtException\";\r\n    public static UNHANDLED_REJECTION_HANDLER_NAME = \"unhandledRejection\";\r\n\r\n    private static _RETHROW_EXIT_MESSAGE = \"Application Insights Rethrow Exception Handler\";\r\n    private static _FALLBACK_ERROR_MESSAGE = \"A promise was rejected without providing an error. Application Insights generated this error stack for you.\";\r\n    private static _canUseUncaughtExceptionMonitor = false;\r\n    private _exceptionListenerHandle: (reThrow: boolean, error: Error) => void;\r\n    private _rejectionListenerHandle: (reThrow: boolean, error: Error) => void;\r\n    private _client: TelemetryClient;\r\n    private _isInitialized: boolean;\r\n\r\n    constructor(client: TelemetryClient) {\r\n        if (!!AutoCollectExceptions.INSTANCE) {\r\n            throw new Error(\"Exception tracking should be configured from the applicationInsights object\");\r\n        }\r\n\r\n        AutoCollectExceptions.INSTANCE = this;\r\n        this._client = client;\r\n\r\n        // Only use for 13.7.0+\r\n        const nodeVer = process.versions.node.split(\".\");\r\n        AutoCollectExceptions._canUseUncaughtExceptionMonitor = parseInt(nodeVer[0]) > 13 || (parseInt(nodeVer[0]) === 13 && parseInt(nodeVer[1]) >= 7);\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        if (isEnabled) {\r\n            this._isInitialized = true;\r\n            if (!this._exceptionListenerHandle) {\r\n                // For scenarios like Promise.reject(), an error won't be passed to the handle. Create a placeholder\r\n                // error for these scenarios.\r\n                var handle = (reThrow: boolean, name: string, error: Error = new Error(AutoCollectExceptions._FALLBACK_ERROR_MESSAGE)) => {\r\n                    let exceptionTelemetry: Contracts.ExceptionTelemetry = { exception: error };\r\n                    // Add full error in context so it could used in telemetryProcessors\r\n                    exceptionTelemetry.contextObjects = {};\r\n                    exceptionTelemetry.contextObjects[\"Error\"] = error;\r\n                    this._client.trackException(exceptionTelemetry);\r\n                    this._client.flush({ isAppCrashing: true });\r\n                    // only rethrow when we are the only listener\r\n                    if (reThrow && name && (<any>process).listeners(name).length === 1) {\r\n                        console.error(error);\r\n                        process.exit(1);\r\n                    }\r\n                };\r\n\r\n                if (AutoCollectExceptions._canUseUncaughtExceptionMonitor) {\r\n                    // Node.js >= 13.7.0, use uncaughtExceptionMonitor. It handles both promises and exceptions\r\n                    this._exceptionListenerHandle = handle.bind(this, false, undefined); // never rethrows\r\n                    (<any>process).on(AutoCollectExceptions.UNCAUGHT_EXCEPTION_MONITOR_HANDLER_NAME, this._exceptionListenerHandle);\r\n                } else {\r\n                    this._exceptionListenerHandle = handle.bind(this, true, AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME);\r\n                    this._rejectionListenerHandle = handle.bind(this, false, undefined); // never rethrows\r\n                    (<any>process).on(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\r\n                    (<any>process).on(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this._exceptionListenerHandle) {\r\n                if (AutoCollectExceptions._canUseUncaughtExceptionMonitor) {\r\n                    process.removeListener(AutoCollectExceptions.UNCAUGHT_EXCEPTION_MONITOR_HANDLER_NAME, this._exceptionListenerHandle);\r\n                } else {\r\n                    process.removeListener(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\r\n                    process.removeListener(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\r\n                }\r\n                this._exceptionListenerHandle = undefined;\r\n                this._rejectionListenerHandle = undefined;\r\n                delete this._exceptionListenerHandle;\r\n                delete this._rejectionListenerHandle;\r\n            }\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        AutoCollectExceptions.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport = AutoCollectExceptions;\r\n"]}