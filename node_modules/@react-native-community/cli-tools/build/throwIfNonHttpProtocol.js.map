{"version":3,"sources":["../src/throwIfNonHttpProtocol.ts"],"names":["throwIfNonHttpProtocol","url","_url","URL","urlProtocol","protocol","expectedProtocol","isFromExpectedProtocol","Error"],"mappings":";;;;;;;AAAA;AACA;AACA;AACe,SAASA,sBAAT,CAAgCC,GAAhC,EAA6C;AAC1D,QAAMC,IAAI,GAAG,IAAIC,GAAJ,CAAQF,GAAR,CAAb;;AAEA,QAAMG,WAAW,GAAGF,IAAI,CAACG,QAAzB;AAEA,QAAMC,gBAAgB,GAAG;AACvB,KAACF,WAAD,GAAe,KADQ;AAEvB,aAAS,IAFc;AAGvB,cAAU;AAHa,GAAzB;AAMA,QAAMG,sBAAsB,GAAGD,gBAAgB,CAACF,WAAD,CAA/C;;AAEA,MAAI,CAACG,sBAAL,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;AACF","sourcesContent":["/**\n * Check if a string is an http/https url\n */\nexport default function throwIfNonHttpProtocol(url: string) {\n  const _url = new URL(url);\n\n  const urlProtocol = _url.protocol;\n\n  const expectedProtocol = {\n    [urlProtocol]: false,\n    'http:': true,\n    'https:': true,\n  };\n\n  const isFromExpectedProtocol = expectedProtocol[urlProtocol];\n\n  if (!isFromExpectedProtocol) {\n    throw new Error('invalid url, missing http/https protocol');\n  }\n}\n"]}