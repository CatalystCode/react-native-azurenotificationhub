{"version":3,"sources":["../src/findProjectRoot.ts"],"names":["findProjectRoot","cwd","process","packageLocation","findUp","sync","CLIError","path","dirname"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;AAEA;AACA;AACA;AACe,SAASA,eAAT,CAAyBC,GAAG,GAAGC,OAAO,CAACD,GAAR,EAA/B,EAAsD;AACnE,QAAME,eAAe,GAAGC,kBAAOC,IAAP,CAAY,cAAZ,EAA4B;AAACJ,IAAAA;AAAD,GAA5B,CAAxB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAI,CAACE,eAAL,EAAsB;AACpB,UAAM,IAAIG,gBAAJ,CAAc;AACxB;AACA;AACA,KAHU,CAAN;AAID;;AAED,SAAOC,gBAAKC,OAAL,CAAaL,eAAb,CAAP;AACD","sourcesContent":["import findUp from 'find-up';\nimport path from 'path';\nimport {CLIError} from './errors';\n\n/**\n * Finds project root by looking for a closest `package.json`.\n */\nexport default function findProjectRoot(cwd = process.cwd()): string {\n  const packageLocation = findUp.sync('package.json', {cwd});\n  /**\n   * It is possible that `package.json` doesn't exist\n   * in the tree. In that case, we want to throw an error.\n   *\n   * When executing via `npx`, this will never happen as `npm`\n   * requires that file to be present in order to run.\n   */\n  if (!packageLocation) {\n    throw new CLIError(`\n      We couldn't find a package.json in your project.\n      Are you sure you are running it inside a React Native project?\n    `);\n  }\n\n  return path.dirname(packageLocation);\n}\n"]}