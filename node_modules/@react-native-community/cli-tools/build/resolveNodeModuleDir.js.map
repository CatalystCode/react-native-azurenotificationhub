{"version":3,"sources":["../src/resolveNodeModuleDir.ts"],"names":["resolveNodeModuleDir","root","packageName","packageDependencyDirectory","startDir","undefined","CLIError"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACe,SAASA,oBAAT,CACbC,IADa,EAEbC,WAFa,EAGL;AACR,QAAMC,0BAA0B,GAAG,wDAAyBD,WAAzB,EAAsC;AACvEE,IAAAA,QAAQ,EAAEH;AAD6D,GAAtC,CAAnC;;AAGA,MAAIE,0BAA0B,KAAKE,SAAnC,EAA8C;AAC5C,UAAM,IAAIC,gBAAJ,CACH,qCAAoCJ,WAAY,gBAD7C,CAAN;AAGD,GAJD,MAIO;AACL,WAAOC,0BAAP;AACD;AACF","sourcesContent":["import {findPackageDependencyDir} from './findPackageDependencyDir';\nimport {CLIError} from './errors';\n\n/**\n * Finds a path inside `node_modules`\n */\nexport default function resolveNodeModuleDir(\n  root: string,\n  packageName: string,\n): string {\n  const packageDependencyDirectory = findPackageDependencyDir(packageName, {\n    startDir: root,\n  });\n  if (packageDependencyDirectory === undefined) {\n    throw new CLIError(\n      `Node module directory for package ${packageName} was not found`,\n    );\n  } else {\n    return packageDependencyDirectory;\n  }\n}\n"]}