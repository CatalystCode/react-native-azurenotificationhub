{"version":3,"sources":["../src/index.ts"],"names":["createDevServerMiddleware","options","debuggerProxyEndpoint","isDebuggerConnected","messageSocketEndpoint","broadcast","eventsSocketEndpoint","middleware","use","securityHeadersMiddleware","openURLMiddleware","statusPageMiddleware","rawBodyMiddleware","systraceProfileMiddleware","_req","res","end","watchFolders","forEach","folder","websocketEndpoints","server"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAiBO,SAASA,yBAAT,CAAmCC,OAAnC,EAA+D;AACpE,QAAMC,qBAAqB,GAAG,2CAA9B;AACA,QAAMC,mBAAmB,GAAGD,qBAAqB,CAACC,mBAAlD;AAEA,QAAMC,qBAAqB,GAAG,2CAA9B;AACA,QAAMC,SAAS,GAAGD,qBAAqB,CAACC,SAAxC;AAEA,QAAMC,oBAAoB,GAAG,yCAA2BD,SAA3B,CAA7B;AAEA,QAAME,UAAU,GAAG,0BAChBC,GADgB,CACZC,kCADY,EAEjB;AAFiB,GAGhBD,GAHgB,CAGZ,6BAHY,EAIhBA,GAJgB,CAIZ,yBAJY,EAKhBA,GALgB,CAKZ,cALY,EAKI,4CALJ,EAMhBA,GANgB,CAOf,qBAPe,EAQf,iCAAmBP,OAAnB,EAA4BE,mBAA5B,CARe,EAUhBK,GAVgB,CAUZ,mBAVY,EAUS,+CAAiCP,OAAjC,CAVT,EAWhBO,GAXgB,CAWZ,WAXY,EAWCE,0BAXD,EAYhBF,GAZgB,CAYZ,SAZY,EAYDG,6BAZC,EAahBH,GAbgB,CAaZ,cAbY,EAaII,0BAbJ,EAchBJ,GAdgB,CAcZ,WAdY,EAcCK,kCAdD,EAehBL,GAfgB,CAeZ,SAfY,EAeD,CAACM,IAAD,EAA6BC,GAA7B,KAA0D;AACxEV,IAAAA,SAAS,CAAC,QAAD,CAAT;AACAU,IAAAA,GAAG,CAACC,GAAJ,CAAQ,IAAR;AACD,GAlBgB,EAmBhBR,GAnBgB,CAmBZ,8BAnBY,CAAnB;AAqBAP,EAAAA,OAAO,CAACgB,YAAR,CAAqBC,OAArB,CAA8BC,MAAD,IAAY;AACvC;AACAZ,IAAAA,UAAU,CAACC,GAAX,CAAe,4BAAYW,MAAZ,CAAf;AACD,GAHD;AAKA,SAAO;AACLC,IAAAA,kBAAkB,EAAE;AAClB,yBAAmBlB,qBAAqB,CAACmB,MADvB;AAElB,kBAAYjB,qBAAqB,CAACiB,MAFhB;AAGlB,iBAAWf,oBAAoB,CAACe;AAHd,KADf;AAMLnB,IAAAA,qBANK;AAOLE,IAAAA,qBAPK;AAQLE,IAAAA,oBARK;AASLC,IAAAA;AATK,GAAP;AAWD","sourcesContent":["import http from 'http';\n\nimport compression from 'compression';\nimport connect from 'connect';\nimport errorhandler from 'errorhandler';\nimport nocache from 'nocache';\nimport serveStatic from 'serve-static';\nimport {debuggerUIMiddleware} from '@react-native-community/cli-debugger-ui';\n\nimport devToolsMiddleware from './devToolsMiddleware';\nimport indexPageMiddleware from './indexPageMiddleware';\nimport openStackFrameInEditorMiddleware from './openStackFrameInEditorMiddleware';\nimport openURLMiddleware from './openURLMiddleware';\nimport rawBodyMiddleware from './rawBodyMiddleware';\nimport securityHeadersMiddleware from './securityHeadersMiddleware';\nimport statusPageMiddleware from './statusPageMiddleware';\nimport systraceProfileMiddleware from './systraceProfileMiddleware';\n\nimport createDebuggerProxyEndpoint from './websocket/createDebuggerProxyEndpoint';\nimport createMessageSocketEndpoint from './websocket/createMessageSocketEndpoint';\nimport createEventsSocketEndpoint from './websocket/createEventsSocketEndpoint';\n\nexport {devToolsMiddleware};\nexport {indexPageMiddleware};\nexport {openStackFrameInEditorMiddleware};\nexport {openURLMiddleware};\nexport {rawBodyMiddleware};\nexport {securityHeadersMiddleware};\nexport {statusPageMiddleware};\nexport {systraceProfileMiddleware};\n\ntype MiddlewareOptions = {\n  host?: string;\n  watchFolders: ReadonlyArray<string>;\n  port: number;\n};\n\nexport function createDevServerMiddleware(options: MiddlewareOptions) {\n  const debuggerProxyEndpoint = createDebuggerProxyEndpoint();\n  const isDebuggerConnected = debuggerProxyEndpoint.isDebuggerConnected;\n\n  const messageSocketEndpoint = createMessageSocketEndpoint();\n  const broadcast = messageSocketEndpoint.broadcast;\n\n  const eventsSocketEndpoint = createEventsSocketEndpoint(broadcast);\n\n  const middleware = connect()\n    .use(securityHeadersMiddleware)\n    // @ts-ignore compression and connect types mismatch\n    .use(compression())\n    .use(nocache())\n    .use('/debugger-ui', debuggerUIMiddleware())\n    .use(\n      '/launch-js-devtools',\n      devToolsMiddleware(options, isDebuggerConnected),\n    )\n    .use('/open-stack-frame', openStackFrameInEditorMiddleware(options))\n    .use('/open-url', openURLMiddleware)\n    .use('/status', statusPageMiddleware)\n    .use('/symbolicate', rawBodyMiddleware)\n    .use('/systrace', systraceProfileMiddleware)\n    .use('/reload', (_req: http.IncomingMessage, res: http.ServerResponse) => {\n      broadcast('reload');\n      res.end('OK');\n    })\n    .use(errorhandler());\n\n  options.watchFolders.forEach((folder) => {\n    // @ts-ignore mismatch between express and connect middleware types\n    middleware.use(serveStatic(folder));\n  });\n\n  return {\n    websocketEndpoints: {\n      '/debugger-proxy': debuggerProxyEndpoint.server,\n      '/message': messageSocketEndpoint.server,\n      '/events': eventsSocketEndpoint.server,\n    },\n    debuggerProxyEndpoint,\n    messageSocketEndpoint,\n    eventsSocketEndpoint,\n    middleware,\n  };\n}\n"]}