{"version":3,"sources":["../src/clean.ts"],"names":["DEFAULT_GROUPS","rmdirAsync","rmdir","cleanDir","directory","Promise","resolve","maxRetries","recursive","findPath","startPath","files","file","filename","path","undefined","promptForCaches","groups","caches","type","name","message","choices","Object","entries","map","cmd","group","title","chalk","dim","description","value","selected","includes","min","clean","_argv","_config","cleanOptions","include","projectRoot","verifyCache","Error","COMMANDS","android","tasks","label","action","candidates","os","platform","gradlew","script","basename","cwd","dirname","cocoapods","metro","tmpdir","npm","watchman","yarn","split","length","spinner","commands","warn","start","then","succeed","catch","e","fail","func","options","default","process"],"mappings":"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","sourcesContent":["import {getLoader} from '@react-native-community/cli-tools';\nimport type {Config as CLIConfig} from '@react-native-community/cli-types';\nimport chalk from 'chalk';\nimport execa from 'execa';\nimport {existsSync as fileExists, rmdir} from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport prompts from 'prompts';\nimport {promisify} from 'util';\n\ntype Args = {\n  include?: string;\n  projectRoot: string;\n  verifyCache?: boolean;\n};\n\ntype Task = {\n  label: string;\n  action: () => Promise<void>;\n};\n\ntype CleanGroups = {\n  [key: string]: {\n    description: string;\n    tasks: Task[];\n  };\n};\n\nconst DEFAULT_GROUPS = ['metro', 'watchman'];\n\nconst rmdirAsync = promisify(rmdir);\n\nfunction cleanDir(directory: string): Promise<void> {\n  if (!fileExists(directory)) {\n    return Promise.resolve();\n  }\n\n  return rmdirAsync(directory, {maxRetries: 3, recursive: true});\n}\n\nfunction findPath(startPath: string, files: string[]): string | undefined {\n  // TODO: Find project files via `@react-native-community/cli`\n  for (const file of files) {\n    const filename = path.resolve(startPath, file);\n    if (fileExists(filename)) {\n      return filename;\n    }\n  }\n\n  return undefined;\n}\n\nasync function promptForCaches(\n  groups: CleanGroups,\n): Promise<string[] | undefined> {\n  const {caches} = await prompts({\n    type: 'multiselect',\n    name: 'caches',\n    message: 'Select all caches to clean',\n    choices: Object.entries(groups).map(([cmd, group]) => ({\n      title: `${cmd} ${chalk.dim(`(${group.description})`)}`,\n      value: cmd,\n      selected: DEFAULT_GROUPS.includes(cmd),\n    })),\n    min: 1,\n  });\n  return caches;\n}\n\nexport async function clean(\n  _argv: string[],\n  _config: CLIConfig,\n  cleanOptions: Args,\n): Promise<void> {\n  const {include, projectRoot, verifyCache} = cleanOptions;\n  if (!fileExists(projectRoot)) {\n    throw new Error(`Invalid path provided! ${projectRoot}`);\n  }\n\n  const COMMANDS: CleanGroups = {\n    android: {\n      description: 'Android build caches, e.g. Gradle',\n      tasks: [\n        {\n          label: 'Clean Gradle cache',\n          action: async () => {\n            const candidates =\n              os.platform() === 'win32'\n                ? ['android/gradlew.bat', 'gradlew.bat']\n                : ['android/gradlew', 'gradlew'];\n            const gradlew = findPath(projectRoot, candidates);\n            if (gradlew) {\n              const script = path.basename(gradlew);\n              await execa(\n                os.platform() === 'win32' ? script : `./${script}`,\n                ['clean'],\n                {cwd: path.dirname(gradlew)},\n              );\n            }\n          },\n        },\n      ],\n    },\n    ...(os.platform() === 'darwin'\n      ? {\n          cocoapods: {\n            description: 'CocoaPods cache',\n            tasks: [\n              {\n                label: 'Clean CocoaPods pod cache',\n                action: async () => {\n                  await execa('pod', ['cache', 'clean', '--all'], {\n                    cwd: projectRoot,\n                  });\n                },\n              },\n              {\n                label: 'Remove installed CocoaPods',\n                action: () => cleanDir('ios/Pods'),\n              },\n              {\n                label: 'Remove CocoaPods spec cache',\n                action: () => cleanDir('~/.cocoapods'),\n              },\n            ],\n          },\n        }\n      : undefined),\n    metro: {\n      description: 'Metro, haste-map caches',\n      tasks: [\n        {\n          label: 'Clean Metro cache',\n          action: () => cleanDir(`${os.tmpdir()}/metro-*`),\n        },\n        {\n          label: 'Clean Haste cache',\n          action: () => cleanDir(`${os.tmpdir()}/haste-map-*`),\n        },\n        {\n          label: 'Clean React Native cache',\n          action: () => cleanDir(`${os.tmpdir()}/react-*`),\n        },\n      ],\n    },\n    npm: {\n      description:\n        '`node_modules` folder in the current package, and optionally verify npm cache',\n      tasks: [\n        {\n          label: 'Remove node_modules',\n          action: () => cleanDir(`${projectRoot}/node_modules`),\n        },\n        ...(verifyCache\n          ? [\n              {\n                label: 'Verify npm cache',\n                action: async () => {\n                  await execa('npm', ['cache', 'verify'], {cwd: projectRoot});\n                },\n              },\n            ]\n          : []),\n      ],\n    },\n    watchman: {\n      description: 'Stop Watchman and delete its cache',\n      tasks: [\n        {\n          label: 'Stop Watchman',\n          action: async () => {\n            await execa(\n              os.platform() === 'win32' ? 'tskill' : 'killall',\n              ['watchman'],\n              {cwd: projectRoot},\n            );\n          },\n        },\n        {\n          label: 'Delete Watchman cache',\n          action: async () => {\n            await execa('watchman', ['watch-del-all'], {cwd: projectRoot});\n          },\n        },\n      ],\n    },\n    yarn: {\n      description: 'Yarn cache',\n      tasks: [\n        {\n          label: 'Clean Yarn cache',\n          action: async () => {\n            await execa('yarn', ['cache', 'clean'], {cwd: projectRoot});\n          },\n        },\n      ],\n    },\n  };\n\n  const groups = include ? include.split(',') : await promptForCaches(COMMANDS);\n  if (!groups || groups.length === 0) {\n    return;\n  }\n\n  const spinner = getLoader();\n  for (const group of groups) {\n    const commands = COMMANDS[group];\n    if (!commands) {\n      spinner.warn(`Unknown group: ${group}`);\n      continue;\n    }\n\n    for (const {action, label} of commands.tasks) {\n      spinner.start(label);\n      await action()\n        .then(() => {\n          spinner.succeed();\n        })\n        .catch((e) => {\n          spinner.fail(`${label} » ${e}`);\n        });\n    }\n  }\n}\n\nexport default {\n  func: clean,\n  name: 'clean',\n  description:\n    'Cleans your project by removing React Native related caches and modules.',\n  options: [\n    {\n      name: '--include <string>',\n      description:\n        'Comma-separated flag of caches to clear e.g. `npm,yarn`. If omitted, an interactive prompt will appear.',\n    },\n    {\n      name: '--project-root <string>',\n      description:\n        'Root path to your React Native project. When not specified, defaults to current working directory.',\n      default: process.cwd(),\n    },\n    {\n      name: '--verify-cache',\n      description:\n        'Whether to verify the cache. Currently only applies to npm cache.',\n      default: false,\n    },\n  ],\n};\n"]}