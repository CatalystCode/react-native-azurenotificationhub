{"version":3,"sources":["../src/loadConfig.ts"],"names":["getDependencyConfig","root","dependencyName","finalConfig","config","userConfig","isPlatform","name","platforms","Object","keys","reduce","dependency","platform","platformConfig","dependencyConfig","dependencies","loadConfig","projectRoot","lazyProject","initialConfig","reactNativePath","path","resolve","commands","healthChecks","project","projectConfig","Array","from","Set","acc","localDependencyRoot","length"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {\n  UserDependencyConfig,\n  ProjectConfig,\n  DependencyConfig,\n  UserConfig,\n  Config,\n} from '@react-native-community/cli-types';\nimport {\n  findProjectRoot,\n  resolveNodeModuleDir,\n} from '@react-native-community/cli-tools';\nimport findDependencies from './findDependencies';\nimport resolveReactNativePath from './resolveReactNativePath';\nimport {\n  readConfigFromDisk,\n  readDependencyConfigFromDisk,\n} from './readConfigFromDisk';\nimport assign from './assign';\nimport merge from './merge';\n\nfunction getDependencyConfig(\n  root: string,\n  dependencyName: string,\n  finalConfig: Config,\n  config: UserDependencyConfig,\n  userConfig: UserConfig,\n  isPlatform: boolean,\n): DependencyConfig {\n  return merge(\n    {\n      root,\n      name: dependencyName,\n      platforms: Object.keys(finalConfig.platforms).reduce(\n        (dependency, platform) => {\n          const platformConfig = finalConfig.platforms[platform];\n          dependency[platform] =\n            // Linking platforms is not supported\n            isPlatform || !platformConfig\n              ? null\n              : platformConfig.dependencyConfig(\n                  root,\n                  config.dependency.platforms[platform],\n                );\n          return dependency;\n        },\n        {} as Config['platforms'],\n      ),\n    },\n    userConfig.dependencies[dependencyName] || {},\n  ) as DependencyConfig;\n}\n\n/**\n * Loads CLI configuration\n */\nfunction loadConfig(projectRoot: string = findProjectRoot()): Config {\n  let lazyProject: ProjectConfig;\n  const userConfig = readConfigFromDisk(projectRoot);\n\n  const initialConfig: Config = {\n    root: projectRoot,\n    get reactNativePath() {\n      return userConfig.reactNativePath\n        ? path.resolve(projectRoot, userConfig.reactNativePath)\n        : resolveReactNativePath(projectRoot);\n    },\n    dependencies: userConfig.dependencies,\n    commands: userConfig.commands,\n    healthChecks: [],\n    platforms: userConfig.platforms,\n    get project() {\n      if (lazyProject) {\n        return lazyProject;\n      }\n\n      lazyProject = {};\n      for (const platform in finalConfig.platforms) {\n        const platformConfig = finalConfig.platforms[platform];\n        if (platformConfig) {\n          lazyProject[platform] = platformConfig.projectConfig(\n            projectRoot,\n            userConfig.project[platform] || {},\n          );\n        }\n      }\n\n      return lazyProject;\n    },\n  };\n\n  const finalConfig = Array.from(\n    new Set([\n      ...Object.keys(userConfig.dependencies),\n      ...findDependencies(projectRoot),\n    ]),\n  ).reduce((acc: Config, dependencyName) => {\n    const localDependencyRoot =\n      userConfig.dependencies[dependencyName] &&\n      userConfig.dependencies[dependencyName].root;\n    let root =\n      localDependencyRoot || resolveNodeModuleDir(projectRoot, dependencyName);\n    let config = readDependencyConfigFromDisk(root, dependencyName);\n\n    const isPlatform = Object.keys(config.platforms).length > 0;\n\n    return assign({}, acc, {\n      dependencies: assign({}, acc.dependencies, {\n        get [dependencyName](): DependencyConfig {\n          return getDependencyConfig(\n            root,\n            dependencyName,\n            finalConfig,\n            config,\n            userConfig,\n            isPlatform,\n          );\n        },\n      }),\n      commands: [...acc.commands, ...config.commands],\n      platforms: {\n        ...acc.platforms,\n        ...config.platforms,\n      },\n      healthChecks: [...acc.healthChecks, ...config.healthChecks],\n    }) as Config;\n  }, initialConfig);\n\n  return finalConfig;\n}\n\nexport default loadConfig;\n"]}