{"version":3,"sources":["../../src/config/findLibraryName.ts"],"names":["findLibraryName","root","sourceDir","packageJsonPath","path","join","buildGradlePath","buildGradleKtsPath","fs","existsSync","packageJson","JSON","parse","readFileSync","codegenConfig","name","buildGradleContents","undefined","match"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,SAASA,eAAT,CAAyBC,IAAzB,EAAuCC,SAAvC,EAA0D;AAC/D,QAAMC,eAAe,GAAGC,gBAAKC,IAAL,CAAUJ,IAAV,EAAgB,cAAhB,CAAxB;;AACA,QAAMK,eAAe,GAAGF,gBAAKC,IAAL,CAAUH,SAAV,EAAqB,cAArB,CAAxB;;AACA,QAAMK,kBAAkB,GAAGH,gBAAKC,IAAL,CAAUH,SAAV,EAAqB,kBAArB,CAA3B,CAH+D,CAK/D;;;AACA,MAAIM,cAAGC,UAAH,CAAcN,eAAd,CAAJ,EAAoC;AAAA;;AAClC,UAAMO,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,cAAGK,YAAH,CAAgBV,eAAhB,EAAiC,MAAjC,CAAX,CAApB;;AACA,iCAAIO,WAAW,CAACI,aAAhB,0DAAI,sBAA2BC,IAA/B,EAAqC;AACnC,aAAOL,WAAW,CAACI,aAAZ,CAA0BC,IAAjC;AACD;AACF,GAX8D,CAa/D;;;AACA,MAAIC,mBAAmB,GAAG,EAA1B;;AACA,MAAIR,cAAGC,UAAH,CAAcH,eAAd,CAAJ,EAAoC;AAClCU,IAAAA,mBAAmB,GAAGR,cAAGK,YAAH,CAAgBP,eAAhB,EAAiC,OAAjC,CAAtB;AACD,GAFD,MAEO,IAAIE,cAAGC,UAAH,CAAcF,kBAAd,CAAJ,EAAuC;AAC5CS,IAAAA,mBAAmB,GAAGR,cAAGK,YAAH,CAAgBN,kBAAhB,EAAoC,OAApC,CAAtB;AACD,GAFM,MAEA;AACL,WAAOU,SAAP;AACD;;AAED,QAAMC,KAAK,GAAGF,mBAAmB,CAACE,KAApB,CAA0B,4BAA1B,CAAd;;AAEA,MAAIA,KAAJ,EAAW;AACT,WAAOA,KAAK,CAAC,CAAD,CAAZ;AACD,GAFD,MAEO;AACL,WAAOD,SAAP;AACD;AACF","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nexport function findLibraryName(root: string, sourceDir: string) {\n  const packageJsonPath = path.join(root, 'package.json');\n  const buildGradlePath = path.join(sourceDir, 'build.gradle');\n  const buildGradleKtsPath = path.join(sourceDir, 'build.gradle.kts');\n\n  // We first check if there is a codegenConfig.name inside the package.json file.\n  if (fs.existsSync(packageJsonPath)) {\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n    if (packageJson.codegenConfig?.name) {\n      return packageJson.codegenConfig.name;\n    }\n  }\n\n  // If not, we check if the library specified it in the build.gradle file.\n  let buildGradleContents = '';\n  if (fs.existsSync(buildGradlePath)) {\n    buildGradleContents = fs.readFileSync(buildGradlePath, 'utf-8');\n  } else if (fs.existsSync(buildGradleKtsPath)) {\n    buildGradleContents = fs.readFileSync(buildGradleKtsPath, 'utf-8');\n  } else {\n    return undefined;\n  }\n\n  const match = buildGradleContents.match(/libraryName = [\"'](.+)[\"']/);\n\n  if (match) {\n    return match[1];\n  } else {\n    return undefined;\n  }\n}\n"]}