{"version":3,"sources":["../../src/config/index.ts"],"names":["projectConfig","root","userConfig","src","sourceDir","path","join","appName","getAppName","manifestPath","packageName","Error","dependencyConfiguration","userConfigAppName","fs","existsSync","dependencyConfig","packageClassName","packageImportPath","packageInstance","buildTypes","libraryName","componentDescriptors","androidMkPath","cmakeListsPath"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport findAndroidDir from './findAndroidDir';\nimport findManifest from './findManifest';\nimport findPackageClassName from './findPackageClassName';\nimport {\n  AndroidProjectParams,\n  AndroidProjectConfig,\n  AndroidDependencyParams,\n  AndroidDependencyConfig,\n} from '@react-native-community/cli-types';\nimport {getPackageName} from './getAndroidProject';\nimport {findLibraryName} from './findLibraryName';\nimport {findComponentDescriptors} from './findComponentDescriptors';\n\n/**\n * Gets android project config by analyzing given folder and taking some\n * defaults specified by user into consideration\n */\nexport function projectConfig(\n  root: string,\n  userConfig: AndroidProjectParams = {},\n): AndroidProjectConfig | null {\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n\n  const appName = getAppName(sourceDir, userConfig.appName);\n\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(path.join(sourceDir, appName));\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  const packageName = userConfig.packageName || getPackageName(manifestPath);\n\n  if (!packageName) {\n    throw new Error(`Package name not found in ${manifestPath}`);\n  }\n\n  return {\n    sourceDir,\n    appName,\n    packageName,\n    dependencyConfiguration: userConfig.dependencyConfiguration,\n  };\n}\n\nfunction getAppName(sourceDir: string, userConfigAppName: string | undefined) {\n  let appName = '';\n  if (\n    typeof userConfigAppName === 'string' &&\n    fs.existsSync(path.join(sourceDir, userConfigAppName))\n  ) {\n    appName = userConfigAppName;\n  } else if (fs.existsSync(path.join(sourceDir, 'app'))) {\n    appName = 'app';\n  }\n  return appName;\n}\n\n/**\n * Same as projectConfigAndroid except it returns\n * different config that applies to packages only\n */\nexport function dependencyConfig(\n  root: string,\n  userConfig: AndroidDependencyParams | null = {},\n): AndroidDependencyConfig | null {\n  if (userConfig === null) {\n    return null;\n  }\n\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(sourceDir);\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  const packageName = userConfig.packageName || getPackageName(manifestPath);\n  const packageClassName = findPackageClassName(sourceDir);\n\n  /**\n   * This module has no package to export\n   */\n  if (!packageClassName) {\n    return null;\n  }\n\n  const packageImportPath =\n    userConfig.packageImportPath ||\n    `import ${packageName}.${packageClassName};`;\n\n  const packageInstance =\n    userConfig.packageInstance || `new ${packageClassName}()`;\n\n  const buildTypes = userConfig.buildTypes || [];\n  const dependencyConfiguration = userConfig.dependencyConfiguration;\n  const libraryName =\n    userConfig.libraryName || findLibraryName(root, sourceDir);\n  const componentDescriptors =\n    userConfig.componentDescriptors || findComponentDescriptors(root);\n  const androidMkPath = userConfig.androidMkPath\n    ? path.join(sourceDir, userConfig.androidMkPath)\n    : path.join(sourceDir, 'build/generated/source/codegen/jni/Android.mk');\n  const cmakeListsPath = userConfig.cmakeListsPath\n    ? path.join(sourceDir, userConfig.cmakeListsPath)\n    : path.join(sourceDir, 'build/generated/source/codegen/jni/CMakeLists.txt');\n\n  return {\n    sourceDir,\n    packageImportPath,\n    packageInstance,\n    buildTypes,\n    dependencyConfiguration,\n    libraryName,\n    componentDescriptors,\n    androidMkPath,\n    cmakeListsPath,\n  };\n}\n"]}