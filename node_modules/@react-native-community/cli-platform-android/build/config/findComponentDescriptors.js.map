{"version":3,"sources":["../../src/config/findComponentDescriptors.ts"],"names":["findComponentDescriptors","packageRoot","files","glob","sync","cwd","nodir","ignore","codegenComponent","map","filePath","fs","readFileSync","path","join","extractComponentDescriptors","filter","Boolean","Array","from","Set"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;AAEO,SAASA,wBAAT,CAAkCC,WAAlC,EAAuD;AAC5D,QAAMC,KAAK,GAAGC,gBAAKC,IAAL,CAAU,6BAAV,EAAyC;AACrDC,IAAAA,GAAG,EAAEJ,WADgD;AAErDK,IAAAA,KAAK,EAAE,IAF8C;AAGrDC,IAAAA,MAAM,EAAE;AAH6C,GAAzC,CAAd;;AAKA,QAAMC,gBAAgB,GAAGN,KAAK,CAC3BO,GADsB,CACjBC,QAAD,IACHC,cAAGC,YAAH,CAAgBC,gBAAKC,IAAL,CAAUb,WAAV,EAAuBS,QAAvB,CAAhB,EAAkD,MAAlD,CAFqB,EAItBD,GAJsB,CAIlBM,wDAJkB,EAKtBC,MALsB,CAKfC,OALe,CAAzB,CAN4D,CAa5D;AACA;;AACA,SAAOC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQZ,gBAAR,CAAX,CAAP;AACD","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport {extractComponentDescriptors} from './extractComponentDescriptors';\n\nexport function findComponentDescriptors(packageRoot: string) {\n  const files = glob.sync('**/+(*.js|*.jsx|*.ts|*.tsx)', {\n    cwd: packageRoot,\n    nodir: true,\n    ignore: '**/node_modules/**',\n  });\n  const codegenComponent = files\n    .map((filePath) =>\n      fs.readFileSync(path.join(packageRoot, filePath), 'utf8'),\n    )\n    .map(extractComponentDescriptors)\n    .filter(Boolean);\n\n  // Filter out duplicates as it happens that libraries contain multiple outputs due to package publishing.\n  // TODO: consider using \"codegenConfig\" to avoid this.\n  return Array.from(new Set(codegenComponent as string[]));\n}\n"]}