{"version":3,"sources":["../../../src/commands/init/editTemplate.ts"],"names":["DEFAULT_TITLE_PLACEHOLDER","replaceNameInUTF8File","filePath","projectName","templateName","logger","debug","fileContent","fs","readFile","replacedFileContent","replace","RegExp","toLowerCase","writeFile","renameFile","oldName","newName","newFileName","path","join","dirname","basename","rename","shouldRenameFile","nameToReplace","includes","shouldIgnoreFile","match","UNDERSCORED_DOTFILES","processDotfiles","dotfile","find","e","undefined","changePlaceholderInTemplate","placeholderName","placeholderTitle","projectTitle","process","cwd","reverse","stat","isDirectory"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {logger} from '@react-native-community/cli-tools';\nimport walk from '../../tools/walk';\n\n// We need `graceful-fs` behavior around async file renames on Win32.\n// `gracefulify` does not support patching `fs.promises`. Use `fs-extra`, which\n// exposes its own promise-based interface over `graceful-fs`.\nimport fs from 'fs-extra';\n\ninterface PlaceholderConfig {\n  projectName: string;\n  placeholderName: string;\n  placeholderTitle?: string;\n  projectTitle?: string;\n}\n\n/**\n  TODO: This is a default placeholder for title in react-native template.\n  We should get rid of this once custom templates adapt `placeholderTitle` in their configurations.\n*/\nconst DEFAULT_TITLE_PLACEHOLDER = 'Hello App Display Name';\n\nasync function replaceNameInUTF8File(\n  filePath: string,\n  projectName: string,\n  templateName: string,\n) {\n  logger.debug(`Replacing in ${filePath}`);\n  const fileContent = await fs.readFile(filePath, 'utf8');\n  const replacedFileContent = fileContent\n    .replace(new RegExp(templateName, 'g'), projectName)\n    .replace(\n      new RegExp(templateName.toLowerCase(), 'g'),\n      projectName.toLowerCase(),\n    );\n\n  if (fileContent !== replacedFileContent) {\n    await fs.writeFile(filePath, replacedFileContent, 'utf8');\n  }\n}\n\nasync function renameFile(filePath: string, oldName: string, newName: string) {\n  const newFileName = path.join(\n    path.dirname(filePath),\n    path.basename(filePath).replace(new RegExp(oldName, 'g'), newName),\n  );\n\n  logger.debug(`Renaming ${filePath} -> file:${newFileName}`);\n\n  await fs.rename(filePath, newFileName);\n}\n\nfunction shouldRenameFile(filePath: string, nameToReplace: string) {\n  return path.basename(filePath).includes(nameToReplace);\n}\n\nfunction shouldIgnoreFile(filePath: string) {\n  return filePath.match(/node_modules|yarn.lock|package-lock.json/g);\n}\n\nconst UNDERSCORED_DOTFILES = [\n  'buckconfig',\n  'eslintrc.js',\n  'flowconfig',\n  'gitattributes',\n  'gitignore',\n  'prettierrc.js',\n  'watchmanconfig',\n  'editorconfig',\n  'bundle',\n  'ruby-version',\n  'node-version',\n  'xcode.env',\n];\n\nasync function processDotfiles(filePath: string) {\n  const dotfile = UNDERSCORED_DOTFILES.find((e) => filePath.includes(`_${e}`));\n\n  if (dotfile === undefined) {\n    return;\n  }\n\n  await renameFile(filePath, `_${dotfile}`, `.${dotfile}`);\n}\n\nexport async function changePlaceholderInTemplate({\n  projectName,\n  placeholderName,\n  placeholderTitle = DEFAULT_TITLE_PLACEHOLDER,\n  projectTitle = projectName,\n}: PlaceholderConfig) {\n  logger.debug(`Changing ${placeholderName} for ${projectName} in template`);\n\n  for (const filePath of walk(process.cwd()).reverse()) {\n    if (shouldIgnoreFile(filePath)) {\n      continue;\n    }\n    if (!(await fs.stat(filePath)).isDirectory()) {\n      await replaceNameInUTF8File(filePath, projectName, placeholderName);\n      await replaceNameInUTF8File(filePath, projectTitle, placeholderTitle);\n    }\n    if (shouldRenameFile(filePath, placeholderName)) {\n      await renameFile(filePath, placeholderName, projectName);\n    }\n    if (shouldRenameFile(filePath, placeholderName.toLowerCase())) {\n      await renameFile(\n        filePath,\n        placeholderName.toLowerCase(),\n        projectName.toLowerCase(),\n      );\n    }\n\n    await processDotfiles(filePath);\n  }\n}\n"]}